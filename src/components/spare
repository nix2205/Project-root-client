// import React from "react";

// const OtherExpensesTable = ({ otherExpenses, selectedId, onSelect }) => {
//   return (
//     <table className="w-full border border-gray-300 text-sm table-fixed">
//       <thead className="bg-gray-100">
//         <tr>
//           <th className="border p-2 w-12">Sl.No</th>
//           <th className="border p-2 w-32">Date</th>
//           <th className="border p-2 w-24">Amount</th>
//           <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//             Description
//           </th>
//           <th className="border p-2 w-24">Total</th>
//           <th className="border p-2 w-10">Select</th>
//         </tr>
//       </thead>
//       <tbody>
//         {otherExpenses.map((entry, idx) => {
//           const prevDate = idx > 0 ? otherExpenses[idx - 1].date : null;
//           const showDate = entry.date !== prevDate;
//           return (
//             <tr
//               key={entry._id}
//               className={
//                 selectedId === entry._id ? "bg-blue-100" : "hover:bg-gray-50"
//               }
//             >
//               <td className="border p-2 text-center">{idx + 1}</td>
//               <td className="border p-2 text-center">{showDate ? entry.date : ""}</td>
//               <td className="border p-2 text-right">{entry.amount}</td>
//               <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                 {entry.description}
//               </td>
//               <td className="border p-2 text-right">{entry.amount}</td>
//               <td className="border p-2 text-center">
//                 <input
//                   type="radio"
//                   name="selectOtherExpense"
//                   checked={selectedId === entry._id}
//                   onChange={() => onSelect(entry._id)}
//                   className="w-4 h-4 cursor-pointer accent-blue-500"
//                 />
//               </td>
//             </tr>
//           );
//         })}
//       </tbody>
//     </table>
//   );
// };

// export default OtherExpensesTable;









// // src/components/OtherExpensesTable.js

// import React from "react";

// const OtherExpensesTable = ({ otherExpenses = [] }) => {
//   // Group expenses by date to handle row spans correctly
//   const groupedByDate = otherExpenses.reduce((acc, item) => {
//     if (!acc[item.date]) {
//       acc[item.date] = [];
//     }
//     acc[item.date].push(item);
//     return acc;
//   }, {});

//   let serialNumber = 1;

//   return (
//     <div className="overflow-x-auto rounded-lg shadow border border-gray-300">
//       <table className="w-full border-collapse text-sm bg-white">
//         <thead className="bg-gray-100 text-gray-600 uppercase font-semibold">
//           <tr>
//             <th className="border p-3 w-12 text-center">Sl.No</th>
//             <th className="border p-3 w-32 text-center">Date</th>
//             <th className="border p-3 w-24 text-center">Amount</th>
//             <th className="border p-3 w-auto text-left">Description</th>
//             <th className="border p-3 w-24 text-center">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(groupedByDate).map(([date, entries]) =>
//             entries.map((entry, index) => (
//               <tr key={entry._id} className="hover:bg-gray-50">
//                 <td className="border p-2 text-center">{serialNumber++}</td>
                
//                 {/* The date cell only renders for the first entry of that date */}
//                 {index === 0 && (
//                   <td
//                     rowSpan={entries.length}
//                     className="border p-2 text-center font-semibold align-middle"
//                   >
//                     {date}
//                   </td>
//                 )}

//                 <td className="border p-2 text-right">
//                   {entry.amount.toLocaleString("en-IN")}
//                 </td>
//                 <td className="border p-2 whitespace-normal break-words">
//                   {entry.description}
//                 </td>
//                 <td className="border p-2 text-right font-medium">
//                   {entry.total.toLocaleString("en-IN")}
//                 </td>
//               </tr>
//             ))
//           )}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default OtherExpensesTable;






// // src/components/OtherExpensesTable.js

// import React, { useState } from "react";
// import { Pencil } from "lucide-react";

// const OtherExpensesTable = ({ otherExpenses = [], onSaveAmount, onSaveDescription }) => {
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");

//   // Group expenses by date to handle row spans correctly
//   const groupedByDate = otherExpenses.reduce((acc, item) => {
//     if (!acc[item.date]) {
//       acc[item.date] = [];
//     }
//     acc[item.date].push(item);
//     return acc;
//   }, {});

//   let serialNumber = 1;

//   return (
//     <div className="overflow-x-auto rounded-lg shadow border border-gray-300">
//       <table className="w-full border-collapse text-sm bg-white">
//         <thead className="bg-gray-100 text-gray-600 uppercase font-semibold">
//           <tr>
//             <th className="border p-3 w-12 text-center">Sl.No</th>
//             <th className="border p-3 w-32 text-center">Date</th>
//             <th className="border p-3 w-auto text-left">Description</th>
//             <th className="border p-3 w-48 text-center">Amount</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(groupedByDate).map(([date, entries]) =>
//             entries.map((entry, index) => {
//               const isEditingAmount = editing.id === entry._id && editing.type === "AMOUNT";
//               const isEditingDesc = editing.id === entry._id && editing.type === "DESC";

//               return (
//                 <tr key={entry._id} className="hover:bg-gray-50">
//                   <td className="border p-2 text-center">{serialNumber++}</td>
                  
//                   {index === 0 && (
//                     <td
//                       rowSpan={entries.length}
//                       className="border p-2 text-center font-semibold align-middle"
//                     >
//                       {date}
//                     </td>
//                   )}

//                   <td className="border p-2 whitespace-normal break-words">
//                     {isEditingDesc ? (
//                       <input
//                         type="text"
//                         value={tempValue}
//                         autoFocus
//                         onChange={(e) => setTempValue(e.target.value)}
//                         onBlur={() => {
//                           onSaveDescription(entry._id, tempValue);
//                           setEditing({ id: null, type: null });
//                         }}
//                         onKeyDown={(e) => {
//                           if (e.key === "Enter") {
//                             onSaveDescription(entry._id, tempValue);
//                             setEditing({ id: null, type: null });
//                           }
//                         }}
//                         className="border rounded px-2 py-1 w-full"
//                       />
//                     ) : (
//                       <>
//                         {entry.description}
//                         <button
//                           className={`ml-2 px-2 py-1 text-xs rounded-md ${
//                             entry.description
//                               ? "bg-orange-500 text-white hover:bg-orange-600"
//                               : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//                           }`}
//                           onClick={() => {
//                             setEditing({ id: entry._id, type: "DESC" });
//                             setTempValue(entry.description || "");
//                           }}
//                         >
//                           D
//                         </button>
//                       </>
//                     )}
//                   </td>

//                   <td className="border p-2 text-right">
//                     {isEditingAmount ? (
//                       <input
//                         type="number"
//                         value={tempValue}
//                         autoFocus
//                         onChange={(e) => setTempValue(e.target.value)}
//                         onBlur={() => {
//                           onSaveAmount(entry._id, Number(tempValue));
//                           setEditing({ id: null, type: null });
//                         }}
//                         onKeyDown={(e) => {
//                           if (e.key === "Enter") {
//                             onSaveAmount(entry._id, Number(tempValue));
//                             setEditing({ id: null, type: null });
//                           }
//                         }}
//                         className="border rounded px-2 py-1 w-24 text-right"
//                       />
//                     ) : (
//                       <span className="flex items-center justify-end gap-2">
//                         {entry.amount.toLocaleString("en-IN")}
//                         <button
//                           className="p-1 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
//                           onClick={() => {
//                             setEditing({ id: entry._id, type: "AMOUNT" });
//                             setTempValue(entry.amount || 0);
//                           }}
//                         >
//                           <Pencil size={12} />
//                         </button>
//                       </span>
//                     )}
//                   </td>
//                 </tr>
//               );
//             })
//           )}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default OtherExpensesTable;



// // components/FaresTable.js
// export default function FaresTable({
//   fares,
//   editingCity,
//   editRow,
//   onEdit,
//   onChangeRow,
//   onSave,
//   onCancel,
//   onDelete,
// }) {
//   return (
//     <table className="w-full border border-gray-300">
//       <thead>
//         <tr className="bg-gray-100">
//           <th className="border p-2">City</th>
//           <th className="border p-2">Zone</th>
//           <th className="border p-2">Transport</th>
//           <th className="border p-2">Km's</th>
//           <th className="border p-2">Price/Km</th>
//           <th className="border p-2">Fare</th>
//           <th className="border p-2">DA</th>
//           <th className="border p-2">Actions</th>
//         </tr>
//       </thead>
//       <tbody>
//         {fares &&
//           Object.entries(fares).map(([city, row], i) => (
//             <tr key={i}>
//               <td className="border p-2">{city}</td>
//               {["zone", "transport", "km", "pricePerKm", "fare", "da"].map(
//                 (field) => (
//                   <td key={field} className="border p-2">
//                     {editingCity === city ? (
//                       <input
//                         type={["km", "pricePerKm", "fare", "da"].includes(field) ? "number" : "text"}
//                         value={editRow[field] || ""}
//                         onChange={(e) =>
//                           onChangeRow({ ...editRow, [field]: e.target.value })
//                         }
//                       />
//                     ) : (
//                       row[field] || "-"
//                     )}
//                   </td>
//                 )
//               )}
//               <td className="border p-2">
//                 {editingCity === city ? (
//                   <>
//                     <button
//                       className="text-green-600 mr-2"
//                       onClick={() => onSave(city)}
//                     >
//                       Save
//                     </button>
//                     <button className="text-gray-600" onClick={onCancel}>
//                       Cancel
//                     </button>
//                   </>
//                 ) : (
//                   <>
//                     <button
//                       className="text-blue-500 mr-2"
//                       onClick={() => onEdit(city, row)}
//                     >
//                       Edit
//                     </button>
//                     <button
//                       className="text-red-500"
//                       onClick={() => onDelete(city)}
//                     >
//                       Delete
//                     </button>
//                   </>
//                 )}
//               </td>
//             </tr>
//           ))}
//       </tbody>
//     </table>
//   );
// }






// // components/FaresTable.js
// export default function FaresTable({
//   fares,
//   editingCity,
//   editRow,
//   onEdit,
//   onChangeRow,
//   onSave,
//   onCancel,
//   onDelete,
// }) {
//   return (
//     <table className="w-full border border-gray-300">
//       <thead>
//         <tr className="bg-gray-100">
//           <th className="border p-2">City</th>
//           <th className="border p-2">Zone</th>
//           <th className="border p-2">Transport</th>
//           <th className="border p-2">Km's</th>
//           <th className="border p-2">Price/Km</th>
//           <th className="border p-2">Fare</th>
//           <th className="border p-2">DA</th>
//           <th className="border p-2">Actions</th>
//         </tr>
//       </thead>
//       <tbody>
//         {fares &&
//           Object.entries(fares).map(([city, row], i) => (
//             <tr key={i}>
//               <td className="border p-2">{city}</td>
//               {["zone", "transport", "km", "pricePerKm", "fare", "da"].map(
//                 (field) => (
//                   <td key={field} className="border p-2">
//                     {editingCity === city ? (
//                       <input
//                         type={
//                           ["km", "pricePerKm", "fare", "da"].includes(field)
//                             ? "number"
//                             : "text"
//                         }
//                         value={
//                           editRow[field] !== undefined
//                             ? editRow[field]
//                             : row[field] || ""
//                         }
//                         onChange={(e) =>
//                           onChangeRow({ ...editRow, [field]: e.target.value })
//                         }
//                       />
//                     ) : (
//                       row[field] || "-"
//                     )}
//                   </td>
//                 )
//               )}
//               <td className="border p-2">
//                 {editingCity === city ? (
//                   <>
//                     <button
//                       className="text-green-600 mr-2"
//                       onClick={() => onSave(city)}
//                     >
//                       Save
//                     </button>
//                     <button className="text-gray-600" onClick={onCancel}>
//                       Cancel
//                     </button>
//                   </>
//                 ) : (
//                   <>
//                     <button
//                       className="text-blue-500 mr-2"
//                       onClick={() => onEdit(city)}
//                     >
//                       Edit
//                     </button>
//                     <button
//                       className="text-red-500"
//                       onClick={() => onDelete(city)}
//                     >
//                       Delete
//                     </button>
//                   </>
//                 )}
//               </td>
//             </tr>
//           ))}
//       </tbody>
//     </table>
//   );
// }









// // components/FaresTable.js
// export default function FaresTable({
//   fares,
//   editingCity,
//   editRow,
//   onEdit,
//   onChangeRow,
//   onSave,
//   onCancel,
//   onDelete,
// }) {
//   return (
//     <table className="w-full border border-gray-300">
//       <thead>
//         <tr className="bg-gray-100">
//           <th className="border p-2">City</th>
//           <th className="border p-2">Zone</th>
//           <th className="border p-2">Transport</th>
//           <th className="border p-2">Km's</th>
//           <th className="border p-2">Price/Km</th>
//           <th className="border p-2">Fare (Bike)</th>
//           <th className="border p-2">DA</th>
//           <th className="border p-2">Actions</th>
//         </tr>
//       </thead>
//       <tbody>
//         {fares &&
//           Object.entries(fares).map(([city, row], i) => (
//             <tr key={i}>
//               <td className="border p-2">{city}</td>
//               {/* Zone and Transport are always read-only */}
//               <td className="border p-2">{row.zone}</td>
//               <td className="border p-2">{row.transport}</td>

//               {/* Editable fields */}
//               {["km", "pricePerKm", "fare", "da"].map((field) => (
//                 <td key={field} className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       type="number"
//                       value={
//                         editRow[field] !== undefined
//                           ? editRow[field]
//                           : row[field] || ""
//                       }
//                       onChange={(e) =>
//                         onChangeRow({ ...editRow, [field]: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row[field] || "-"
//                   )}
//                 </td>
//               ))}

//               <td className="border p-2">
//                 {editingCity === city ? (
//                   <>
//                     <button
//                       className="text-green-600 mr-2"
//                       onClick={() => onSave(city)}
//                     >
//                       Save
//                     </button>
//                     <button className="text-gray-600" onClick={onCancel}>
//                       Cancel
//                     </button>
//                   </>
//                 ) : (
//                   <>
//                     <button
//                       className="text-blue-500 mr-2"
//                       onClick={() => onEdit(city)}
//                     >
//                       Edit
//                     </button>
//                     <button
//                       className="text-red-500"
//                       onClick={() => onDelete(city)}
//                     >
//                       Delete
//                     </button>
//                   </>
//                 )}
//               </td>
//             </tr>
//           ))}
//       </tbody>
//     </table>
//   );
// }













// export default function FaresTable({
//   fares,
//   editingRow,
//   editRow,
//   onEdit,
//   onChangeRow,
//   onSave,
//   onCancel,
//   onDelete,
// }) {
//   return (
//     <table className="w-full border border-gray-300">
//       <thead>
//         <tr className="bg-gray-100">
//           <th className="border p-2">City</th>
//           <th className="border p-2">Zone</th>
//           <th className="border p-2">Transport</th>
//           <th className="border p-2">Km's</th>
//           <th className="border p-2">Fare</th>
//           <th className="border p-2">DA</th>
//           <th className="border p-2">Actions</th>
//         </tr>
//       </thead>
//       <tbody>
//         {fares &&
//           Object.entries(fares).map(([city, data]) =>
//             data.transports.map((t) => {
//               const key = `${city}-${t.mode}`;
//               return (
//                 <tr key={key}>
//                   <td className="border p-2">{city}</td>
//                   <td className="border p-2">{data.zone}</td>
//                   <td className="border p-2 capitalize">{t.mode}</td>
//                   <td className="border p-2">
//                     {editingRow === key ? (
//                       <input
//                         type="number"
//                         value={editRow.km}
//                         onChange={(e) =>
//                           onChangeRow({ ...editRow, km: e.target.value })
//                         }
//                       />
//                     ) : (
//                       data.km
//                     )}
//                   </td>
//                   <td className="border p-2">
//                     {editingRow === key ? (
//                       <input
//                         type="number"
//                         value={editRow.fare}
//                         onChange={(e) =>
//                           onChangeRow({ ...editRow, fare: e.target.value })
//                         }
//                       />
//                     ) : (
//                       t.fare
//                     )}
//                   </td>
//                   <td className="border p-2">
//                     {editingRow === key ? (
//                       <input
//                         type="number"
//                         value={editRow.da}
//                         onChange={(e) =>
//                           onChangeRow({ ...editRow, da: e.target.value })
//                         }
//                       />
//                     ) : (
//                       data.da
//                     )}
//                   </td>
//                   <td className="border p-2">
//                     {editingRow === key ? (
//                       <>
//                         <button
//                           className="text-green-600 mr-2"
//                           onClick={() => onSave(city, t.mode)}
//                         >
//                           Save
//                         </button>
//                         <button
//                           className="text-gray-600"
//                           onClick={onCancel}
//                         >
//                           Cancel
//                         </button>
//                       </>
//                     ) : (
//                       <>
//                         <button
//                           className="text-blue-500 mr-2"
//                           onClick={() => onEdit(city, t)}
//                         >
//                           Edit
//                         </button>
//                         {t.isLast && (
//                           <button
//                             className="text-red-500"
//                             onClick={() => onDelete(city)}
//                           >
//                             Delete
//                           </button>
//                         )}
//                       </>
//                     )}
//                   </td>
//                 </tr>
//               );
//             })
//           )}
//       </tbody>
//     </table>
//   );
// }



















// export default function FaresTable({
//   fares,
//   editingRow,
//   editRow,
//   onEdit,
//   onChangeRow,
//   onSave,
//   onCancel,
//   onAddRow,
//   newRow,
//   onChangeNewRow,
// }) {
//   return (
//     <div>
//       <table className="w-full border border-gray-300">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border p-2">City</th>
//             <th className="border p-2">Zone</th>
//             <th className="border p-2">Transport</th>
//             <th className="border p-2">Km's</th>
//             <th className="border p-2">Fare</th>
//             <th className="border p-2">DA</th>
//             <th className="border p-2">Actions</th>
//           </tr>
//         </thead>
//         <tbody>
//           {fares &&
//             Object.entries(fares).map(([city, data]) => {
//               if (data.transports.length === 0) {
//                 // Show one row when all fares are zero
//                 return (
//                   <tr key={city}>
//                     <td className="border p-2">{city}</td>
//                     <td className="border p-2">{data.zone}</td>
//                     <td className="border p-2">-</td>
//                     <td className="border p-2">{data.km}</td>
//                     <td className="border p-2">0</td>
//                     <td className="border p-2">{data.da}</td>
//                     <td className="border p-2">-</td>
//                   </tr>
//                 );
//               }

//               return data.transports.map((t) => {
//                 const key = `${city}-${t.mode}`;
//                 return (
//                   <tr key={key}>
//                     <td className="border p-2">{city}</td>
//                     <td className="border p-2">{data.zone}</td>
//                     <td className="border p-2 capitalize">{t.mode}</td>
//                     <td className="border p-2">
//                       {editingRow === key ? (
//                         <input
//                           type="number"
//                           value={editRow.km}
//                           onChange={(e) =>
//                             onChangeRow({ ...editRow, km: e.target.value })
//                           }
//                         />
//                       ) : (
//                         data.km
//                       )}
//                     </td>
//                     <td className="border p-2">
//                       {editingRow === key ? (
//                         <input
//                           type="number"
//                           value={editRow.fare}
//                           onChange={(e) =>
//                             onChangeRow({ ...editRow, fare: e.target.value })
//                           }
//                         />
//                       ) : (
//                         t.fare
//                       )}
//                     </td>
//                     <td className="border p-2">
//                       {editingRow === key ? (
//                         <input
//                           type="number"
//                           value={editRow.da}
//                           onChange={(e) =>
//                             onChangeRow({ ...editRow, da: e.target.value })
//                           }
//                         />
//                       ) : (
//                         data.da
//                       )}
//                     </td>
//                     <td className="border p-2">
//                       {editingRow === key ? (
//                         <>
//                           <button
//                             className="text-green-600 mr-2"
//                             onClick={() => onSave(city, t.mode)}
//                           >
//                             Save
//                           </button>
//                           <button className="text-gray-600" onClick={onCancel}>
//                             Cancel
//                           </button>
//                         </>
//                       ) : (
//                         <button
//                           className="text-blue-500 mr-2"
//                           onClick={() => onEdit(city, t)}
//                         >
//                           Edit
//                         </button>
//                       )}
//                     </td>
//                   </tr>
//                 );
//               });
//             })}
//         </tbody>
//       </table>

//       {/* Add New Row */}
//       <div className="mt-6 p-4 border rounded bg-gray-50">
//         <h3 className="font-semibold mb-2">Add New Row</h3>
//         <div className="grid grid-cols-6 gap-2">
//           <input
//             type="text"
//             placeholder="City"
//             value={newRow.city}
//             onChange={(e) => onChangeNewRow({ ...newRow, city: e.target.value })}
//             className="border p-2"
//           />
//           <select
//             value={newRow.zone}
//             onChange={(e) => onChangeNewRow({ ...newRow, zone: e.target.value })}
//             className="border p-2"
//           >
//             <option value="">Select Zone</option>
//             <option value="EX">EX</option>
//             <option value="OS">OS</option>
//           </select>
//           <select
//             value={newRow.transport}
//             onChange={(e) =>
//               onChangeNewRow({ ...newRow, transport: e.target.value })
//             }
//             className="border p-2"
//           >
//             <option value="">Select Transport</option>
//             <option value="bike">Bike</option>
//             <option value="bus">Bus</option>
//             <option value="train">Train</option>
//           </select>
//           <input
//             type="number"
//             placeholder="Km"
//             value={newRow.km}
//             onChange={(e) => onChangeNewRow({ ...newRow, km: e.target.value })}
//             className="border p-2"
//           />
//           <input
//             type="number"
//             placeholder="Fare"
//             value={newRow.fare}
//             onChange={(e) => onChangeNewRow({ ...newRow, fare: e.target.value })}
//             className="border p-2"
//           />
//           <input
//             type="number"
//             placeholder="DA"
//             value={newRow.da}
//             onChange={(e) => onChangeNewRow({ ...newRow, da: e.target.value })}
//             className="border p-2"
//           />
//         </div>
//         <button
//           className="mt-3 bg-blue-500 text-white px-4 py-2 rounded"
//           onClick={onAddRow}
//         >
//           Add Row
//         </button>
//       </div>
//     </div>
//   );
// }





// // components/ActionButtons.jsx
// import React from "react";

// const ActionButtons = ({
//   userInfo,
//   transport,
//   setTransport,
//   handleRecord,
//   handleApplyTransport,
//   handleMultiplePlacesRecord,
//   currentCity,
// }) => {
//   const isHQ = currentCity === userInfo.hq;

//   return (
//     <div className="flex flex-wrap gap-4 mb-6 items-center">
//       {/* Record Button */}
//       <button
//         onClick={handleRecord}
//         className="bg-purple-600 text-white px-4 py-2 rounded"
//       >
//         Press for Login Place
//       </button>

//       {/* Transport Selection (only if not HQ) */}
//       {!isHQ && (
//         <>
//           <select
//             value={transport}
//             onChange={(e) => setTransport(e.target.value)}
//             className="border px-3 py-2 rounded"
//           >
//             <option value="">-</option>
//             <option value="bike">Bike</option>
//             <option value="bus">Bus</option>
//             <option value="train">Train</option>
//           </select>

//           <button
//             onClick={handleApplyTransport}
//             className="bg-yellow-500 text-white px-4 py-2 rounded"
//           >
//             Confirm Mode of Transport
//           </button>
//         </>
//       )}

//       {/* HQ Message */}
//       {isHQ && (
//         <span className="text-gray-600 font-medium">
//           HQ detected: No transport needed
//         </span>
//       )}

//       {/* Multi-Place Button */}
//       <button
//         onClick={handleMultiplePlacesRecord}
//         className="bg-blue-500 text-white px-4 py-2 rounded"
//       >
//         Press for Multiple Places
//       </button>
//     </div>
//   );
// };

// export default ActionButtons;










// // components/MultiPlaceForm.jsx
// import React from "react";

// const MultiPlaceForm = ({ data, setData, onSave }) => {
//   return (
//     <div className="mt-6 p-4 border rounded bg-gray-50">
//       <h3 className="text-lg font-semibold mb-2">Multi-Place Entry</h3>

//       <p>
//         <strong>DATE:</strong> {data.date} | <strong>Time:</strong> {data.time}
//       </p>
//       <p>
//         <strong>PLACE OF WORK:</strong> {data.location} | <strong>Zone:</strong>{" "}
//         {data.zone} | <strong>KMs:</strong> {data.km}
//       </p>

//       {/* Transport */}
// {/* Transport */}
// <label className="block text-sm font-medium text-gray-500 mb-1">
//   M.O.T
// </label>
// <select
//   value={data.transport}
//   onChange={(e) => setData({ ...data, transport: e.target.value })}
//   className="border px-3 py-2 rounded w-full text-gray-700"
// >
//   <option value="">-</option>
//   <option value="bike">Bike</option>
//   <option value="bus">Bus</option>
//   <option value="train">Train</option>
// </select>




//       {/* Fare */}
//       <input
//         type="number"
//         placeholder="TA"
//         value={data.fare}
//         onChange={(e) => setData({ ...data, fare: e.target.value })}
//         className="border px-3 py-2 rounded mt-2 w-full"
//       />

//       {/* DA */}
//       <input
//         type="number"
//         placeholder="DA"
//         value={data.da}
//         onChange={(e) => setData({ ...data, da: e.target.value })}
//         className="border px-3 py-2 rounded mt-2 w-full"
//       />

//       {/* Description */}
//       <textarea
//         placeholder="Enter Description"
//         value={data.description}
//         onChange={(e) => setData({ ...data, description: e.target.value })}
//         className="border px-3 py-2 rounded mt-2 w-full"
//       ></textarea>

//       <button
//         onClick={onSave}
//         className="bg-green-600 text-white px-6 py-2 rounded mt-3"
//       >
//         Save Multi-Place Expense
//       </button>
//     </div>
//   );
// };

// export default MultiPlaceForm;







// import React from "react";

// const MultiPlaceForm = ({ data, setData, onSave }) => {
//   return (
//     <div className="mt-8 bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
//       {/* Title */}
//       <h3 className="text-xl font-extrabold text-[#2C3E65] mb-4">
//         Multi-Place Entry
//       </h3>

//       {/* Date & Time */}
//       <div className="flex flex-wrap gap-4 mb-4 text-gray-700">
//         <p>
//           <span className="font-semibold text-gray-500">DATE:</span> {data.date}
//         </p>
//         <p>
//           <span className="font-semibold text-gray-500">TIME:</span> {data.time}
//         </p>
//       </div>

//       {/* Place Info */}
//       <div className="flex flex-wrap gap-4 mb-6 text-gray-700">
//         <p>
//           <span className="font-semibold text-gray-500">Place:</span>{" "}
//           {data.location}
//         </p>
//         <p>
//           <span className="font-semibold text-gray-500">Zone:</span> {data.zone}
//         </p>
//         <p>
//           <span className="font-semibold text-gray-500">KM's:</span> {data.km}
//         </p>
//       </div>

//       {/* Inputs */}
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
//         {/* MOT */}
//         <div>
//           <label className="block text-sm font-medium text-gray-600 mb-1">
//             Mode of Transport
//           </label>
//           <select
//             value={data.transport}
//             onChange={(e) => setData({ ...data, transport: e.target.value })}
//             className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-400 focus:outline-none"
//           >
//             <option value="">Select MOT</option>
//             <option value="bike">Bike</option>
//             <option value="bus">Bus</option>
//             <option value="train">Train</option>
//           </select>
//         </div>

//         {/* Fare */}
//         <div>
//           <label className="block text-sm font-medium text-gray-600 mb-1">
//             TA (Fare)
//           </label>
//           <input
//             type="number"
//             placeholder="Enter TA"
//             value={data.fare}
//             onChange={(e) => setData({ ...data, fare: e.target.value })}
//             className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-400 focus:outline-none"
//           />
//         </div>

//         {/* DA */}
//         <div>
//           <label className="block text-sm font-medium text-gray-600 mb-1">
//             DA
//           </label>
//           <input
//             type="number"
//             placeholder="Enter DA"
//             value={data.da}
//             onChange={(e) => setData({ ...data, da: e.target.value })}
//             className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-400 focus:outline-none"
//           />
//         </div>
//       </div>

//       {/* Description */}
//       <div className="mb-4">
//         <label className="block text-sm font-medium text-gray-600 mb-1">
//           Description
//         </label>
//         <textarea
//           placeholder="Enter description..."
//           value={data.description}
//           onChange={(e) => setData({ ...data, description: e.target.value })}
//           className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-400 focus:outline-none resize-none"
//           rows={3}
//         ></textarea>
//       </div>

//       {/* Save Button */}
//       <button
//         onClick={onSave}
//         className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-6 py-3 rounded-xl shadow-md transition-all duration-300 w-full md:w-auto"
//       >
//         Save Multi-Place Expense
//       </button>
//     </div>
//   );
// };

// export default MultiPlaceForm;








// import React from "react";

// const FieldWorkTable = ({ logs, onSave }) => {
//   if (logs.length === 0) return null;

//   return (
//     <div className="mt-6 bg-white rounded-2xl shadow-lg p-4 border border-gray-200">
//       <div className="overflow-x-auto">
//         <table className="w-full border-collapse rounded-lg overflow-hidden">
//           {/* Table Header */}
//           <thead>
//             <tr className="bg-gradient-to-r from-purple-500 to-indigo-500 text-white">
//               <th className="px-4 py-2 text-left text-sm font-semibold">DATE</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">TIME</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">PLACE OF WORK</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">EX/HQ/OS</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">KM's</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">MOT</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">TA</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">DA</th>
//               <th className="px-4 py-2 text-left text-sm font-semibold">TOTAL</th>
//             </tr>
//           </thead>

//           {/* Table Body */}
//           <tbody>
//             {logs.map((log, idx) => (
//               <tr
//                 key={idx}
//                 className={`${
//                   idx % 2 === 0 ? "bg-gray-50" : "bg-white"
//                 } hover:bg-purple-50 transition`}
//               >
//                 <td className="px-4 py-2 text-gray-700">{log.date}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.time}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.location}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.zone}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.km}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.transport}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.fare}</td>
//                 <td className="px-4 py-2 text-gray-700">{log.da}</td>
//                 <td className="px-4 py-2 font-semibold text-gray-900">{log.total}</td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {/* Save Button */}
//       {!logs[0].isSaved && (
//         <div className="mt-6 text-center">
//           <button
//             onClick={onSave}
//             className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-6 py-3 rounded-xl shadow-md transition-all duration-300"
//           >
//             ✅ Save Normal Expenses
//           </button>
//         </div>
//       )}
//     </div>
//   );
// };

// export default FieldWorkTable;





// import React from "react";
// import { useNavigate } from "react-router-dom";

// const Layout = ({ title, children }) => {
//   const navigate = useNavigate();

//   return (
//     <div className="flex flex-col min-h-screen bg-gray-100">
//       {/* Top Bar */}
//       <header className="bg-[#1f3b64] text-white p-4 flex justify-between items-center shadow">
//         <button
//           onClick={() => navigate(-1)}
//           className="bg-white text-[#1f3b64] px-4 py-2 rounded-lg shadow hover:bg-gray-200 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">{title}</h1>
//         <div className="w-[72px]"></div> {/* Spacer for balance */}
//       </header>

//       {/* Main Content */}
//       <main className="flex-grow p-6">{children}</main>

//       {/* Bottom Bar */}
//       <footer className="bg-[#1f3b64] text-white text-center p-3">
//         © {new Date().getFullYear()} My Project
//       </footer>
//     </div>
//   );
// };

// export default Layout;



// // Layout.js
// import React from "react";
// import { useNavigate } from "react-router-dom";

// const Layout = ({ title, children, backTo }) => {
//   const navigate = useNavigate();

//   return (
//     <div className="flex flex-col min-h-screen bg-gray-100">
//       {/* Top Bar */}
//       <header className="bg-[#1f3b64] text-white p-4 flex justify-between items-center shadow">
//         <button
//           onClick={() => backTo ? navigate(backTo) : navigate(-1)}
//           className="bg-white text-[#1f3b64] px-4 py-2 rounded-lg shadow hover:bg-gray-200 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">{title}</h1>
//         <div className="w-[72px]"></div> {/* Spacer for balance */}
//       </header>

//       {/* Main Content */}
//       <main className="flex-grow p-6">{children}</main>

//       {/* Bottom Bar */}
//       <footer className="bg-[#1f3b64] text-white text-center p-3">
//         © {new Date().getFullYear()} My Project
//       </footer>
//     </div>
//   );
// };

// export default Layout;







// import React from "react";
// import { useNavigate } from "react-router-dom";
// import bgImage from "../utils/BG_TC.png";
// import logo from "../utils/TC_LOGO.png";

// const Layout = ({ title, children, backTo }) => {
//   const navigate = useNavigate();

//   return (
//     <div
//       className="flex flex-col min-h-screen"
//       style={{
//         backgroundImage: `url(${bgImage})`,
//         backgroundSize: "cover",
//         backgroundPosition: "center",
//       }}
//     >
//       {/* Overlay for readability */}
//       <div className="flex flex-col min-h-screen bg-white/85">
//         {/* Top Bar */}
//         <header className="bg-[#1f3b64] text-white p-4 flex items-center justify-between shadow-lg">
//           <button
//             onClick={() => (backTo ? navigate(backTo) : navigate(-1))}
//             className="flex items-center gap-2 bg-white text-[#1f3b64] font-semibold px-4 py-2 rounded-lg shadow hover:bg-[#00a6c2] hover:text-white transition"
//           >
//             ← Back
//           </button>

//           <div className="flex items-center gap-3">
//             <img src={logo} alt="Logo" className="w-8 h-8 rounded-full" />
//             <h1 className="text-2xl font-bold tracking-wide">{title}</h1>
//           </div>

//           <div className="w-[80px]"></div> {/* Spacer */}
//         </header>

//         {/* Main Content */}
//         <main className="flex-grow p-6">{children}</main>

//         {/* Bottom Bar */}
//         <footer className="bg-[#1f3b64] text-white text-center p-3 text-sm">
//           © {new Date().getFullYear()} My Project
//         </footer>
//       </div>
//     </div>
//   );
// };

// export default Layout;







// // components/LogTable.jsx
// import React, { useState } from "react";
// import { Pencil } from "lucide-react";

// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");
//   const [expandedDesc, setExpandedDesc] = useState({});


//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleLocationDesc = (id) => {
//   setExpandedDesc((prev) => ({
//     ...prev,
//     [id]: !prev[id],
//   }));
// };

//   let slNo = 1;

//   const renderTAcell = (log, multiple) => {
//     if (!multiple) return log.fare ?? 0;

//     const isEditing = editing.id === log._id && editing.type === "TA";
//     return (
//       <>
//         {log.fare ?? 0}
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                 onSaveTA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                   onSaveTA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-1 border rounded px-1 text-xs w-16 h-7 text-center"
//           />
//         ) : (
//           <>
//             {log.extraTA !== null && ` +(${log.extraTA})`}
//             <button
//               className="ml-1 px-1 border rounded text-xs"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "TA" });
//                 setTempValue(log.extraTA ?? 0);
//               }}
//             >
//               <Pencil size={10} />
//             </button>
//           </>
//         )}
//         <button
//           className="ml-1 px-1 border rounded text-xs"
//           onClick={() => {
//             setDescEditing({ id: log._id, type: "TA_DESC" });
//             setTempDesc("");
//           }}
//         >
//           D
//         </button>
//       </>
//     );
//   };

//   const renderDAcell = (log, multiple) => {
//     if (!multiple) return log.da ?? 0;

//     const isEditing = editing.id === log._id && editing.type === "DA";
//     return (
//       <>
//         {log.da ?? 0}
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                 onSaveDA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                   onSaveDA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-1 border rounded px-1 text-xs w-16 h-7 text-center"
//           />
//         ) : (
//           <>
//             {log.extraDA !== null && ` +(${log.extraDA})`}
//             <button
//               className="ml-1 px-1 border rounded text-xs"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "DA" });
//                 setTempValue(log.extraDA ?? 0);
//               }}
//             >
//               <Pencil size={10} />
//             </button>
//           </>
//         )}
//         <button
//           className="ml-1 px-1 border rounded text-xs"
//           onClick={() => {
//             setDescEditing({ id: log._id, type: "DA_DESC" });
//             setTempDesc("");
//           }}
//         >
//           D
//         </button>
//       </>
//     );
//   };

// const renderLocationDescRow = (log) => {
//   if (!expandedDesc[log._id]) return null;
//   return (
//     <tr key={`${log._id}-desc`} className="bg-gray-50">
//       <td colSpan={8} className="px-4 py-2 text-center italic text-gray-600">
//         {log.locationDesc || "No description available"}
//       </td>
//     </tr>
//   );
// };

//   const renderDescRow = (log, colSpan) => {
//     if (!(descEditing.id === log._id)) return null;

//     const prevDesc =
//       descEditing.type === "TA_DESC"
//         ? log.taDesc || ""
//         : descEditing.type === "DA_DESC"
//         ? log.daDesc || ""
//         : "";

//     return (
//       <tr className="bg-yellow-50">
//         <td colSpan={colSpan} className="border p-2">
//           <div className="flex items-center gap-3">
//             <input
//               type="text"
//               value={tempDesc}
//               autoFocus
//               placeholder={descEditing.type === "TA_DESC" ? "Enter TA Description" : "Enter DA Description"}
//               onChange={(e) => setTempDesc(e.target.value)}
//               onBlur={() => setDescEditing({ id: null, type: null })}
//               onKeyDown={(e) => {
//                 if (e.key === "Enter") {
//                   if (descEditing.type === "TA_DESC") {
//                     onEditTADesc(log._id, tempDesc);
//                   } else if (descEditing.type === "DA_DESC") {
//                     onEditDADesc(log._id, tempDesc);
//                   }
//                   setDescEditing({ id: null, type: null });
//                 }
//               }}
//               className="w-full border rounded p-1 text-sm"
//             />
//             {prevDesc && <span className="text-gray-600 text-sm italic">Prev: {prevDesc}</span>}
//           </div>
//         </td>
//       </tr>
//     );
//   };

//   return (
//     <table className="w-full border border-gray-300 text-sm">
//       <thead className="bg-gray-100">
//         <tr>
//           <th className="border p-2">Sl.No</th>
//           <th className="border p-2">Date</th>
//           <th className="border p-2">Time</th>
//           <th className="border p-2">Place Of Work</th>
//           <th className="border p-2">HQ/EX/OS</th>
//           <th className="border p-2">KM's</th>
//           <th className="border p-2">M.O.T</th>
//           <th className="border p-2">T.A</th>
//           <th className="border p-2">D.A</th>
//           <th className="border p-2">TOTAL</th>
//           <th className="border p-2">Select</th>
//         </tr>
//       </thead>
//       <tbody>
//         {Object.entries(grouped).map(([date, logs]) => {
//           const multiple = logs.length > 1;
//           const totalRow = logs.reduce(
//             (sum, l) => sum + (l.fare || 0) + (l.da || 0) + (l.extraTA || 0) + (l.extraDA || 0),
//             0
//           );

//           return (
//             <React.Fragment key={date}>
//               <tr className="bg-gray-200 font-semibold">
//                 <td className="border p-2">{slNo++}</td>
//                 <td className="border p-2">
//                   {date}
                  
//                 </td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].time}</td>
//                 <td className="border p-2">
//                   {multiple ? (
//                     <>
//                       MULTIPLE
//                       <button
//                         className="ml-2 px-1 border rounded text-xs"
//                         onClick={() => toggleExpand(date)}
//                       >
//                         {expandedDates[date] ? "Hide" : "Show"}
//                       </button>
//                     </>
//                   ) : (
//                     logs[0].location
//                   )}
//                 </td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].zone}</td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].km}</td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].transport}</td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].fare}</td>
//                 <td className="border p-2">{multiple ? "-" : logs[0].da}</td>
//                 <td className="border p-2">{totalRow}</td>
//                 <td className="border p-2 text-center">
//                   <input
//                     type="radio"
//                     name="selectRow"
//                     checked={selectedRowId === logs[0]._id}
//                     onChange={() => onRowSelect(logs[0]._id)}
//                   />
//                 </td>
//               </tr>


//               {expandedDates[date] &&
//                 logs.map((log) => (
//                   <React.Fragment key={log._id}>
//                     <tr className={selectedRowId === log._id ? "bg-blue-100" : "bg-gray-50"}>
//                       <td className="border p-2" />
//                       <td className="border p-2">{log.date}</td>
//                       <td className="border p-2">{log.time}</td>
//                       <td className="border p-2">
//   {log.location}
//   <button
//     onClick={() => toggleLocationDesc(log._id)}
//     className="ml-2 px-1 border rounded text-xs text-blue-600"
//   >
//     Des
//   </button>
// </td>

//                       <td className="border p-2">{log.zone}</td>
//                       <td className="border p-2">{log.km}</td>
//                       <td className="border p-2">{log.transport}</td>
//                       <td className="border p-2">{renderTAcell(log, multiple)}</td>
//                       <td className="border p-2">{renderDAcell(log, multiple)}</td>
//                       <td className="border p-2">
//                         {(log.fare || 0) + (log.da || 0) + (log.extraTA || 0) + (log.extraDA || 0)}
//                       </td>
//                       <td className="border p-2 text-center">
//                         <input
//                           type="radio"
//                           name="selectRow"
//                           checked={selectedRowId === log._id}
//                           onChange={() => onRowSelect(log._id)}
//                         />
//                       </td>
//                     </tr>
//                     {renderDescRow(log, 11)}
//                     {renderLocationDescRow(log)}

//                   </React.Fragment>
//                 ))}
//             </React.Fragment>
//           );
//         })}
//       </tbody>
//     </table>
//   );
// };

// export default LogTable;





















// // components/LogTable.jsx
// import React, { useState } from "react";
// import { Pencil } from "lucide-react";
// import EditableCell from "./LTEditableCell";
// import DescRow from "./LTDescRow";
// import LocationDescRow from "./LTLocationDescRow";


// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDesc, setExpandedDesc] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");

//   const grouped = expenses.reduce((acc, exp) => {
//     (acc[exp.date] ||= []).push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) =>
//     setExpandedDates((prev) => ({ ...prev, [date]: !prev[date] }));

//   const toggleLocationDesc = (id) =>
//     setExpandedDesc((prev) => ({ ...prev, [id]: !prev[id] }));

//   // 🟢 Generic editable cell for TA/DA
//   const renderEditableCell = (log, type) => {
//     const isTA = type === "TA";
//     const base = isTA ? log.fare : log.da;
//     const extra = isTA ? log.extraTA : log.extraDA;
//     const saveFn = isTA ? onSaveTA : onSaveDA;
//     const descFn = isTA ? onEditTADesc : onEditDADesc;

//     const isEditing = editing.id === log._id && editing.type === type;

//     return (
//       <>
//         {base ?? 0}
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (extra ?? 0)) {
//                 saveFn(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (extra ?? 0)) {
//                   saveFn(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-2 border rounded px-2 text-xs w-16 h-7 text-center focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <>
//             {extra !== null && ` +(${extra})`}
//             <button
//               className="ml-2 p-1 rounded bg-gray-100 hover:bg-gray-200"
//               onClick={() => {
//                 setEditing({ id: log._id, type });
//                 setTempValue(extra ?? 0);
//               }}
//             >
//               <Pencil size={12} />
//             </button>
//           </>
//         )}
//         <button
//           className="ml-2 px-2 py-1 rounded bg-blue-100 text-blue-600 hover:bg-blue-200 text-xs"
//           onClick={() => {
//             setDescEditing({ id: log._id, type: `${type}_DESC`, descFn });
//             setTempDesc("");
//           }}
//         >
//           D
//         </button>
//       </>
//     );
//   };

//   // 🟢 Shared row for editing descriptions
//   const renderDescRow = (log, colSpan) =>
//     descEditing.id === log._id && (
//       <tr className="bg-yellow-50">
//         <td colSpan={colSpan} className="border p-2">
//           <input
//             type="text"
//             value={tempDesc}
//             autoFocus
//             placeholder={`Enter ${descEditing.type}`}
//             onChange={(e) => setTempDesc(e.target.value)}
//             onBlur={() => setDescEditing({ id: null, type: null })}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 descEditing.descFn?.(log._id, tempDesc);
//                 setDescEditing({ id: null, type: null });
//               }
//             }}
//             className="w-full border rounded p-2 text-sm focus:ring focus:ring-blue-300"
//           />
//         </td>
//       </tr>
//     );

//   const renderLocationDescRow = (log) =>
//     expandedDesc[log._id] && (
//       <tr key={`${log._id}-desc`} className="bg-blue-50">
//         <td colSpan={11} className="px-4 py-2 text-center italic text-gray-600">
//           {log.locationDesc || "No description available"}
//         </td>
//       </tr>
//     );

//   let slNo = 1;

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 text-sm uppercase">
//           <tr>
//             <th className="border p-2">Sl.No</th>
//             <th className="border p-2">Date</th>
//             <th className="border p-2">Time</th>
//             <th className="border p-2">Place Of Work</th>
//             <th className="border p-2">HQ/EX/OS</th>
//             <th className="border p-2">KM's</th>
//             <th className="border p-2">M.O.T</th>
//             <th className="border p-2">T.A</th>
//             <th className="border p-2">D.A</th>
//             <th className="border p-2">TOTAL</th>
//             <th className="border p-2">Select</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const multiple = logs.length > 1;
//             const totalRow = logs.reduce(
//               (sum, l) =>
//                 sum + (l.fare || 0) + (l.da || 0) + (l.extraTA || 0) + (l.extraDA || 0),
//               0
//             );

//             return (
//               <React.Fragment key={date}>
//                 {/* Date Row */}
//                 <tr className="bg-gray-200 font-semibold">
//                   <td className="border p-2">{slNo++}</td>
//                   <td className="border p-2">{date}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].time}</td>
//                   <td className="border p-2">
//                     {multiple ? (
//                       <>
//                         MULTIPLE
//                         <button
//                           className="ml-2 px-2 py-1 text-xs rounded bg-blue-100 text-blue-600 hover:bg-blue-200"
//                           onClick={() => toggleExpand(date)}
//                         >
//                           {expandedDates[date] ? "Hide" : "Show"}
//                         </button>
//                       </>
//                     ) : (
//                       logs[0].location
//                     )}
//                   </td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].zone}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].km}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].transport}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].fare}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].da}</td>
//                   <td className="border p-2">{totalRow}</td>
//                   <td className="border p-2 text-center">
//                     <input
//                       type="radio"
//                       name="selectRow"
//                       checked={selectedRowId === logs[0]._id}
//                       onChange={() => onRowSelect(logs[0]._id)}
//                       className="w-4 h-4 accent-blue-500 cursor-pointer"
//                     />
//                   </td>
//                 </tr>

//                 {/* Expanded Logs */}
//                 {expandedDates[date] &&
//                   logs.map((log) => (
//                     <React.Fragment key={log._id}>
//                       <tr
//                         className={`${
//                           selectedRowId === log._id
//                             ? "bg-blue-50"
//                             : "hover:bg-gray-50"
//                         } ${log.isNW ? "text-red-600 font-semibold" : "text-gray-800"}`}
//                       >
//                         <td className="border p-2" />
//                         <td className="border p-2">{log.date}</td>
//                         <td className="border p-2">{log.time}</td>
//                         <td className="border p-2">
//                           {log.location}
//                           <button
//                             onClick={() => toggleLocationDesc(log._id)}
//                             className="ml-2 px-2 py-1 rounded bg-blue-100 text-blue-600 hover:bg-blue-200 text-xs"
//                           >
//                             Des
//                           </button>
//                         </td>
//                         <td className="border p-2">{log.zone}</td>
//                         <td className="border p-2">{log.km}</td>
//                         <td className="border p-2">{log.transport}</td>
//                         <td className="border p-2">{renderEditableCell(log, "TA")}</td>
//                         <td className="border p-2">{renderEditableCell(log, "DA")}</td>
//                         <td className="border p-2">
//                           {(log.fare || 0) + (log.da || 0) + (log.extraTA || 0) + (log.extraDA || 0)}
//                         </td>
//                         <td className="border p-2 text-center">
//                           <input
//                             type="radio"
//                             name="selectRow"
//                             checked={selectedRowId === log._id}
//                             onChange={() => onRowSelect(log._id)}
//                             className="w-4 h-4 accent-blue-500 cursor-pointer"
//                           />
//                         </td>
//                       </tr>
//                       {renderDescRow(log, 11)}
//                       {renderLocationDescRow(log)}
//                     </React.Fragment>
//                   ))}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogTable;









// // components/LogTable.jsx
// import React, { useState } from "react";
// import LTEditableCell from "./LTEditableCell";
// import LTDescRow from "./LTDescRow";
// import LTLocationDescRow from "./LTLocationDescRow";

// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDesc, setExpandedDesc] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");

//   const grouped = expenses.reduce((acc, exp) => {
//     (acc[exp.date] ||= []).push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) =>
//     setExpandedDates((prev) => ({ ...prev, [date]: !prev[date] }));

//   const toggleLocationDesc = (id) =>
//     setExpandedDesc((prev) => ({ ...prev, [id]: !prev[id] }));

//   let slNo = 1;

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 text-sm uppercase">
//           <tr>
//             <th className="border p-2">Sl.No</th>
//             <th className="border p-2">Date</th>
//             <th className="border p-2">Time</th>
//             <th className="border p-2">Place Of Work</th>
//             <th className="border p-2">HQ/EX/OS</th>
//             <th className="border p-2">KM's</th>
//             <th className="border p-2">M.O.T</th>
//             <th className="border p-2">T.A</th>
//             <th className="border p-2">D.A</th>
//             <th className="border p-2">TOTAL</th>
//             <th className="border p-2">Select</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const multiple = logs.length > 1;
//             const totalRow = logs.reduce(
//               (sum, l) =>
//                 sum + (l.fare || 0) + (l.da || 0) + (l.extraTA || 0) + (l.extraDA || 0),
//               0
//             );

//             return (
//               <React.Fragment key={date}>
//                 {/* Date Row */}
//                 <tr className="bg-gray-200 font-semibold">
//                   <td className="border p-2">{slNo++}</td>
//                   <td className="border p-2">{date}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].time}</td>
//                   <td className="border p-2">
//                     {multiple ? (
//                       <>
//                         MULTIPLE
//                         <button
//                           className="ml-2 px-2 py-1 text-xs rounded bg-blue-100 text-blue-600 hover:bg-blue-200"
//                           onClick={() => toggleExpand(date)}
//                         >
//                           {expandedDates[date] ? "Hide" : "Show"}
//                         </button>
//                       </>
//                     ) : (
//                       logs[0].location
//                     )}
//                   </td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].zone}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].km}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].transport}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].fare}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].da}</td>
//                   <td className="border p-2">{totalRow}</td>
//                   <td className="border p-2 text-center">
//                     <input
//                       type="radio"
//                       name="selectRow"
//                       checked={selectedRowId === logs[0]._id}
//                       onChange={() => onRowSelect(logs[0]._id)}
//                       className="w-4 h-4 accent-blue-500 cursor-pointer"
//                     />
//                   </td>
//                 </tr>

//                 {/* Expanded Logs */}
//                 {expandedDates[date] &&
//                   logs.map((log) => (
//                     <React.Fragment key={log._id}>
//                       <tr
//                         className={`${
//                           selectedRowId === log._id
//                             ? "bg-blue-50"
//                             : "hover:bg-gray-50"
//                         } ${log.isNW ? "text-red-600 font-semibold" : "text-gray-800"}`}
//                       >
//                         <td className="border p-2" />
//                         <td className="border p-2">{log.date}</td>
//                         <td className="border p-2">{log.time}</td>
//                         <td className="border p-2">
//                           {log.location}
//                           <button
//                             onClick={() => toggleLocationDesc(log._id)}
//                             className="ml-2 px-2 py-1 rounded bg-blue-100 text-blue-600 hover:bg-blue-200 text-xs"
//                           >
//                             Des
//                           </button>
//                         </td>
//                         <td className="border p-2">{log.zone}</td>
//                         <td className="border p-2">{log.km}</td>
//                         <td className="border p-2">{log.transport}</td>
//                         <td className="border p-2">
//                           <LTEditableCell
//                             log={log}
//                             type="TA"
//                             editing={editing}
//                             setEditing={setEditing}
//                             tempValue={tempValue}
//                             setTempValue={setTempValue}
//                             setDescEditing={setDescEditing}
//                             setTempDesc={setTempDesc}
//                             onSaveTA={onSaveTA}
//                             onSaveDA={onSaveDA}
//                             onEditTADesc={onEditTADesc}
//                             onEditDADesc={onEditDADesc}
//                           />
//                         </td>
//                         <td className="border p-2">
//                           <LTEditableCell
//                             log={log}
//                             type="DA"
//                             editing={editing}
//                             setEditing={setEditing}
//                             tempValue={tempValue}
//                             setTempValue={setTempValue}
//                             setDescEditing={setDescEditing}
//                             setTempDesc={setTempDesc}
//                             onSaveTA={onSaveTA}
//                             onSaveDA={onSaveDA}
//                             onEditTADesc={onEditTADesc}
//                             onEditDADesc={onEditDADesc}
//                           />
//                         </td>
//                         <td className="border p-2">
//                           {(log.fare || 0) + (log.da || 0) + (log.extraTA || 0) + (log.extraDA || 0)}
//                         </td>
//                         <td className="border p-2 text-center">
//                           <input
//                             type="radio"
//                             name="selectRow"
//                             checked={selectedRowId === log._id}
//                             onChange={() => onRowSelect(log._id)}
//                             className="w-4 h-4 accent-blue-500 cursor-pointer"
//                           />
//                         </td>
//                       </tr>

//                       {/* Description Row */}
//                       <LTDescRow
//                         log={log}
//                         colSpan={11}
//                         descEditing={descEditing}
//                         setDescEditing={setDescEditing}
//                         tempDesc={tempDesc}
//                         setTempDesc={setTempDesc}
//                       />

//                       {/* Location Description Row */}
//                       <LTLocationDescRow log={log} expandedDesc={expandedDesc} />
//                     </React.Fragment>
//                   ))}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogTable;


















// // components/LogTable.jsx
// import React, { useState } from "react";
// import { Pencil } from "lucide-react";

// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");
//   const [expandedDesc, setExpandedDesc] = useState({});

//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) =>
//     setExpandedDates((prev) => ({ ...prev, [date]: !prev[date] }));

//   const toggleLocationDesc = (id) =>
//     setExpandedDesc((prev) => ({ ...prev, [id]: !prev[id] }));

//   let slNo = 1;

//   const renderTAcell = (log, multiple) => {
//   if (!multiple) return log.fare ?? 0;

//   const isEditing = editing.id === log._id && editing.type === "TA";
//   const isDescEditing = editing.id === log._id && editing.type === "TA_DESC";

//   return (
//     <>
//       {log.fare ?? 0}
//       {isEditing ? (
//         <input
//           type="number"
//           value={tempValue}
//           autoFocus
//           onChange={(e) => setTempValue(e.target.value)}
//           onBlur={() => {
//             if (Number(tempValue) !== (log.extraTA ?? 0)) {
//               onSaveTA(log._id, Number(tempValue));
//             }
//             setEditing({ id: null, type: null });
//           }}
//           onKeyDown={(e) => {
//             if (e.key === "Enter") {
//               if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                 onSaveTA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }
//           }}
//           className="ml-2 border rounded px-2 text-xs w-16 h-7 text-center focus:ring focus:ring-blue-300"
//         />
//       ) : (
//         <>
//           {log.extraTA !== null && ` +(${log.extraTA})`}
//           <button
//             className="ml-2 p-1 rounded bg-gray-100 hover:bg-gray-200"
//             onClick={() => {
//               setEditing({ id: log._id, type: "TA" });
//               setTempValue(log.extraTA ?? 0);
//             }}
//           >
//             <Pencil size={12} />
//           </button>
//         </>
//       )}

//       {/* TA Description */}
//       {isDescEditing ? (
//         <input
//           type="text"
//           value={tempDesc}
//           autoFocus
//           placeholder="Enter description"
//           onChange={(e) => setTempDesc(e.target.value)}
//           onBlur={() => {
//             onEditTADesc(log._id, tempDesc);
//             setEditing({ id: null, type: null });
//           }}
//           onKeyDown={(e) => {
//             if (e.key === "Enter") {
//               onEditTADesc(log._id, tempDesc);
//               setEditing({ id: null, type: null });
//             }
//           }}
//           className="ml-2 border rounded px-2 text-xs w-32 h-7 focus:ring focus:ring-blue-300"
//         />
//       ) : (
//         <button
//   className={`ml-2 px-2 py-1 rounded text-xs ${
//     log.taDesc
//       ? "bg-green-100 text-green-600 hover:bg-green-200"
//       : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//   }`}
//   onClick={() => {
//     setEditing({ id: log._id, type: "TA_DESC" });
//     setTempDesc(log.taDesc ?? ""); // ✅ preload DB desc here
//   }}
// >
//   D
// </button>
//       )}
//     </>
//   );
// };
// const renderDAcell = (log, multiple) => {
//   if (!multiple) return log.da ?? 0;

//   const isEditing = editing.id === log._id && editing.type === "DA";
//   const isDescEditing = editing.id === log._id && editing.type === "DA_DESC";

//   return (
//     <>
//       {log.da ?? 0}
//       {isEditing ? (
//         <input
//           type="number"
//           value={tempValue}
//           autoFocus
//           onChange={(e) => setTempValue(e.target.value)}
//           onBlur={() => {
//             if (Number(tempValue) !== (log.extraDA ?? 0)) {
//               onSaveDA(log._id, Number(tempValue));
//             }
//             setEditing({ id: null, type: null });
//           }}
//           onKeyDown={(e) => {
//             if (e.key === "Enter") {
//               if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                 onSaveDA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }
//           }}
//           className="ml-2 border rounded px-2 text-xs w-16 h-7 text-center focus:ring focus:ring-blue-300"
//         />
//       ) : (
//         <>
//           {log.extraDA !== null && ` +(${log.extraDA})`}
//           <button
//             className="ml-2 p-1 rounded bg-gray-100 hover:bg-gray-200"
//             onClick={() => {
//               setEditing({ id: log._id, type: "DA" });
//               setTempValue(log.extraDA ?? 0);
//             }}
//           >
//             <Pencil size={12} />
//           </button>
//         </>
//       )}

//       {/* DA Description */}
//       {isDescEditing ? (
//         <input
//           type="text"
//           value={tempDesc}
//           autoFocus
//           placeholder="Enter description"
//           onChange={(e) => setTempDesc(e.target.value)}
//           onBlur={() => {
//             onEditDADesc(log._id, tempDesc);
//             setEditing({ id: null, type: null });
//           }}
//           onKeyDown={(e) => {
//             if (e.key === "Enter") {
//               onEditDADesc(log._id, tempDesc);
//               setEditing({ id: null, type: null });
//             }
//           }}
//           className="ml-2 border rounded px-2 text-xs w-32 h-7 focus:ring focus:ring-blue-300"
//         />
//       ) : (
//         <button
//   className={`ml-2 px-2 py-1 rounded text-xs ${
//     log.daDesc
//       ? "bg-green-100 text-green-600 hover:bg-green-200"
//       : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//   }`}
//   onClick={() => {
//     setEditing({ id: log._id, type: "DA_DESC" });
//     setTempDesc(log.daDesc ?? ""); // ✅ preload DB desc here
//   }}
// >
//   D
// </button>
//       )}
//     </>
//   );
// };

//   const renderLocationDescRow = (log) =>
//     expandedDesc[log._id] && (
//       <tr key={`${log._id}-desc`} className="bg-blue-50">
//         <td colSpan={11} className="px-4 py-2 text-center italic text-gray-600">
//           {log.locationDesc || "No description available"}
//         </td>
//       </tr>
//     );

//   const renderDescRow = (log, colSpan) =>
//     descEditing.id === log._id && (
//       <tr className="bg-yellow-50">
//         <td colSpan={colSpan} className="border p-2">
//           <div className="flex items-center gap-3">
//             <input
//               type="text"
//               value={tempDesc}
//               autoFocus
//               placeholder={
//                 descEditing.type === "TA_DESC"
//                   ? "Enter TA Description"
//                   : "Enter DA Description"
//               }
//               onChange={(e) => setTempDesc(e.target.value)}
//               onBlur={() => setDescEditing({ id: null, type: null })}
//               onKeyDown={(e) => {
//                 if (e.key === "Enter") {
//                   if (descEditing.type === "TA_DESC") {
//                     onEditTADesc(log._id, tempDesc);
//                   } else if (descEditing.type === "DA_DESC") {
//                     onEditDADesc(log._id, tempDesc);
//                   }
//                   setDescEditing({ id: null, type: null });
//                 }
//               }}
//               className="w-full border rounded p-2 text-sm focus:ring focus:ring-blue-300"
//             />
//           </div>
//         </td>
//       </tr>
//     );

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 text-sm uppercase">
//           <tr>
//             <th className="border p-2">Sl.No</th>
//             <th className="border p-2">Date</th>
//             <th className="border p-2">Time</th>
//             <th className="border p-2">Place Of Work</th>
//             <th className="border p-2">HQ/EX/OS</th>
//             <th className="border p-2">KM's</th>
//             <th className="border p-2">M.O.T</th>
//             <th className="border p-2">T.A</th>
//             <th className="border p-2">D.A</th>
//             <th className="border p-2">TOTAL</th>
//             <th className="border p-2">Select</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const multiple = logs.length > 1;
//             const totalRow = logs.reduce(
//               (sum, l) =>
//                 sum +
//                 (l.fare || 0) +
//                 (l.da || 0) +
//                 (l.extraTA || 0) +
//                 (l.extraDA || 0),
//               0
//             );

//             return (
//               <React.Fragment key={date}>
//                 {/* Date Row */}
//                 <tr className={`${
//     multiple
//       ? "bg-gray-200 font-semibold"
//       : logs[0].isNW
//       ? "text-red-600 font-semibold"
//       : "bg-gray-200 font-semibold text-gray-800"
//   }`}>
//                   <td className="border p-2">{slNo++}</td>
//                   <td className="border p-2">{date}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].time}</td>
//                   <td className="border p-2">
//                     {multiple ? (
//                       <>
//                         MULTIPLE
//                         <button
//                           className="ml-2 px-2 py-1 text-xs rounded bg-blue-100 text-blue-600 hover:bg-blue-200"
//                           onClick={() => toggleExpand(date)}
//                         >
//                           {expandedDates[date] ? "Hide" : "Show"}
//                         </button>
//                       </>
//                     ) : (
//                       logs[0].location
//                     )}
//                   </td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].zone}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].km}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].transport}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].fare}</td>
//                   <td className="border p-2">{multiple ? "-" : logs[0].da}</td>
//                   <td className="border p-2">{totalRow}</td>
//                   <td className="border p-2 text-center">
//                     <input
//                       type="radio"
//                       name="selectRow"
//                       checked={selectedRowId === logs[0]._id}
//                       onChange={() => onRowSelect(logs[0]._id)}
//                       className="w-4 h-4 accent-blue-500 cursor-pointer"
//                     />
//                   </td>
//                 </tr>

//                 {/* Expanded Logs */}
//                 {expandedDates[date] &&
//                   logs.map((log) => (
//                     <React.Fragment key={log._id}>
//                       <tr
//                         className={`${
//                           selectedRowId === log._id
//                             ? "bg-blue-50"
//                             : "hover:bg-gray-50"
//                         } ${log.isNW ? "text-red-600 font-semibold" : "text-gray-800"}`}
//                       >
//                         <td className="border p-2" />
//                         <td className="border p-2">{log.date}</td>
//                         <td className="border p-2">{log.time}</td>
//                         <td className="border p-2">
//                           {log.location}
//                           <button
//   onClick={() => toggleLocationDesc(log._id)}
//   className={`ml-2 px-2 py-1 rounded text-xs ${
//     log.locationDesc
//       ? "bg-green-100 text-green-600 hover:bg-green-200"
//       : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//   }`}
// >
//   Des
// </button>

//                         </td>
//                         <td className="border p-2">{log.zone}</td>
//                         <td className="border p-2">{log.km}</td>
//                         <td className="border p-2">{log.transport}</td>
//                         <td className="border p-2">{renderTAcell(log, multiple)}</td>
//                         <td className="border p-2">{renderDAcell(log, multiple)}</td>
//                         <td className="border p-2">
//                           {(log.fare || 0) +
//                             (log.da || 0) +
//                             (log.extraTA || 0) +
//                             (log.extraDA || 0)}
//                         </td>
//                         <td className="border p-2 text-center">
//                           <input
//                             type="radio"
//                             name="selectRow"
//                             checked={selectedRowId === log._id}
//                             onChange={() => onRowSelect(log._id)}
//                             className="w-4 h-4 accent-blue-500 cursor-pointer"
//                           />
//                         </td>
//                       </tr>
//                       {renderDescRow(log, 11)}
//                       {renderLocationDescRow(log)}
//                     </React.Fragment>
//                   ))}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogTable;




















//same theme by gemini

// import React, { useState } from "react";
// import { Pencil } from "lucide-react";

// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");
//   const [expandedDesc, setExpandedDesc] = useState({});

//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) =>
//     setExpandedDates((prev) => ({ ...prev, [date]: !prev[date] }));

//   const toggleLocationDesc = (id) =>
//     setExpandedDesc((prev) => ({ ...prev, [id]: !prev[id] }));

//   let slNo = 1;

//   const renderTAcell = (log, multiple) => {
//     const isEditing = editing.id === log._id && editing.type === "TA";
//     const isDescEditing = editing.id === log._id && editing.type === "TA_DESC";
//     const showDesc = log.taDesc || isDescEditing;

//     return (
//       <div className="flex items-center gap-2">
//         <span>{log.fare ?? 0}</span>
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                 onSaveTA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                   onSaveTA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="w-16 h-7 px-2 border border-gray-300 rounded focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <>
//             {log.extraTA !== null && ` +(${log.extraTA})`}
//             <button
//               className="p-1 rounded bg-gray-200 hover:bg-gray-300"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "TA" });
//                 setTempValue(log.extraTA ?? 0);
//               }}
//             >
//               <Pencil size={12} />
//             </button>
//           </>
//         )}
//         <button
//           className={`px-2 py-1 rounded-full text-xs transition duration-150 ease-in-out ${
//             showDesc ? "bg-green-100 text-green-600" : "bg-gray-200 text-gray-600"
//           }`}
//           onClick={() => {
//             setDescEditing({ id: log._id, type: "TA_DESC" });
//             setTempDesc(log.taDesc ?? "");
//           }}
//         >
//           D
//         </button>
//       </div>
//     );
//   };

//   const renderDAcell = (log, multiple) => {
//     const isEditing = editing.id === log._id && editing.type === "DA";
//     const isDescEditing = editing.id === log._id && editing.type === "DA_DESC";
//     const showDesc = log.daDesc || isDescEditing;

//     return (
//       <div className="flex items-center gap-2">
//         <span>{log.da ?? 0}</span>
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                 onSaveDA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                   onSaveDA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="w-16 h-7 px-2 border border-gray-300 rounded focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <>
//             {log.extraDA !== null && ` +(${log.extraDA})`}
//             <button
//               className="p-1 rounded bg-gray-200 hover:bg-gray-300"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "DA" });
//                 setTempValue(log.extraDA ?? 0);
//               }}
//             >
//               <Pencil size={12} />
//             </button>
//           </>
//         )}
//         <button
//           className={`px-2 py-1 rounded-full text-xs transition duration-150 ease-in-out ${
//             showDesc ? "bg-green-100 text-green-600" : "bg-gray-200 text-gray-600"
//           }`}
//           onClick={() => {
//             setDescEditing({ id: log._id, type: "DA_DESC" });
//             setTempDesc(log.daDesc ?? "");
//           }}
//         >
//           D
//         </button>
//       </div>
//     );
//   };

//   const renderLocationDescRow = (log) =>
//     expandedDesc[log._id] && (
//       <tr key={`${log._id}-desc`} className="bg-gray-50 border-t border-gray-200">
//         <td colSpan={11} className="p-4 text-center italic text-gray-600">
//           {log.locationDesc || "No description available"}
//         </td>
//       </tr>
//     );

//   const renderDescRow = (log, colSpan) =>
//     descEditing.id === log._id && (
//       <tr className="bg-gray-100">
//         <td colSpan={colSpan} className="border-t border-b border-gray-200 p-2">
//           <div className="flex items-center gap-3">
//             <input
//               type="text"
//               value={tempDesc}
//               autoFocus
//               placeholder={
//                 descEditing.type === "TA_DESC"
//                   ? "Enter TA Description"
//                   : "Enter DA Description"
//               }
//               onChange={(e) => setTempDesc(e.target.value)}
//               onBlur={() => {
//                 if (descEditing.type === "TA_DESC") {
//                   onEditTADesc(log._id, tempDesc);
//                 } else if (descEditing.type === "DA_DESC") {
//                   onEditDADesc(log._id, tempDesc);
//                 }
//                 setDescEditing({ id: null, type: null });
//               }}
//               onKeyDown={(e) => {
//                 if (e.key === "Enter") {
//                   if (descEditing.type === "TA_DESC") {
//                     onEditTADesc(log._id, tempDesc);
//                   } else if (descEditing.type === "DA_DESC") {
//                     onEditDADesc(log._id, tempDesc);
//                   }
//                   setDescEditing({ id: null, type: null });
//                 }
//               }}
//               className="w-full border border-gray-300 rounded-lg p-2 text-sm focus:ring focus:ring-blue-300"
//             />
//           </div>
//         </td>
//       </tr>
//     );

//   return (
//     <div className="overflow-x-auto rounded-lg shadow-md">
//       <table className="w-full border-collapse text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 uppercase text-xs">
//           <tr>
//             <th className="border border-gray-200 p-2">Sl.No</th>
//             <th className="border border-gray-200 p-2">Date</th>
//             <th className="border border-gray-200 p-2">Time</th>
//             <th className="border border-gray-200 p-2">Place Of Work</th>
//             <th className="border border-gray-200 p-2">HQ/EX/OS</th>
//             <th className="border border-gray-200 p-2">KM's</th>
//             <th className="border border-gray-200 p-2">M.O.T</th>
//             <th className="border border-gray-200 p-2">T.A</th>
//             <th className="border border-gray-200 p-2">D.A</th>
//             <th className="border border-gray-200 p-2">TOTAL</th>
//             <th className="border border-gray-200 p-2">Select</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const multiple = logs.length > 1;
//             const totalRow = logs.reduce(
//               (sum, l) => sum + (l.fare || 0) + (l.da || 0) + (l.extraTA || 0) + (l.extraDA || 0),
//               0
//             );

//             const summaryRowClass = logs.some((log) => log.isNW)
//               ? "bg-red-50 text-red-600 font-semibold"
//               : logs.some((log) => log.location?.toLowerCase() === "sunday")
//               ? "bg-blue-50 text-blue-600 font-semibold"
//               : "bg-gray-100 text-gray-800 font-semibold";

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr className={`border-t border-gray-200 ${summaryRowClass}`}>
//                   <td className="border border-gray-200 p-2">{slNo++}</td>
//                   <td className="border border-gray-200 p-2">{date}</td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].time}</td>
//                   <td className="border border-gray-200 p-2">
//                     {multiple ? (
//                       <div className="flex items-center gap-2">
//                         MULTIPLE
//                         <button
//                           className="px-2 py-1 text-xs rounded-full bg-blue-500 text-white hover:bg-blue-600"
//                           onClick={() => toggleExpand(date)}
//                         >
//                           {expandedDates[date] ? "Hide" : "Show"}
//                         </button>
//                       </div>
//                     ) : (
//                       logs[0].location
//                     )}
//                   </td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].zone}</td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].km}</td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].transport}</td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].fare}</td>
//                   <td className="border border-gray-200 p-2">{multiple ? "-" : logs[0].da}</td>
//                   <td className="border border-gray-200 p-2 font-bold">{totalRow}</td>
//                   <td className="border border-gray-200 p-2 text-center">
//                     <input
//                       type="radio"
//                       name="selectRow"
//                       checked={selectedRowId === (multiple ? null : logs[0]._id)}
//                       onChange={() => onRowSelect(multiple ? null : logs[0]._id)}
//                       className="w-4 h-4 accent-blue-500 cursor-pointer"
//                     />
//                   </td>
//                 </tr>

//                 {/* Expanded Logs */}
//                 {expandedDates[date] &&
//                   logs.map((log) => (
//                     <React.Fragment key={log._id}>
//                       <tr
//                         className={`border-t border-gray-200 ${
//                           selectedRowId === log._id ? "bg-blue-50" : "hover:bg-gray-50"
//                         } ${log.isNW ? "text-red-600 font-semibold bg-red-100" : "text-gray-800"}`}
//                       >
//                         <td className="border border-gray-200 p-2" />
//                         <td className="border border-gray-200 p-2">{log.date}</td>
//                         <td className="border border-gray-200 p-2">{log.time}</td>
//                         <td className="border border-gray-200 p-2">
//                           <div className="flex items-center gap-2">
//                             {log.location}
//                             <button
//                               onClick={() => toggleLocationDesc(log._id)}
//                               className={`px-2 py-1 rounded-full text-xs transition duration-150 ease-in-out ${
//                                 log.locationDesc ? "bg-green-100 text-green-600" : "bg-gray-200 text-gray-600"
//                               }`}
//                             >
//                               Des
//                             </button>
//                           </div>
//                         </td>
//                         <td className="border border-gray-200 p-2">{log.zone}</td>
//                         <td className="border border-gray-200 p-2">{log.km}</td>
//                         <td className="border border-gray-200 p-2">{log.transport}</td>
//                         <td className="border border-gray-200 p-2">{renderTAcell(log, multiple)}</td>
//                         <td className="border border-gray-200 p-2">{renderDAcell(log, multiple)}</td>
//                         <td className="border border-gray-200 p-2 font-semibold">
//                           {(log.fare || 0) + (log.da || 0) + (log.extraTA || 0) + (log.extraDA || 0)}
//                         </td>
//                         <td className="border border-gray-200 p-2 text-center">
//                           <input
//                             type="radio"
//                             name="selectRow"
//                             checked={selectedRowId === log._id}
//                             onChange={() => onRowSelect(log._id)}
//                             className="w-4 h-4 accent-blue-500 cursor-pointer"
//                           />
//                         </td>
//                       </tr>
//                       {renderDescRow(log, 11)}
//                       {renderLocationDescRow(log)}
//                     </React.Fragment>
//                   ))}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogTable;












// import React, { useState } from "react";
// import { Pencil } from "lucide-react";

// const LogTable = ({
//   expenses = [],
//   onSaveTA,
//   onSaveDA,
//   onEditTADesc,
//   onEditDADesc,
//   onEditLocationDesc,
//   onRowSelect,
//   selectedRowId,
// }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [editing, setEditing] = useState({ id: null, type: null });
//   const [tempValue, setTempValue] = useState("");
//   const [descEditing, setDescEditing] = useState({ id: null, type: null });
//   const [tempDesc, setTempDesc] = useState("");
//   const [expandedDesc, setExpandedDesc] = useState({});

//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) =>
//     setExpandedDates((prev) => ({ ...prev, [date]: !prev[date] }));

//   const toggleLocationDesc = (id) =>
//     setExpandedDesc((prev) => ({ ...prev, [id]: !prev[id] }));

//   let slNo = 1;

//   const renderTAcell = (log, multiple) => {
//     if (!multiple) return log.fare ?? 0;

//     const isEditing = editing.id === log._id && editing.type === "TA";
//     const isDescEditing = editing.id === log._id && editing.type === "TA_DESC";

//     return (
//       <>
//         {log.fare ?? 0}
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                 onSaveTA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraTA ?? 0)) {
//                   onSaveTA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-2 border rounded-md px-2 text-xs w-16 h-7 text-center focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <>
//             {log.extraTA !== null && ` +(${log.extraTA})`}
//             <button
//               className="ml-2 p-1 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "TA" });
//                 setTempValue(log.extraTA ?? 0);
//               }}
//             >
//               <Pencil size={12} />
//             </button>
//           </>
//         )}

//         {/* TA Description */}
//         {isDescEditing ? (
//           <input
//             type="text"
//             value={tempDesc}
//             autoFocus
//             placeholder="Enter description"
//             onChange={(e) => setTempDesc(e.target.value)}
//             onBlur={() => {
//               onEditTADesc(log._id, tempDesc);
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 onEditTADesc(log._id, tempDesc);
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-2 border rounded-md px-2 text-xs w-32 h-7 focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <button
//             className={`ml-2 px-2 py-1 text-xs rounded-md ${
//               log.taDesc
//                 ? "bg-green-500 text-white hover:bg-green-600"
//                 : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//             }`}
//             onClick={() => {
//               setEditing({ id: log._id, type: "TA_DESC" });
//               setTempDesc(log.taDesc ?? "");
//             }}
//           >
//             D
//           </button>
//         )}
//       </>
//     );
//   };

//   const renderDAcell = (log, multiple) => {
//     if (!multiple) return log.da ?? 0;

//     const isEditing = editing.id === log._id && editing.type === "DA";
//     const isDescEditing = editing.id === log._id && editing.type === "DA_DESC";

//     return (
//       <>
//         {log.da ?? 0}
//         {isEditing ? (
//           <input
//             type="number"
//             value={tempValue}
//             autoFocus
//             onChange={(e) => setTempValue(e.target.value)}
//             onBlur={() => {
//               if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                 onSaveDA(log._id, Number(tempValue));
//               }
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 if (Number(tempValue) !== (log.extraDA ?? 0)) {
//                   onSaveDA(log._id, Number(tempValue));
//                 }
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-2 border rounded-md px-2 text-xs w-16 h-7 text-center focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <>
//             {log.extraDA !== null && ` +(${log.extraDA})`}
//             <button
//               className="ml-2 p-1 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
//               onClick={() => {
//                 setEditing({ id: log._id, type: "DA" });
//                 setTempValue(log.extraDA ?? 0);
//               }}
//             >
//               <Pencil size={12} />
//             </button>
//           </>
//         )}

//         {/* DA Description */}
//         {isDescEditing ? (
//           <input
//             type="text"
//             value={tempDesc}
//             autoFocus
//             placeholder="Enter description"
//             onChange={(e) => setTempDesc(e.target.value)}
//             onBlur={() => {
//               onEditDADesc(log._id, tempDesc);
//               setEditing({ id: null, type: null });
//             }}
//             onKeyDown={(e) => {
//               if (e.key === "Enter") {
//                 onEditDADesc(log._id, tempDesc);
//                 setEditing({ id: null, type: null });
//               }
//             }}
//             className="ml-2 border rounded-md px-2 text-xs w-32 h-7 focus:ring focus:ring-blue-300"
//           />
//         ) : (
//           <button
//             className={`ml-2 px-2 py-1 text-xs rounded-md ${
//               log.daDesc
//                 ? "bg-green-500 text-white hover:bg-green-600"
//                 : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//             }`}
//             onClick={() => {
//               setEditing({ id: log._id, type: "DA_DESC" });
//               setTempDesc(log.daDesc ?? "");
//             }}
//           >
//             D
//           </button>
//         )}
//       </>
//     );
//   };

//   const renderLocationDescRow = (log) =>
//     expandedDesc[log._id] && (
//       <tr key={`${log._id}-desc`} className="bg-blue-50">
//         <td colSpan={11} className="px-4 py-2 text-center italic text-gray-600">
//           {log.locationDesc || "No description available"}
//         </td>
//       </tr>
//     );

//   return (
//     <div className="overflow-x-auto rounded-lg shadow border border-gray-300">
//       <table className="w-full border text-base bg-white rounded-lg overflow-hidden">
//         <thead className="bg-blue-50 text-blue-700 uppercase font-semibold">
//           <tr>
//             <th className="border px-3 py-2">Sl.No</th>
//             <th className="border px-3 py-2">Date</th>
//             <th className="border px-3 py-2">Time</th>
//             <th className="border px-3 py-2">Place Of Work</th>
//             <th className="border px-3 py-2">HQ/EX/OS</th>
//             <th className="border px-3 py-2">KM's</th>
//             <th className="border px-3 py-2">M.O.T</th>
//             <th className="border px-3 py-2">T.A</th>
//             <th className="border px-3 py-2">D.A</th>
//             <th className="border px-3 py-2">TOTAL</th>
//             <th className="border px-3 py-2">Select</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const multiple = logs.length > 1;
//             const totalRow = logs.reduce(
//               (sum, l) =>
//                 sum +
//                 (l.fare || 0) +
//                 (l.da || 0) +
//                 (l.extraTA || 0) +
//                 (l.extraDA || 0),
//               0
//             );

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr
//                   className={`border-t font-medium ${
//                     multiple
//                       ? "bg-gray-100 text-gray-800"
//                       : logs[0].isNW
//                       ? "bg-red-50 text-red-700"
//                       : "bg-gray-50 text-gray-800"
//                   }`}
//                 >
//                   <td className="border px-3 py-2">{slNo++}</td>
//                   <td className="border px-3 py-2">{date}</td>
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].time}</td>
//                   <td className="border px-3 py-2">
//                     {multiple ? (
//                       <>
//                         MULTIPLE
//                         <button
//                           className="ml-2 px-2 py-1 text-xs rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
//                           onClick={() => toggleExpand(date)}
//                         >
//                           {expandedDates[date] ? "Hide" : "Show"}
//                         </button>
//                       </>
//                     ) : (
//                       logs[0].location
//                     )}
//                   </td>
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].zone}</td>
                  
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].km}</td>
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].transport}</td>
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].fare}</td>
//                   <td className="border px-3 py-2">{multiple ? "-" : logs[0].da}</td>
//                   <td className="border px-3 py-2">{totalRow}</td>
//                   <td className="border px-3 py-2 text-center">
//                     <input
//                       type="radio"
//                       name="selectRow"
//                       checked={selectedRowId === logs[0]._id}
//                       onChange={() => onRowSelect(logs[0]._id)}
//                       className="w-4 h-4 accent-blue-500 cursor-pointer"
//                     />
//                   </td>
//                 </tr>

//                 {/* Expanded Rows */}
//                 {expandedDates[date] &&
//                   logs.map((log) => (
//                     <React.Fragment key={log._id}>
//                       <tr
//                         className={`border-t ${
//                           selectedRowId === log._id
//                             ? "bg-blue-50"
//                             : "hover:bg-gray-50"
//                         } ${log.isNW ? "bg-red-50 text-red-700" : "text-gray-800"}`}
//                       >
//                         <td className="border px-3 py-2" />
//                         <td className="border px-3 py-2">{log.date}</td>
//                         <td className="border px-3 py-2">{log.time}</td>
//                         <td className="border px-3 py-2">
//                           {log.location}
//                           <button
//                             onClick={() => toggleLocationDesc(log._id)}
//                             className={`ml-2 px-2 py-1 text-xs rounded-md ${
//                               log.locationDesc
//                                 ? "bg-green-500 text-white hover:bg-green-600"
//                                 : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//                             }`}
//                           >
//                             Des
//                           </button>
//                         </td>
//                         <td className="border px-3 py-2">{log.zone}</td>

//                         <td className="border px-3 py-2">{log.km}</td>
//                         <td className="border px-3 py-2">{log.transport}</td>
//                         <td className="border px-3 py-2">{renderTAcell(log, multiple)}</td>
//                         <td className="border px-3 py-2">{renderDAcell(log, multiple)}</td>
//                         <td className="border px-3 py-2">
//                           {(log.fare || 0) +
//                             (log.da || 0) +
//                             (log.extraTA || 0) +
//                             (log.extraDA || 0)}
//                         </td>
//                         <td className="border px-3 py-2 text-center">
//                           <input
//                             type="radio"
//                             name="selectRow"
//                             checked={selectedRowId === log._id}
//                             onChange={() => onRowSelect(log._id)}
//                             className="w-4 h-4 accent-blue-500 cursor-pointer"
//                           />
//                         </td>
//                       </tr>
//                       {renderLocationDescRow(log)}
//                     </React.Fragment>
//                   ))}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogTable;





// // components/PasswordReset.js
// import { useState } from "react";
// import axios from "axios";

// const API = process.env.REACT_APP_BACKEND_URL;

// export default function PasswordReset({ username }) {
//   const [newPassword, setNewPassword] = useState("");

//   const handleResetPassword = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/admin/reset-password/${username}`,
//         { newPassword },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("Password reset successfully!");
//       setNewPassword(""); // clear input
//     } catch (err) {
//       console.error("Password reset failed:", err);
//     }
//   };

//   return (
//     <div className="mb-4">
//       <input
//         type="password"
//         placeholder="Enter new password"
//         value={newPassword}
//         onChange={(e) => setNewPassword(e.target.value)}
//         className="border px-2 py-1 rounded mr-2"
//       />
//       <button
//         className="bg-blue-500 text-white px-3 py-1 rounded"
//         onClick={handleResetPassword}
//         disabled={!newPassword}
//       >
//         Reset Password
//       </button>
//     </div>
//   );
// }





// // components/UserCities.js
// export default function UserCities({ user, onDelete }) {
//   return (
//     <div className="mb-4">
//       <h3 className="font-semibold">EX Cities</h3>
//       <ul>
//         {user.ex?.map((city, i) => (
//           <li key={i} className="flex justify-between items-center">
//             {city}
//             <button
//               className="text-red-500"
//               onClick={() => onDelete(city, "ex")}
//             >
//               Delete
//             </button>
//           </li>
//         ))}
//       </ul>

//       <h3 className="font-semibold mt-3">OS Cities</h3>
//       <ul>
//         {user.os?.map((city, i) => (
//           <li key={i} className="flex justify-between items-center">
//             {city}
//             <button
//               className="text-red-500"
//               onClick={() => onDelete(city, "os")}
//             >
//               Delete
//             </button>
//           </li>
//         ))}
//       </ul>
//     </div>
//   );
// }











// // components/UserCities.js
// export default function UserCities({ user, onDelete }) {
//   return (
//     <div className="mb-4">
//       {/* HQ City */}
//       <h3 className="font-semibold">HQ City</h3>
//       <div className="flex justify-between items-center mb-2">
//         {user.hq ? (
//           <>
//             <span>{user.hq}</span>
//             <button
//               className="text-red-500"
//               onClick={() => onDelete(user.hq, "hq")}
//             >
//               Delete
//             </button>
//           </>
//         ) : (
//           <span className="text-gray-500">No HQ set</span>
//         )}
//       </div>

//       {/* EX Cities */}
//       <h3 className="font-semibold mt-3">EX Cities</h3>
//       <ul>
//         {user.ex?.length > 0 ? (
//           user.ex.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button
//                 className="text-red-500"
//                 onClick={() => onDelete(city, "ex")}
//               >
//                 Delete
//               </button>
//             </li>
//           ))
//         ) : (
//           <li className="text-gray-500">No EX cities</li>
//         )}
//       </ul>

//       {/* OS Cities */}
//       <h3 className="font-semibold mt-3">OS Cities</h3>
//       <ul>
//         {user.os?.length > 0 ? (
//           user.os.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button
//                 className="text-red-500"
//                 onClick={() => onDelete(city, "os")}
//               >
//                 Delete
//               </button>
//             </li>
//           ))
//         ) : (
//           <li className="text-gray-500">No OS cities</li>
//         )}
//       </ul>
//     </div>
//   );
// }







// import React, { useState } from "react";

// const UserLogTable = ({ expenses = [] }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   // map of rowId -> { ta?: boolean, da?: boolean }
//   const [expandedDescs, setExpandedDescs] = useState({});
//   const [expandedDateDescs] = useState({}); // { date: bool }

//   if (expenses.length === 0) {
//     return <p className="text-gray-500">No normal expenses recorded.</p>;
//   }

//   // Group by date
//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleDesc = (rowId, type) => {
//     setExpandedDescs((prev) => ({
//       ...prev,
//       [rowId]: {
//         ...prev[rowId],
//         [type]: !prev[rowId]?.[type],
//       },
//     }));
//   };

//   return (
//     <div className="overflow-x-auto">
//       <table className="w-full border border-gray-300 text-sm">
//         <thead className="bg-gray-100">
//           <tr>
//             <th className="px-4 py-2 border">Date</th>
//             <th className="px-4 py-2 border">Time</th>
//             <th className="px-4 py-2 border">Place Of Work</th>
//             <th className="px-4 py-2 border">HQ/EX/OS</th>
//             <th className="px-4 py-2 border">KM's</th>
//             <th className="px-4 py-2 border">M.O.T</th>
//             <th className="px-4 py-2 border">TA</th>
//             <th className="px-4 py-2 border">DA</th>
//             <th className="px-4 py-2 border font-semibold">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const subtotal = logs.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//             const isMultiple = logs.length > 1;
//             const isExpanded = expandedDates[date];

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr className="border-t bg-white">
//                   <td className="px-4 py-2 border flex items-center gap-2">
//                     <span>{date}</span>
                    
//                   </td>
//                   {isMultiple ? (
//                     <>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">
//                         <div className="flex items-center gap-2">
//                           <span>MULTIPLE</span>
//                           <button
//                             onClick={() => toggleExpand(date)}
//                             className="px-2 py-1 bg-blue-500 text-white text-xs rounded"
//                           >
//                             {isExpanded ? "Hide" : "View"}
//                           </button>
//                         </div>
//                       </td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border font-semibold">{subtotal}</td>
//                     </>
//                   ) : (
//                     <>
//                       <td className="px-4 py-2 border">{logs[0].time}</td>
//                       <td className="px-4 py-2 border">{logs[0].location}</td>
//                       <td className="px-4 py-2 border">{logs[0].zone}</td>
//                       <td className="px-4 py-2 border">{logs[0].km}</td>
//                       <td className="px-4 py-2 border">{logs[0].transport}</td>

//                       {/* TA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].fare} {logs[0].extraTA ? `(+${logs[0].extraTA})` : ""}
//                         {logs[0].taDesc && (
//                           <div className="text-gray-600 italic mt-1">{logs[0].taDesc}</div>
//                         )}
//                       </td>

//                       {/* DA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].da} {logs[0].extraDA ? `(+${logs[0].extraDA})` : ""}
//                         {logs[0].daDesc && (
//                           <div className="text-gray-600 italic mt-1">{logs[0].daDesc}</div>
//                         )}
//                       </td>

//                       <td className="px-4 py-2 border font-semibold">{logs[0].total}</td>
//                     </>
//                   )}
//                 </tr>

//                 {/* Expanded Date Description Row */}
//                 {expandedDateDescs[date] && (() => {
//                   const descEntry = logs.find((l) => l.locationDesc);
//                   return (
//                     descEntry?.locationDesc && (
//                       <tr key={`${date}-desc`} className="bg-gray-100">
//                         <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                           {descEntry.locationDesc}
//                         </td>
//                       </tr>
//                     )
//                   );
//                 })()}

//                 {/* Expanded Rows for MULTIPLE */}
// {/* Expanded Rows for MULTIPLE */}
// {isMultiple &&
//   isExpanded &&
//   logs.map((log, i) => {
//     const rowId =
//       log._id ||
//       log.id ||
//       `${date}::${log.time || ""}::${log.location || ""}::${i}`;

//     return (
//       <React.Fragment key={rowId}>
//         <tr className="border-t bg-gray-50">
//           <td className="px-4 py-2 border" />
//           <td className="px-4 py-2 border">{log.time}</td>

//           {/* Location with Des button */}
//           <td className="px-4 py-2 border">
//             {log.location}
//             <button
//               onClick={() => toggleDesc(rowId, "location")}
//               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                 log.locationDesc ? "bg-green-500 text-white" : "bg-gray-300 text-black"
//               }`}
//             >
//               Des
//             </button>
//           </td>

//           <td className="px-4 py-2 border">{log.zone}</td>
//           <td className="px-4 py-2 border">{log.km}</td>
//           <td className="px-4 py-2 border">{log.transport}</td>

//           {/* TA with desc toggle */}
//           <td className="px-4 py-2 border">
//             {log.fare} {log.extraTA ? `+(${log.extraTA})` : ""}
//             <button
//               onClick={() => toggleDesc(rowId, "ta")}
//               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                 log.taDesc ? "bg-purple-500 text-white" : "bg-gray-300 text-black"
//               }`}
//             >
//               D
//             </button>
//           </td>

//           {/* DA with desc toggle */}
//           <td className="px-4 py-2 border">
//             {log.da} {log.extraDA ? `+(${log.extraDA})` : ""}
//             <button
//               onClick={() => toggleDesc(rowId, "da")}
//               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                 log.daDesc ? "bg-purple-500 text-white" : "bg-gray-300 text-black"
//               }`}
//             >
//               D
//             </button>
//           </td>

//           <td className="px-4 py-2 border font-semibold">{log.total}</td>
//         </tr>

//         {/* Location description row */}
//         {expandedDescs[rowId]?.location && (
//           <tr key={`${rowId}-loc`} className="bg-gray-100">
//             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//               {log.locationDesc || "No location description"}
//             </td>
//           </tr>
//         )}

//         {/* TA Description row */}
//         {expandedDescs[rowId]?.ta && (
//           <tr key={`${rowId}-ta`} className="bg-gray-100">
//             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//               {log.taDesc || "No TA description"}
//             </td>
//           </tr>
//         )}

//         {/* DA Description row */}
//         {expandedDescs[rowId]?.da && (
//           <tr key={`${rowId}-da`} className="bg-gray-100">
//             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//               {log.daDesc || "No DA description"}
//             </td>
//           </tr>
//         )}
//       </React.Fragment>
//     );
//   })}

//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserLogTable;














// import React, { useState } from "react";

// const UserLogTable = ({ expenses = [] }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDescs, setExpandedDescs] = useState({});
//   const [expandedDateDescs] = useState({});

//   if (expenses.length === 0) {
//     return <p className="text-gray-500 italic">No normal expenses recorded.</p>;
//   }

//   // Group by date
//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleDesc = (rowId, type) => {
//     setExpandedDescs((prev) => ({
//       ...prev,
//       [rowId]: {
//         ...prev[rowId],
//         [type]: !prev[rowId]?.[type],
//       },
//     }));
//   };

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 uppercase text-xs">
//           <tr>
//             <th className="px-4 py-2 border">Date</th>
//             <th className="px-4 py-2 border">Time</th>
//             <th className="px-4 py-2 border">Place Of Work</th>
//             <th className="px-4 py-2 border">HQ/EX/OS</th>
//             <th className="px-4 py-2 border">KM's</th>
//             <th className="px-4 py-2 border">M.O.T</th>
//             <th className="px-4 py-2 border">TA</th>
//             <th className="px-4 py-2 border">DA</th>
//             <th className="px-4 py-2 border font-semibold">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const subtotal = logs.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//             const isMultiple = logs.length > 1;
//             const isExpanded = expandedDates[date];

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
// <tr
//   className={`border-t font-medium ${
//     isMultiple
//       ? "bg-gray-50"
//       : logs[0].isNW
//       ? "bg-red-50 text-red-600"
//       : "bg-gray-50 text-gray-800"
//   }`}
// >
//   <td className="px-4 py-2 border flex items-center gap-2">{date}</td>
//   {isMultiple ? (
//     <>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border">
//         <div className="flex items-center gap-2">
//           <span>MULTIPLE</span>
//           <button
//             onClick={() => toggleExpand(date)}
//             className="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition"
//           >
//             {isExpanded ? "Hide" : "View"}
//           </button>
//         </div>
//       </td>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border">-</td>
//       <td className="px-4 py-2 border font-semibold text-right pr-4">{subtotal}</td>
//     </>
//   ) : (
//     <>
//       <td className="px-4 py-2 border">{logs[0].time}</td>
//       <td className="px-4 py-2 border">{logs[0].location}</td>
//       <td className="px-4 py-2 border">{logs[0].zone}</td>
//       <td className="px-4 py-2 border">{logs[0].km}</td>
//       <td className="px-4 py-2 border">{logs[0].transport}</td>

//       {/* TA */}
//       <td className="px-4 py-2 border">
//         {logs[0].fare} {logs[0].extraTA ? `(+${logs[0].extraTA})` : ""}
//         {logs[0].taDesc && (
//           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].taDesc}</div>
//         )}
//       </td>

//       {/* DA */}
//       <td className="px-4 py-2 border">
//         {logs[0].da} {logs[0].extraDA ? `(+${logs[0].extraDA})` : ""}
//         {logs[0].daDesc && (
//           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].daDesc}</div>
//         )}
//       </td>

//       <td className="px-4 py-2 border font-semibold text-right pr-4">
//         {logs[0].total}
//       </td>
//     </>
//   )}
// </tr>

//                 {/* Expanded Date Description Row */}
//                 {expandedDateDescs[date] && (() => {
//                   const descEntry = logs.find((l) => l.locationDesc);
//                   return (
//                     descEntry?.locationDesc && (
//                       <tr key={`${date}-desc`} className="bg-gray-100">
//                         <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                           {descEntry.locationDesc}
//                         </td>
//                       </tr>
//                     )
//                   );
//                 })()}

//                 {/* Expanded Rows for MULTIPLE */}
//                 {isMultiple &&
//                   isExpanded &&
//                   logs.map((log, i) => {
//                     const rowId =
//                       log._id ||
//                       log.id ||
//                       `${date}::${log.time || ""}::${log.location || ""}::${i}`;

//                     return (
//                       <React.Fragment key={rowId}>
//                         <tr
//                           className={`border-t ${
//                             log.isNW
//                               ? "bg-red-50 text-red-600 font-semibold"
//                               : "bg-white hover:bg-gray-50"
//                           }`}
//                         >
//                           <td className="px-4 py-2 border" />
//                           <td className="px-4 py-2 border">{log.time}</td>

//                           {/* Location with Des button */}
//                           <td className="px-4 py-2 border">
//                             {log.location}
//                             <button
//                               onClick={() => toggleDesc(rowId, "location")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.locationDesc
//                                   ? "bg-green-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               Des
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border">{log.zone}</td>
//                           <td className="px-4 py-2 border">{log.km}</td>
//                           <td className="px-4 py-2 border">{log.transport}</td>

//                           {/* TA */}
//                           <td className="px-4 py-2 border">
//                             {log.fare} {log.extraTA ? `+(${log.extraTA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "ta")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.taDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           {/* DA */}
//                           <td className="px-4 py-2 border">
//                             {log.da} {log.extraDA ? `+(${log.extraDA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "da")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.daDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border font-semibold text-right pr-4">
//                             {log.total}
//                           </td>
//                         </tr>

//                         {/* Location Description */}
//                         {expandedDescs[rowId]?.location && (
//                           <tr key={`${rowId}-loc`} className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.locationDesc || "No location description"}
//                             </td>
//                           </tr>
//                         )}

//                         {/* TA Description */}
//                         {expandedDescs[rowId]?.ta && (
//                           <tr key={`${rowId}-ta`} className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.taDesc || "No TA description"}
//                             </td>
//                           </tr>
//                         )}

//                         {/* DA Description */}
//                         {expandedDescs[rowId]?.da && (
//                           <tr key={`${rowId}-da`} className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.daDesc || "No DA description"}
//                             </td>
//                           </tr>
//                         )}
//                       </React.Fragment>
//                     );
//                   })}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserLogTable;












// import React, { useState } from "react";

// const UserLogTable = ({ expenses = [] }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDescs, setExpandedDescs] = useState({});
//   const [expandedDateDescs] = useState({});

//   if (expenses.length === 0) {
//     return <p className="text-gray-500 italic">No normal expenses recorded.</p>;
//   }

//   // Group by date
//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleDesc = (rowId, type) => {
//     setExpandedDescs((prev) => ({
//       ...prev,
//       [rowId]: {
//         ...prev[rowId],
//         [type]: !prev[rowId]?.[type],
//       },
//     }));
//   };

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 uppercase text-xs">
//           <tr>
//             <th className="px-4 py-2 border">Date</th>
//             <th className="px-4 py-2 border">Time</th>
//             <th className="px-4 py-2 border">Place Of Work</th>
//             <th className="px-4 py-2 border">HQ/EX/OS</th>
//             <th className="px-4 py-2 border">KM's</th>
//             <th className="px-4 py-2 border">M.O.T</th>
//             <th className="px-4 py-2 border">TA</th>
//             <th className="px-4 py-2 border">DA</th>
//             <th className="px-4 py-2 border font-semibold">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const subtotal = logs.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//             const isMultiple = logs.length > 1;
//             const isExpanded = expandedDates[date];

//             // Check if any entry is Sunday or has "Sunday" in location
//             const isSunday = logs.some((log) => log.location?.toLowerCase() === "sunday");

//             // Row color conditions
//             const summaryRowClass = isMultiple
//               ? "bg-red-100 text-red-700" // Multiple entries
//               : isSunday
//               ? "bg-red-50 text-red-600" // Sunday row
//               : "bg-gray-50 text-gray-800";

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr className={`border-t font-medium ${summaryRowClass}`}>
//                   <td className="px-4 py-2 border flex items-center gap-2">{date}</td>
//                   {isMultiple ? (
//                     <>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">
//                         <div className="flex items-center gap-2">
//                           <span>MULTIPLE</span>
//                           <button
//                             onClick={() => toggleExpand(date)}
//                             className="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition"
//                           >
//                             {isExpanded ? "Hide" : "View"}
//                           </button>
//                         </div>
//                       </td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border font-semibold text-right pr-4">{subtotal}</td>
//                     </>
//                   ) : (
//                     <>
//                       <td className="px-4 py-2 border">{logs[0].time}</td>
//                       <td className="px-4 py-2 border">{logs[0].location}</td>
//                       <td className="px-4 py-2 border">{logs[0].zone}</td>
//                       <td className="px-4 py-2 border">{logs[0].km}</td>
//                       <td className="px-4 py-2 border">{logs[0].transport}</td>

//                       {/* TA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].fare} {logs[0].extraTA ? `(+${logs[0].extraTA})` : ""}
//                         {logs[0].taDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].taDesc}</div>
//                         )}
//                       </td>

//                       {/* DA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].da} {logs[0].extraDA ? `(+${logs[0].extraDA})` : ""}
//                         {logs[0].daDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].daDesc}</div>
//                         )}
//                       </td>

//                       <td className="px-4 py-2 border font-semibold text-right pr-4">
//                         {logs[0].total}
//                       </td>
//                     </>
//                   )}
//                 </tr>

//                 {/* Expanded Rows for MULTIPLE */}
//                 {isMultiple &&
//                   isExpanded &&
//                   logs.map((log, i) => {
//                     const rowId =
//                       log._id ||
//                       log.id ||
//                       `${date}::${log.time || ""}::${log.location || ""}::${i}`;

//                     const rowClass = log.isNW
//                       ? "bg-red-50 text-red-600 font-semibold"
//                       : "bg-white hover:bg-gray-50";

//                     return (
//                       <React.Fragment key={rowId}>
//                         <tr className={`border-t ${rowClass}`}>
//                           <td className="px-4 py-2 border" />
//                           <td className="px-4 py-2 border">{log.time}</td>

//                           {/* Location with Des button */}
//                           <td className="px-4 py-2 border">
//                             {log.location}
//                             <button
//                               onClick={() => toggleDesc(rowId, "location")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.locationDesc
//                                   ? "bg-green-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               Des
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border">{log.zone}</td>
//                           <td className="px-4 py-2 border">{log.km}</td>
//                           <td className="px-4 py-2 border">{log.transport}</td>

//                           {/* TA */}
//                           <td className="px-4 py-2 border">
//                             {log.fare} {log.extraTA ? `+(${log.extraTA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "ta")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.taDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           {/* DA */}
//                           <td className="px-4 py-2 border">
//                             {log.da} {log.extraDA ? `+(${log.extraDA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "da")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.daDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border font-semibold text-right pr-4">
//                             {log.total}
//                           </td>
//                         </tr>

//                         {/* Expanded Descriptions */}
//                         {expandedDescs[rowId]?.location && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.locationDesc || "No location description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.ta && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.taDesc || "No TA description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.da && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.daDesc || "No DA description"}
//                             </td>
//                           </tr>
//                         )}
//                       </React.Fragment>
//                     );
//                   })}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserLogTable;







// import React, { useState } from "react";

// const UserLogTable = ({ expenses = [] }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDescs, setExpandedDescs] = useState({});

//   if (expenses.length === 0) {
//     return <p className="text-gray-500 italic">No normal expenses recorded.</p>;
//   }

//   // Group by date
//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleDesc = (rowId, type) => {
//     setExpandedDescs((prev) => ({
//       ...prev,
//       [rowId]: {
//         ...prev[rowId],
//         [type]: !prev[rowId]?.[type],
//       },
//     }));
//   };

//   return (
//     <div className="overflow-x-auto rounded-lg shadow">
//       <table className="w-full border border-gray-300 text-sm bg-white rounded-lg overflow-hidden">
//         <thead className="bg-gray-100 text-gray-700 uppercase text-xs">
//           <tr>
//             <th className="px-4 py-2 border">Date</th>
//             <th className="px-4 py-2 border">Time</th>
//             <th className="px-4 py-2 border">Place Of Work</th>
//             <th className="px-4 py-2 border">HQ/EX/OS</th>
//             <th className="px-4 py-2 border">KM's</th>
//             <th className="px-4 py-2 border">M.O.T</th>
//             <th className="px-4 py-2 border">TA</th>
//             <th className="px-4 py-2 border">DA</th>
//             <th className="px-4 py-2 border font-semibold">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const subtotal = logs.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//             const isMultiple = logs.length > 1;
//             const isExpanded = expandedDates[date];

//             const isSunday = logs.some((log) => log.location?.toLowerCase() === "sunday");
//             const hasNW = logs.some((log) => log.isNW); // ✅ check for NW in group

//             // Summary row color (only red if any entry has isNW true)
//             const summaryRowClass = hasNW
//               ? "bg-red-100 text-red-700"
//               : isSunday
//               ? "bg-red-50 text-red-600"
//               : "bg-gray-50 text-gray-800";

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr className={`border-t font-medium ${summaryRowClass}`}>
//                   <td className="px-4 py-2 border flex items-center gap-2">{date}</td>
//                   {isMultiple ? (
//                     <>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">
//                         <div className="flex items-center gap-2">
//                           <span>MULTIPLE</span>
//                           <button
//                             onClick={() => toggleExpand(date)}
//                             className="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition"
//                           >
//                             {isExpanded ? "Hide" : "View"}
//                           </button>
//                         </div>
//                       </td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border font-semibold text-right pr-4">{subtotal}</td>
//                     </>
//                   ) : (
//                     <>
//                       <td className="px-4 py-2 border">{logs[0].time}</td>
//                       <td className="px-4 py-2 border">{logs[0].location}</td>
//                       <td className="px-4 py-2 border">{logs[0].zone}</td>
//                       <td className="px-4 py-2 border">{logs[0].km}</td>
//                       <td className="px-4 py-2 border">{logs[0].transport}</td>

//                       {/* TA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].fare} {logs[0].extraTA ? `(+${logs[0].extraTA})` : ""}
//                         {logs[0].taDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].taDesc}</div>
//                         )}
//                       </td>

//                       {/* DA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].da} {logs[0].extraDA ? `(+${logs[0].extraDA})` : ""}
//                         {logs[0].daDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].daDesc}</div>
//                         )}
//                       </td>

//                       <td className="px-4 py-2 border font-semibold text-right pr-4">
//                         {logs[0].total}
//                       </td>
//                     </>
//                   )}
//                 </tr>

//                 {/* Expanded Rows for MULTIPLE */}
//                 {isMultiple &&
//                   isExpanded &&
//                   logs.map((log, i) => {
//                     const rowId =
//                       log._id ||
//                       log.id ||
//                       `${date}::${log.time || ""}::${log.location || ""}::${i}`;

//                     // ✅ Only this row red if log.isNW is true
//                     const rowClass = log.isNW
//                       ? "bg-red-200-red-800 font-semibold"
//                       : "bg-white hover:bg-gray-50";

//                     return (
//                       <React.Fragment key={rowId}>
//                         <tr className={`border-t ${rowClass}`}>
//                           <td className="px-4 py-2 border" />
//                           <td className="px-4 py-2 border">{log.time}</td>

//                           {/* Location with Des button */}
//                           <td className="px-4 py-2 border">
//                             {log.location}
//                             <button
//                               onClick={() => toggleDesc(rowId, "location")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.locationDesc
//                                   ? "bg-green-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               Des
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border">{log.zone}</td>
//                           <td className="px-4 py-2 border">{log.km}</td>
//                           <td className="px-4 py-2 border">{log.transport}</td>

//                           {/* TA */}
//                           <td className="px-4 py-2 border">
//                             {log.fare} {log.extraTA ? `+(${log.extraTA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "ta")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.taDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           {/* DA */}
//                           <td className="px-4 py-2 border">
//                             {log.da} {log.extraDA ? `+(${log.extraDA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "da")}
//                               className={`ml-2 px-1 py-0.5 text-xs rounded ${
//                                 log.daDesc
//                                   ? "bg-purple-500 text-white"
//                                   : "bg-gray-300 text-black"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border font-semibold text-right pr-4">
//                             {log.total}
//                           </td>
//                         </tr>

//                         {/* Expanded Descriptions */}
//                         {expandedDescs[rowId]?.location && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.locationDesc || "No location description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.ta && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.taDesc || "No TA description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.da && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.daDesc || "No DA description"}
//                             </td>
//                           </tr>
//                         )}
//                       </React.Fragment>
//                     );
//                   })}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserLogTable;






// import React, { useState } from "react";

// const UserLogTable = ({ expenses = [] }) => {
//   const [expandedDates, setExpandedDates] = useState({});
//   const [expandedDescs, setExpandedDescs] = useState({});

//   if (expenses.length === 0) {
//     return <p className="text-gray-500 italic">No normal expenses recorded.</p>;
//   }

//   // Group by date
//   const grouped = expenses.reduce((acc, exp) => {
//     if (!acc[exp.date]) acc[exp.date] = [];
//     acc[exp.date].push(exp);
//     return acc;
//   }, {});

//   const toggleExpand = (date) => {
//     setExpandedDates((prev) => ({
//       ...prev,
//       [date]: !prev[date],
//     }));
//   };

//   const toggleDesc = (rowId, type) => {
//     setExpandedDescs((prev) => ({
//       ...prev,
//       [rowId]: {
//         ...prev[rowId],
//         [type]: !prev[rowId]?.[type],
//       },
//     }));
//   };

//   return (
//     <div className="overflow-x-auto rounded-lg shadow border border-gray-300">
//       <table className="w-full text-base bg-white rounded-lg overflow-hidden">
//         <thead className="bg-blue-50 text-blue-700 uppercase font-semibold">
//           <tr>
//             <th className="px-4 py-2 border">Date</th>
//             <th className="px-4 py-2 border">Time</th>
//             <th className="px-4 py-2 border">Place Of Work</th>
//             <th className="px-4 py-2 border">HQ/EX/OS</th>
//             <th className="px-4 py-2 border">KM's</th>
//             <th className="px-4 py-2 border">M.O.T</th>
//             <th className="px-4 py-2 border">TA</th>
//             <th className="px-4 py-2 border">DA</th>
//             <th className="px-4 py-2 border font-semibold">Total</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(grouped).map(([date, logs]) => {
//             const subtotal = logs.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//             const isMultiple = logs.length > 1;
//             const isExpanded = expandedDates[date];

//             const isSunday = logs.some((log) => log.location?.toLowerCase() === "sunday");
//             const hasNW = logs.some((log) => log.isNW);

//             // Summary row color
//             const summaryRowClass = hasNW
//               ? "bg-red-50 text-red-700"
//               : isSunday
//               ? "bg-red-50 text-red-700"
//               : "bg-gray-50 text-gray-800";

//             return (
//               <React.Fragment key={date}>
//                 {/* Summary Row */}
//                 <tr className={`border-t font-medium ${summaryRowClass}`}>
//                   <td className="px-4 py-2 border flex items-center gap-2">{date}</td>
//                   {isMultiple ? (
//                     <>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">
//                         <div className="flex items-center gap-2">
//                           <span>MULTIPLE</span>
//                           <button
//                             onClick={() => toggleExpand(date)}
//                             className="px-2 py-1 text-xs rounded-md bg-blue-600 text-white hover:bg-blue-700 transition"
//                           >
//                             {isExpanded ? "Hide" : "Show"}
//                           </button>
//                         </div>
//                       </td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border">-</td>
//                       <td className="px-4 py-2 border font-semibold text-right pr-4">{subtotal}</td>
//                     </>
//                   ) : (
//                     <>
//                       <td className="px-4 py-2 border">{logs[0].time}</td>
//                       <td className="px-4 py-2 border">{logs[0].location}</td>
//                       <td className="px-4 py-2 border">{logs[0].zone}</td>
//                       <td className="px-4 py-2 border">{logs[0].km}</td>
//                       <td className="px-4 py-2 border">{logs[0].transport}</td>

//                       {/* TA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].fare} {logs[0].extraTA ? `(+${logs[0].extraTA})` : ""}
//                         {logs[0].taDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].taDesc}</div>
//                         )}
//                       </td>

//                       {/* DA */}
//                       <td className="px-4 py-2 border">
//                         {logs[0].da} {logs[0].extraDA ? `(+${logs[0].extraDA})` : ""}
//                         {logs[0].daDesc && (
//                           <div className="text-gray-600 italic mt-1 text-xs">{logs[0].daDesc}</div>
//                         )}
//                       </td>

//                       <td className="px-4 py-2 border font-semibold text-right pr-4">
//                         {logs[0].total}
//                       </td>
//                     </>
//                   )}
//                 </tr>

//                 {/* Expanded Rows for MULTIPLE */}
//                 {isMultiple &&
//                   isExpanded &&
//                   logs.map((log, i) => {
//                     const rowId =
//                       log._id ||
//                       log.id ||
//                       `${date}::${log.time || ""}::${log.location || ""}::${i}`;

//                     const rowClass = log.isNW
//                       ? "bg-red-50 text-red-700 font-semibold"
//                       : "bg-white hover:bg-gray-50";

//                     return (
//                       <React.Fragment key={rowId}>
//                         <tr className={`border-t ${rowClass}`}>
//                           <td className="px-4 py-2 border" />
//                           <td className="px-4 py-2 border">{log.time}</td>

//                           {/* Location with Desc button */}
//                           <td className="px-4 py-2 border">
//                             {log.location}
//                             <button
//                               onClick={() => toggleDesc(rowId, "location")}
//                               className={`ml-2 px-2 py-1 text-xs rounded-md ${
//                                 log.locationDesc
//                                   ? "bg-green-500 text-white hover:bg-green-600"
//                                   : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//                               }`}
//                             >
//                               Des
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border">{log.zone}</td>
//                           <td className="px-4 py-2 border">{log.km}</td>
//                           <td className="px-4 py-2 border">{log.transport}</td>

//                           {/* TA */}
//                           <td className="px-4 py-2 border">
//                             {log.fare} {log.extraTA ? `+(${log.extraTA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "ta")}
//                               className={`ml-2 px-2 py-1 text-xs rounded-md ${
//                                 log.taDesc
//                                   ? "bg-green-500 text-white hover:bg-green-600"
//                                   : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           {/* DA */}
//                           <td className="px-4 py-2 border">
//                             {log.da} {log.extraDA ? `+(${log.extraDA})` : ""}
//                             <button
//                               onClick={() => toggleDesc(rowId, "da")}
//                               className={`ml-2 px-2 py-1 text-xs rounded-md ${
//                                 log.daDesc
//                                   ? "bg-green-500 text-white hover:bg-green-600"
//                                   : "bg-blue-100 text-blue-600 hover:bg-blue-200"
//                               }`}
//                             >
//                               D
//                             </button>
//                           </td>

//                           <td className="px-4 py-2 border font-semibold text-right pr-4">
//                             {log.total}
//                           </td>
//                         </tr>

//                         {/* Expanded Descriptions */}
//                         {expandedDescs[rowId]?.location && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.locationDesc || "No location description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.ta && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.taDesc || "No TA description"}
//                             </td>
//                           </tr>
//                         )}
//                         {expandedDescs[rowId]?.da && (
//                           <tr className="bg-gray-50">
//                             <td colSpan={9} className="px-4 py-2 border italic text-gray-600">
//                               {log.daDesc || "No DA description"}
//                             </td>
//                           </tr>
//                         )}
//                       </React.Fragment>
//                     );
//                   })}
//               </React.Fragment>
//             );
//           })}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserLogTable;









// // src/components/UserOtherExpensesTable.js

// import React from "react";

// const UserOtherExpensesTable = ({ otherExpenses = [] }) => {
//   // Group expenses by date for a cleaner layout
//   const groupedByDate = otherExpenses.reduce((acc, item) => {
//     if (!acc[item.date]) {
//       acc[item.date] = [];
//     }
//     acc[item.date].push(item);
//     return acc;
//   }, {});

//   let serialNumber = 1;

//   return (
//     <div className="overflow-x-auto">
//       <table className="w-full border-collapse text-sm bg-white">
//         <thead className="bg-gray-100 text-gray-600 uppercase font-semibold">
//           <tr>
//             <th className="border p-3 w-12 text-center">Sl.No</th>
//             <th className="border p-3 w-32 text-center">Date</th>
//             <th className="border p-3 w-auto text-left">Description</th>
//             <th className="border p-3 w-48 text-center">Amount (₹)</th>
//           </tr>
//         </thead>
//         <tbody>
//           {Object.entries(groupedByDate).map(([date, entries]) =>
//             entries.map((entry, index) => (
//               <tr key={entry._id} className="hover:bg-gray-50 align-top">
//                 <td className="border p-2 text-center">{serialNumber++}</td>
                
//                 {/* Display date cell only for the first entry of that day */}
//                 {index === 0 && (
//                   <td
//                     rowSpan={entries.length}
//                     className="border p-2 text-center font-semibold align-middle"
//                   >
//                     {date}
//                   </td>
//                 )}

//                 <td className="border p-2">
//                   <p>{entry.description}</p>
//                   {/* Show extra description if it exists */}
//                   {entry.extradescription && (
//                     <p className="text-xs text-orange-600 italic mt-1">
//                       Note: {entry.extradescription}
//                     </p>
//                   )}
//                 </td>

//                 <td className="border p-2 text-right">
//                   <span>{entry.amount.toLocaleString("en-IN")}</span>
//                   {/* Show extra amount if it's greater than 0 */}
//                   {entry.extraamount > 0 && (
//                     <span className="block font-semibold text-blue-600">
//                       + {entry.extraamount.toLocaleString("en-IN")} (Extra)
//                     </span>
//                   )}
//                    {/* Display the total for the row */}
//                   <span className="block font-bold border-t mt-1 pt-1">
//                      {entry.total.toLocaleString("en-IN")}
//                   </span>
//                 </td>
//               </tr>
//             ))
//           )}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default UserOtherExpensesTable;













// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/users`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUsers(res.data);
//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch users");
//       }
//     };

//     fetchUsers();
//   }, []);

//   return (
//     <div className="min-h-screen bg-gray-100">
//       {/* ✅ Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-2xl font-bold">Admin Dashboard</h1>
//         <div></div>
//       </div>

//       {/* ✅ Main Content */}
//       <div className="p-6">
//         <div className="flex justify-end mb-6">
//           <button
//             onClick={() => navigate("/set-info")}
//             className="bg-[#2C3E65] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//           >
//             + Add User
//           </button>
//         </div>

//         <h3 className="text-xl font-bold mb-4">USER LIST</h3>
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           {users.map((user) => (
//             <div
//               key={user._id}
//               onClick={() => navigate(`/admin/statement/${user.username}`)}
//               className="bg-white shadow-md rounded-lg p-4 hover:shadow-lg hover:bg-gray-50 transition cursor-pointer"
//             >
//               <h4 className="text-lg font-semibold text-[#2C3E65]">
//                 {user.username}
//               </h4>
//               <p className="text-sm text-gray-500 mt-1">(HQ: {user.hq})</p>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default AdminDashboard;



// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/users`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUsers(res.data);
//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch users");
//       }
//     };

//     fetchUsers();
//   }, []);

//   return (
//     <div className="min-h-screen bg-gray-100">
//       {/* ✅ Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-2xl font-bold">Admin Dashboard</h1>
//         <div></div>
//       </div>

//       {/* ✅ Main Content */}
//       <div className="p-6">
//         <div className="flex justify-end mb-6">
//           <button
//             onClick={() => navigate("/set-info")}
//             className="bg-[#2C3E65] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//           >
//             + Add User
//           </button>
//         </div>

//         {/* ✅ Styled Section Header */}
//         <h3 className="text-2xl font-semibold text-[#2C3E65] mb-6 border-b-2 border-[#2C3E65] inline-block pb-1">
//           User List
//         </h3>

//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           {users.map((user) => (
//             <div
//               key={user._id}
//               onClick={() => navigate(`/admin/statement/${user.username}`)}
//               className="bg-white shadow-md rounded-lg p-4 hover:shadow-lg hover:bg-gray-50 transition cursor-pointer"
//             >
//               <h4 className="text-lg font-semibold text-[#2C3E65]">
//                 {user.username}
//               </h4>
//               <p className="text-sm text-gray-500 mt-1">(HQ: {user.hq})</p>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default AdminDashboard;





// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/users`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUsers(res.data);
//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch users");
//       }
//     };

//     fetchUsers();
//   }, []);

//   return (
//     <div className="min-h-screen bg-gray-100">
//       {/* ✅ Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-2xl font-bold">Admin Dashboard</h1>
//         <div></div>
//       </div>

//       {/* ✅ Main Content */}
//       <div className="p-6">
//         <div className="flex justify-end mb-6">
//           <button
//             onClick={() => navigate("/set-info")}
//             className="bg-[#2C3E65] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//           >
//             + Add User
//           </button>
//         </div>

//         {/* ✅ Card Wrapper for User List */}
//         <div className="bg-white rounded-lg shadow p-6">
//           <h3 className="text-xl font-bold text-[#2C3E65] mb-4 border-b pb-2">
//             User List
//           </h3>

//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//             {users.map((user) => (
//               <div
//                 key={user._id}
//                 onClick={() => navigate(`/admin/statement/${user.username}`)}
//                 className="bg-gray-50 shadow-sm rounded-lg p-4 hover:shadow-md hover:bg-gray-100 transition cursor-pointer"
//               >
//                 <h4 className="text-lg font-semibold text-[#2C3E65]">
//                   {user.username}
//                 </h4>
//                 <p className="text-sm text-gray-500 mt-1">(HQ: {user.hq})</p>
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default AdminDashboard;







// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/users`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUsers(res.data);
//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch users");
//       }
//     };

//     fetchUsers();
//   }, []);

//   return (
//     <div className="min-h-screen bg-gray-100">
//       {/* ✅ Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 transition"
//         >
//           ← Back
//         </button>
//         <h1 className="text-2xl font-bold">Admin Dashboard</h1>
//         <div></div>
//       </div>

//       {/* ✅ Main Content */}
//       <div className="p-6">
//         <div className="flex justify-end mb-6">
//           <button
//             onClick={() => navigate("/set-info")}
//             className="bg-[#2C3E65] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//           >
//             + Add User
//           </button>
//         </div>

//         {/* ✅ Card Wrapper for User List */}
//         <div className="bg-white rounded-lg shadow p-6">
//           <h3 className="text-xl font-bold text-[#2C3E65] mb-4 border-b pb-2">
//             User List
//           </h3>

//           {/* ✅ Always one column */}
//           <div className="grid grid-cols-1 gap-4">
//             {users.map((user, index) => (
//               <div
//                 key={user._id}
//                 onClick={() => navigate(`/admin/statement/${user.username}`)}
//                 className="bg-gray-50 shadow-sm rounded-lg p-4 hover:shadow-md hover:bg-gray-100 transition cursor-pointer flex items-center gap-4"
//               >
//                 {/* Serial Number */}
//                 <span className="text-[#2C3E65] font-bold">{index + 1}.</span>

//                 {/* User Info */}
//                 <div>
//                   <h4 className="text-lg font-semibold text-[#2C3E65]">
//                     {user.username}
//                   </h4>
//                   <p className="text-sm text-gray-500 mt-1">(HQ: {user.hq})</p>
//                 </div>
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default AdminDashboard;











// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout"; // ✅ Import your Layout component

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUsers = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/users`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUsers(res.data);
//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch users");
//       }
//     };

//     fetchUsers();
//   }, []);

//   return (
//     <Layout title="Admin Dashboard" backTo="/">
//       {/* ✅ Add User Button */}
//       <div className="flex justify-end mb-6">
//         <button
//           onClick={() => navigate("/set-info")}
//           className="bg-[#1f3b64] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//         >
//           + Add User
//         </button>
//       </div>

//       {/* ✅ User List Card */}
//       <div className="bg-white rounded-lg shadow p-6">
//         <h3 className="text-xl font-bold text-[#1f3b64] mb-4 border-b pb-2">
//           User List
//         </h3>

//         <div className="grid grid-cols-1 gap-4">
//           {users.map((user, index) => (
//             <div
//               key={user._id}
//               onClick={() => navigate(`/admin/statement/${user.username}`)}
//               className="bg-gray-100 shadow-sm rounded-lg p-4 hover:shadow-md hover:bg-gray-200 transition cursor-pointer flex items-center gap-4"
//             >
//               {/* Serial Number */}
//               <span className="text-[#1f3b64] font-bold">{index + 1}.</span>

//               {/* User Info */}
//               <div>
//                 <h4 className="text-lg font-semibold text-[#1f3b64]">
//                   {user.username}
//                 </h4>
//                 <p className="text-sm text-gray-500 mt-1">(HQ: {user.hq})</p>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </Layout>
//   );
// }

// export default AdminDashboard;









// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   // ✅ State to hold the total expenses for each user { username: total }
//   const [expenseTotals, setExpenseTotals] = useState({});
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchAllData = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const headers = { headers: { Authorization: `Bearer ${token}` } };

//         // 1. Fetch the primary list of users
//         const usersRes = await axios.get(`${API}/api/admin/users`, headers);
//         setUsers(usersRes.data);

//         // 2. For each user, create promises to fetch their expenses
//         const expensePromises = usersRes.data.map((user) => {
//           const normalExpensesPromise = axios.get(
//             `${API}/api/admin/normal-expenses/${user.username}`,
//             headers
//           );
//           const otherExpensesPromise = axios.get(
//             `${API}/api/admin/other-expenses/${user.username}`,
//             headers
//           );
//           // Return a promise that resolves when both expense types are fetched
//           return Promise.all([normalExpensesPromise, otherExpensesPromise]);
//         });

//         // 3. Wait for all expense requests for all users to complete
//         const allUsersExpenses = await Promise.all(expensePromises);

//         // 4. Calculate and set the totals
//         const totals = {};
//         usersRes.data.forEach((user, index) => {
//           const [normalExpensesRes, otherExpensesRes] = allUsersExpenses[index];
          
//           const normalTotal = normalExpensesRes.data.reduce(
//             (sum, exp) => sum + exp.total,
//             0
//           );
//           const otherTotal = otherExpensesRes.data.reduce(
//             (sum, exp) => sum + exp.total,
//             0
//           );
          
//           totals[user.username] = normalTotal + otherTotal;
//         });

//         setExpenseTotals(totals);

//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch user data or expenses");
//       }
//     };

//     fetchAllData();
//   }, []);

//   return (
//     <Layout title="Admin Dashboard" backTo="/">
//       {/* Add User Button */}
//       <div className="flex justify-end mb-6">
//         <button
//           onClick={() => navigate("/set-info")}
//           className="bg-[#1f3b64] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//         >
//           + Add User
//         </button>
//       </div>

//       {/* User List Card */}
//       <div className="bg-white rounded-lg shadow p-6">
//         <h3 className="text-xl font-bold text-[#1f3b64] mb-4 border-b pb-2">
//           User List
//         </h3>

//         <div className="grid grid-cols-1 gap-4">
//           {users.map((user, index) => (
//             // ✅ The container is now a flexbox for alignment, not a link
//             <div
//               key={user._id}
//               className="bg-gray-100 shadow-sm rounded-lg p-4 transition flex justify-between items-center"
//             >
//               {/* Left Side: User Info */}
//               <div className="flex items-center gap-4">
//                 <span className="text-[#1f3b64] font-bold">{index + 1}.</span>
//                 <div>
//                   <h4 className="text-lg font-semibold text-[#1f3b64]">
//                     {user.username}
//                   </h4>
//                   <p className="text-sm text-gray-500 mt-1">
//                     (HQ: {user.hq || "N/A"})
//                   </p>
//                 </div>
//               </div>

//               {/* Right Side: Total and Actions */}
//               <div className="flex items-center gap-6">
//                 {/* Total Expense */}
//                 <div className="text-right">
//                   <p className="text-xs text-gray-500 uppercase font-semibold">Total Exp</p>
//                   <p className="text-lg font-bold text-green-600">
//                     {expenseTotals[user.username] !== undefined
//                       ? `₹${expenseTotals[user.username].toLocaleString("en-IN")}`
//                       : "..."}
//                   </p>
//                 </div>
                
//                 {/* Action Buttons */}
//                 <div className="flex flex-col sm:flex-row gap-2">
//                   <button
//                     onClick={() => navigate(`/edit-info/${user.username}`)}
//                     className="bg-blue-600 text-white px-4 py-1 rounded-md shadow-sm hover:bg-blue-700 text-sm"
//                   >
//                     Edit
//                   </button>
//                   <button
//                     onClick={() => navigate(`/admin/statement/${user.username}`)}
//                     className="bg-gray-700 text-white px-4 py-1 rounded-md shadow-sm hover:bg-gray-800 text-sm"
//                   >
//                     Show Exp
//                   </button>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </Layout>
//   );
// }

// export default AdminDashboard;













// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// // A simple Layout component to prevent compilation errors.
// const Layout = ({ title, backTo, children }) => {
//   const navigate = useNavigate();
//   return (
//     <div className="p-4 bg-gray-100 min-h-screen">
//       <header className="mb-6 flex items-center">
//         {backTo && (
//           <button onClick={() => navigate(backTo)} className="text-blue-600 hover:underline mr-4">
//             &larr; Back
//           </button>
//         )}
//         <h1 className="text-3xl font-bold text-gray-800 flex-grow text-center">{title}</h1>
//       </header>
//       <main className="max-w-7xl mx-auto">{children}</main>
//     </div>
//   );
// };

// const API = process.env.REACT_APP_BACKEND_URL;

// function AdminDashboard() {
//   const [users, setUsers] = useState([]);
//   const [expenseTotals, setExpenseTotals] = useState({});
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchAllData = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         if (!token) {
//           navigate("/"); // Redirect if no token
//           return;
//         }

//         // --- NEW LOGIC: Identify admin and filter users ---
//         const payload = JSON.parse(atob(token.split(".")[1]));
//         const adminUsername = payload.username; // Get current admin's username from token

//         const headers = { headers: { Authorization: `Bearer ${token}` } };

//         // 1. Fetch the primary list of ALL users
//         const usersRes = await axios.get(`${API}/api/admin/users`, headers);

//         // 2. Filter the users on the frontend
//         const filteredUsers = usersRes.data.filter(
//           (user) => user.createdBy === adminUsername
//         );
//         setUsers(filteredUsers);
//         // --- END OF NEW LOGIC ---


//         // 3. For each FILTERED user, create promises to fetch their expenses
//         // (No changes to the logic below, just the input list)
//         if (filteredUsers.length === 0) return; // Optimization: stop if no users to process

//         const expensePromises = filteredUsers.map((user) => {
//           const normalExpensesPromise = axios.get(
//             `${API}/api/admin/normal-expenses/${user.username}`,
//             headers
//           );
//           const otherExpensesPromise = axios.get(
//             `${API}/api/admin/other-expenses/${user.username}`,
//             headers
//           );
//           return Promise.all([normalExpensesPromise, otherExpensesPromise]);
//         });

//         const allUsersExpenses = await Promise.all(expensePromises);

//         const totals = {};
//         filteredUsers.forEach((user, index) => {
//           const [normalExpensesRes, otherExpensesRes] = allUsersExpenses[index];
          
//           const normalTotal = normalExpensesRes.data.reduce(
//             (sum, exp) => sum + exp.total,
//             0
//           );
//           const otherTotal = otherExpensesRes.data.reduce(
//             (sum, exp) => sum + exp.total,
//             0
//           );
          
//           totals[user.username] = normalTotal + otherTotal;
//         });

//         setExpenseTotals(totals);

//       } catch (err) {
//         console.error(err);
//         alert("Failed to fetch user data or expenses");
//       }
//     };

//     fetchAllData();
//   }, [navigate]); // Added navigate to dependency array

//   return (
//     <Layout title="Admin Dashboard" backTo="/">
//       <div className="flex justify-end mb-6">
//         <button
//           onClick={() => navigate("/set-info")}
//           className="bg-[#1f3b64] text-white px-6 py-2 rounded-lg shadow hover:bg-[#3E518E] transition"
//         >
//           + Add User
//         </button>
//       </div>

//       <div className="bg-white rounded-lg shadow p-6">
//         <h3 className="text-xl font-bold text-[#1f3b64] mb-4 border-b pb-2">
//           User List
//         </h3>

//         <div className="grid grid-cols-1 gap-4">
//           {users.length > 0 ? (
//              users.map((user, index) => (
//               <div
//                 key={user._id}
//                 className="bg-gray-100 shadow-sm rounded-lg p-4 transition flex justify-between items-center"
//               >
//                 <div className="flex items-center gap-4">
//                   <span className="text-[#1f3b64] font-bold">{index + 1}.</span>
//                   <div>
//                     <h4 className="text-lg font-semibold text-[#1f3b64]">
//                       {user.username}
//                     </h4>
//                     <p className="text-sm text-gray-500 mt-1">
//                       (HQ: {user.hq || "N/A"})
//                     </p>
//                   </div>
//                 </div>

//                 <div className="flex items-center gap-6">
//                   <div className="text-right">
//                     <p className="text-xs text-gray-500 uppercase font-semibold">Total Exp</p>
//                     <p className="text-lg font-bold text-green-600">
//                       {expenseTotals[user.username] !== undefined
//                         ? `₹${expenseTotals[user.username].toLocaleString("en-IN")}`
//                         : "..."}
//                     </p>
//                   </div>
                  
//                   <div className="flex flex-col sm:flex-row gap-2">
//                     <button
//                       onClick={() => navigate(`/edit-info/${user.username}`)}
//                       className="bg-blue-600 text-white px-4 py-1 rounded-md shadow-sm hover:bg-blue-700 text-sm"
//                     >
//                       Edit
//                     </button>
//                     <button
//                       onClick={() => navigate(`/admin/statement/${user.username}`)}
//                       className="bg-gray-700 text-white px-4 py-1 rounded-md shadow-sm hover:bg-gray-800 text-sm"
//                     >
//                       Show Exp
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             ))
//           ) : (
//             <p className="text-center text-gray-500 py-4">No users created by you have been found.</p>
//           )}
//         </div>
//       </div>
//     </Layout>
//   );
// }

// export default AdminDashboard;






// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const [hq, setHQ] = useState("");
//     const navigate = useNavigate();   // ⬅️ initialize navigate

//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   const [selectedRowId, setSelectedRowId] = useState(null);
//   const [selectedOtherExpenseId, setSelectedOtherExpenseId] = useState(null);
  

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const resUser = await axios.get(
//         `${API}/api/admin/user/${username}`
//       );
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // Row selection
//   const handleRowSelect = (id) => setSelectedRowId(id);
//   const handleOtherRowSelect = (id) => setSelectedOtherExpenseId(id);

//   // Save inline TA
//   const doSaveTA = async (expenseId, newValue) => {
//     try {
//       await axios.put(
//         `${API}/api/admin/expense/${username}/${expenseId}`,
//         { extraTA: newValue }
//       );
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraTA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   // Save inline DA
//   const doSaveDA = async (expenseId, newValue) => {
//     try {
//       await axios.put(
//         `${API}/api/admin/expense/${username}/${expenseId}`,
//         { extraDA: newValue }
//       );
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraDA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//   try {
//     await axios.put(
//       `${API}/api/admin/expense/${username}/${expenseId}`,
//       { taDesc: newValue }
//     );
//     setExpenses((prev) =>
//       prev.map((exp) =>
//         exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//       )
//     );
//   } catch (error) {
//     console.error("Error updating TA Desc:", error);
//   }
// };

// // --- Save DA Description ---
// const doSaveDADesc = async (expenseId, newValue) => {
//   try {
//     await axios.put(
//       `${API}/api/admin/expense/${username}/${expenseId}`,
//       { daDesc: newValue }
//     );
//     setExpenses((prev) =>
//       prev.map((exp) =>
//         exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//       )
//     );
//   } catch (error) {
//     console.error("Error updating DA Desc:", error);
//   }
// };

//   // Delete expenses
//   const handleDeleteExpense = async () => {
//     if (!selectedRowId && !selectedOtherExpenseId) return;
//     if (!window.confirm("Are you sure you want to delete this expense?")) return;

//     try {
//       if (selectedRowId) {
//         await axios.delete(
//           `${API}/api/admin/expense/${username}/${selectedRowId}`
//         );
//       } else if (selectedOtherExpenseId) {
//         if (selectedOtherExpenseId.startsWith("group:")) {
//           alert("Please expand and select an individual row to delete.");
//           return;
//         }
//         await axios.delete(
//           `${API}/api/admin/other-expense/${selectedOtherExpenseId}`
//         );
//       }

//       fetchData();
//       setSelectedRowId(null);
//       setSelectedOtherExpenseId(null);
//     } catch (err) {
//       console.error("Delete failed:", err);
//     }
//   };

//   // Totals
//   const subtotal1 = expenses.reduce(
//     (sum, e) =>
//       sum + (e.fare || 0) + (e.da || 0) + (e.extraTA || 0) + (e.extraDA || 0),
//     0
//   );
  
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <div className="p-4 space-y-4">
//       {/* Header */}
//       <div className="flex items-center justify-between">
//         <div>
//           <button
//       onClick={() => navigate("/admin/dashboard")}
//       className="bg-gray-500 text-white px-4 py-2 rounded"
//     >
//       Back
//     </button>
//           <p>
//             <strong>Username:</strong> {username}
//           </p>
//           <p>
//             <strong>HQ:</strong> {hq}
//           </p>
//           <p>
//             <strong>Month:</strong> {currentMonth}
//           </p>
//          <button
//           onClick={() => navigate(`/edit-info/${username}`)}
//           className="bg-blue-500 text-white px-4 py-2 rounded"
//         >
//           Edit Info
//         </button>
//           <p>
//             <strong>Grand Total:</strong> {grandTotal}
//           </p>
//         </div>
//         <button
//           onClick={handleDeleteExpense}
//           className="bg-red-500 text-white px-4 py-2 rounded"
//         >
//           Delete Expense
//         </button>
//       </div>

//       {/* Normal Expenses */}
//       <div>
//         <h2 className="font-bold text-lg mb-2">Normal Expenses</h2>
//         <LogTable
//           expenses={expenses}
//           selectedRowId={selectedRowId}
//           onRowSelect={handleRowSelect}
//           onSaveTA={doSaveTA}
//           onSaveDA={doSaveDA}
//           onEditTADesc={doSaveTADesc}
//   onEditDADesc={doSaveDADesc}
//   onEditLocationDesc={(id) => console.log("Edit Location Desc for", id)}
//         />
//         <p className="mt-2 font-semibold">Subtotal1: {subtotal1}</p>
//       </div>

//       {/* Other Expenses */}
// <div>
//   <h2 className="font-bold text-lg mb-2">Other Expenses</h2>
//   <table className="w-full border border-gray-300 text-sm table-fixed">
//     <thead className="bg-gray-100">
//       <tr>
//         <th className="border p-2 w-12">Sl.No</th>
//         <th className="border p-2 w-32">Date</th>
//         <th className="border p-2 w-24">Amount</th>
//         <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//           Description
//         </th>
//         <th className="border p-2 w-24">Total</th>
//         <th className="border p-2 w-10">Select</th>
//       </tr>
//     </thead>
//     <tbody>
//       {otherExpenses.map((entry, idx) => {
//         const prevDate = idx > 0 ? otherExpenses[idx - 1].date : null;
//         const showDate = entry.date !== prevDate; // show date only if different from previous

//         return (
//           <tr
//             key={entry._id}
//             className={
//               selectedOtherExpenseId === entry._id
//                 ? "bg-blue-100"
//                 : "hover:bg-gray-50"
//             }
//           >
//             <td className="border p-2 text-center">{idx + 1}</td>
//             <td className="border p-2 text-center">{showDate ? entry.date : ""}</td>
//             <td className="border p-2 text-right">{entry.amount}</td>
//             <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//               {entry.description}
//             </td>
//             <td className="border p-2 text-right">{entry.amount}</td>
//             <td className="border p-2 text-center">
//               <input
//                 type="radio"
//                 name="selectOtherExpense"
//                 checked={selectedOtherExpenseId === entry._id}
//                 onChange={() => handleOtherRowSelect(entry._id)}
//                 className="w-4 h-4 cursor-pointer accent-blue-500"
//               />
//             </td>
//           </tr>
//         );
//       })}
//     </tbody>
//   </table>
//   <p className="mt-2 font-semibold">Subtotal2: {subtotal2}</p>
// </div>

//          <button
//            className="px-4 py-2 bg-red-600 text-white rounded"
//            onClick={async () => {
//              const confirmDelete = window.confirm(
//                `Are you sure you want to delete user "${username}"?`
//             );
//              if (!confirmDelete) return;

//              try {
//                const token = localStorage.getItem("token");
//                const headers = { Authorization: `Bearer ${token}` };

//                await axios.delete(
//                  `${API}/api/admin/user/${username}`,
//                  { headers }
//                );

//                alert("User deleted successfully.");
//               navigate("/admin/dashboard");
//              } catch (error) {
//                console.error("Failed to delete user", error);
//                alert("Error deleting user.");
//              }
//            }}
//          >
//            🗑️ Delete User
//          </button>



//     </div>
//   );
// };

// export default AdminExpenseStatement;











// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// import Layout from "../components/Layout"; // ✅ import Layout

// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [hq, setHQ] = useState("");
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   const [selectedRowId, setSelectedRowId] = useState(null);
//   const [selectedOtherExpenseId, setSelectedOtherExpenseId] = useState(null);

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const resUser = await axios.get(`${API}/api/admin/user/${username}`);
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // Row selection
//   const handleRowSelect = (id) => setSelectedRowId(id);
//   const handleOtherRowSelect = (id) => setSelectedOtherExpenseId(id);

//   // Save inline TA/DA
//   const doSaveTA = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraTA: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraTA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   const doSaveDA = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraDA: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraDA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         taDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating TA Desc:", error);
//     }
//   };

//   const doSaveDADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         daDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating DA Desc:", error);
//     }
//   };

//   // Delete expenses
//   const handleDeleteExpense = async () => {
//     if (!selectedRowId && !selectedOtherExpenseId) return;
//     if (!window.confirm("Are you sure you want to delete this expense?")) return;

//     try {
//       if (selectedRowId) {
//         await axios.delete(
//           `${API}/api/admin/expense/${username}/${selectedRowId}`
//         );
//       } else if (selectedOtherExpenseId) {
//         if (selectedOtherExpenseId.startsWith("group:")) {
//           alert("Please expand and select an individual row to delete.");
//           return;
//         }
//         await axios.delete(
//           `${API}/api/admin/other-expense/${selectedOtherExpenseId}`
//         );
//       }

//       fetchData();
//       setSelectedRowId(null);
//       setSelectedOtherExpenseId(null);
//     } catch (err) {
//       console.error("Delete failed:", err);
//     }
//   };

//   // Totals
//   const subtotal1 = expenses.reduce(
//     (sum, e) =>
//       sum + (e.fare || 0) + (e.da || 0) + (e.extraTA || 0) + (e.extraDA || 0),
//     0
//   );
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <Layout 
//     title={`Expense Statement - ${username}`}
//     backTo="/admin/dashboard" // ✅ Always go back to dashboard

//     >
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-4 rounded shadow">
//           <div className="flex flex-wrap items-center justify-between gap-4">
//             <div>
//               <p className="text-lg font-semibold">
//                 Username: <span className="font-normal">{username}</span>
//               </p>
//               <p className="text-lg">
//                 HQ: <span className="font-medium">{hq}</span>
//               </p>
//               <p className="text-lg">
//                 Month: <span className="font-medium">{currentMonth}</span>
//               </p>
//               <p className="text-lg">
//                 Grand Total:{" "}
//                 <span className="font-bold text-green-600">{grandTotal}</span>
//               </p>
//             </div>
//             <div className="flex gap-3">
              
//               <button
//                 onClick={() => navigate(`/edit-info/${username}`)}
//                 className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow"
//               >
//                 ✏ Edit Info
//               </button>
//               <button
//                 onClick={handleDeleteExpense}
//                 className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow"
//               >
//                 🗑 Delete Expense
//               </button>
//             </div>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded shadow">
//           <h2 className="font-bold text-xl mb-3">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             selectedRowId={selectedRowId}
//             onRowSelect={handleRowSelect}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">{subtotal1}</span>
//           </p>
//         </div>

//         {/* Other Expenses */}
//         <div className="bg-white p-4 rounded shadow">
//           <h2 className="font-bold text-xl mb-3">Other Expenses</h2>
//           <table className="w-full border border-gray-300 text-sm table-fixed">
//             <thead className="bg-gray-100">
//               <tr>
//                 <th className="border p-2 w-12">Sl.No</th>
//                 <th className="border p-2 w-32">Date</th>
//                 <th className="border p-2 w-24">Amount</th>
//                 <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                   Description
//                 </th>
//                 <th className="border p-2 w-24">Total</th>
//                 <th className="border p-2 w-10">Select</th>
//               </tr>
//             </thead>
//             <tbody>
//               {otherExpenses.map((entry, idx) => {
//                 const prevDate = idx > 0 ? otherExpenses[idx - 1].date : null;
//                 const showDate = entry.date !== prevDate;

//                 return (
//                   <tr
//                     key={entry._id}
//                     className={
//                       selectedOtherExpenseId === entry._id
//                         ? "bg-blue-100"
//                         : "hover:bg-gray-50"
//                     }
//                   >
//                     <td className="border p-2 text-center">{idx + 1}</td>
//                     <td className="border p-2 text-center">
//                       {showDate ? entry.date : ""}
//                     </td>
//                     <td className="border p-2 text-right">{entry.amount}</td>
//                     <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                       {entry.description}
//                     </td>
//                     <td className="border p-2 text-right">{entry.amount}</td>
//                     <td className="border p-2 text-center">
//                       <input
//                         type="radio"
//                         name="selectOtherExpense"
//                         checked={selectedOtherExpenseId === entry._id}
//                         onChange={() => handleOtherRowSelect(entry._id)}
//                         className="w-4 h-4 cursor-pointer accent-blue-500"
//                       />
//                     </td>
//                   </tr>
//                 );
//               })}
//             </tbody>
//           </table>
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 2:{" "}
//             <span className="font-bold text-blue-600">{subtotal2}</span>
//           </p>
//         </div>

//         {/* Delete User */}
//         <div className="flex justify-end">
//           <button
//             className="px-5 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg shadow"
//             onClick={async () => {
//               const confirmDelete = window.confirm(
//                 `Are you sure you want to delete user "${username}"?`
//               );
//               if (!confirmDelete) return;

//               try {
//                 const token = localStorage.getItem("token");
//                 const headers = { Authorization: `Bearer ${token}` };

//                 await axios.delete(`${API}/api/admin/user/${username}`, {
//                   headers,
//                 });

//                 alert("User deleted successfully.");
//                 navigate("/admin/dashboard");
//               } catch (error) {
//                 console.error("Failed to delete user", error);
//                 alert("Error deleting user.");
//               }
//             }}
//           >
//             🗑 Delete User
//           </button>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;













// // pages/AdminExpenseStatement.jsx

// import React from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import dayjs from "dayjs";
// import Layout from "../components/Layout";
// import LogTable from "../components/LogTable";
// import OtherExpensesTable from "../components/AdminOtherExpensesTable";
// import { useAdminExpenses } from "../hooks/useAdminExpenses";

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const {
//     hq,
//     expenses,
//     otherExpenses,
//     selectedRowId,
//     selectedOtherExpenseId,
//     handleRowSelect,
//     handleOtherRowSelect,
//     doSaveTA,
//     doSaveDA,
//     doSaveTADesc,
//     doSaveDADesc,
//     handleDeleteExpense,
//     handleDeleteUser,
//     subtotal1,
//     subtotal2,
//     grandTotal,
//   } = useAdminExpenses(username);

//   const currentMonth = dayjs().format("MMMM YYYY");

//   return (
//     <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-4 rounded shadow">
//           <div className="flex flex-wrap items-center justify-between gap-4">
//             <div>
//               <p className="text-lg font-semibold">
//                 Username: <span className="font-normal">{username}</span>
//               </p>
//               <p className="text-lg">
//                 HQ: <span className="font-medium">{hq}</span>
//               </p>
//               <p className="text-lg">
//                 Month: <span className="font-medium">{currentMonth}</span>
//               </p>
//               <p className="text-lg">
//                 Grand Total:{" "}
//                 <span className="font-bold text-green-600">{grandTotal}</span>
//               </p>
//             </div>
//             <div className="flex gap-3">
//               <button
//                 onClick={() => navigate(`/edit-info/${username}`)}
//                 className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow"
//               >
//                 ✏ Edit Info
//               </button>
//               <button
//                 onClick={handleDeleteExpense}
//                 className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow"
//               >
//                 🗑 Delete Expense
//               </button>
//             </div>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded shadow">
//           <h2 className="font-bold text-xl mb-3">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             selectedRowId={selectedRowId}
//             onRowSelect={handleRowSelect}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">{subtotal1}</span>
//           </p>
//         </div>

//         {/* Other Expenses */}
//         <OtherExpensesTable
//           otherExpenses={otherExpenses}
//           selectedOtherExpenseId={selectedOtherExpenseId}
//           handleOtherRowSelect={handleOtherRowSelect}
//           subtotal2={subtotal2}
//         />

//         {/* Delete User */}
//         <div className="flex justify-end">
//           <button
//             className="px-5 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg shadow"
//             onClick={() => handleDeleteUser(username)}
//           >
//             🗑 Delete User
//           </button>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;









// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [hq, setHQ] = useState("");
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   const [selectedRowId, setSelectedRowId] = useState(null);
//   const [selectedOtherExpenseId, setSelectedOtherExpenseId] = useState(null);

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const resUser = await axios.get(`${API}/api/admin/user/${username}`);
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // Row selection
//   const handleRowSelect = (id) => setSelectedRowId(id);
//   const handleOtherRowSelect = (id) => setSelectedOtherExpenseId(id);

//   // Save inline TA/DA
//   const doSaveTA = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraTA: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraTA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   const doSaveDA = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraDA: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, extraDA: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         taDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating TA Desc:", error);
//     }
//   };

//   const doSaveDADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         daDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating DA Desc:", error);
//     }
//   };

//   // Delete expenses
//   const handleDeleteExpense = async () => {
//     if (!selectedRowId && !selectedOtherExpenseId) return;
//     if (!window.confirm("Are you sure you want to delete this expense?")) return;

//     try {
//       if (selectedRowId) {
//         await axios.delete(
//           `${API}/api/admin/expense/${username}/${selectedRowId}`
//         );
//       } else if (selectedOtherExpenseId) {
//         if (selectedOtherExpenseId.startsWith("group:")) {
//           alert("Please expand and select an individual row to delete.");
//           return;
//         }
//         await axios.delete(
//           `${API}/api/admin/other-expense/${selectedOtherExpenseId}`
//         );
//       }

//       fetchData();
//       setSelectedRowId(null);
//       setSelectedOtherExpenseId(null);
//     } catch (err) {
//       console.error("Delete failed:", err);
//     }
//   };

//   // Totals
//   const subtotal1 = expenses.reduce(
//     (sum, e) =>
//       sum + (e.fare || 0) + (e.da || 0) + (e.extraTA || 0) + (e.extraDA || 0),
//     0
//   );
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-6 rounded-lg shadow flex flex-wrap items-center justify-between gap-6">
//           <div>
//             <p className="text-xl font-bold text-[#1f3b64] mb-2">
//               Username:{" "}
//               <span className="font-normal text-gray-700">{username}</span>
//             </p>
//             <p className="text-lg text-gray-700">
//               HQ:{" "}
//               <span className="font-semibold uppercase text-[#1f3b64]">
//                 {hq}
//               </span>
//             </p>
//             <p className="text-lg text-gray-700">
//               Month:{" "}
//               <span className="font-semibold text-[#1f3b64]">{currentMonth}</span>
//             </p>
//             <p className="text-lg text-gray-700 mt-1">
//               Grand Total:{" "}
//               <span className="font-bold text-green-600 text-xl">
//                 ₹ {grandTotal.toLocaleString()}
//               </span>
//             </p>
//           </div>
//           <div className="flex gap-4">
//             <button
//               onClick={() => navigate(`/edit-info/${username}`)}
//               className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//             >
//               ✏ Edit Info
//             </button>
//             <button
//               className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//               onClick={async () => {
//                 const confirmDelete = window.confirm(
//                   `Are you sure you want to delete user "${username}"?`
//                 );
//                 if (!confirmDelete) return;

//                 try {
//                   const token = localStorage.getItem("token");
//                   const headers = { Authorization: `Bearer ${token}` };

//                   await axios.delete(`${API}/api/admin/user/${username}`, {
//                     headers,
//                   });

//                   alert("User deleted successfully.");
//                   navigate("/admin/dashboard");
//                 } catch (error) {
//                   console.error("Failed to delete user", error);
//                   alert("Error deleting user.");
//                 }
//               }}
//             >
//               🗑 Delete User
//             </button>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             selectedRowId={selectedRowId}
//             onRowSelect={handleRowSelect}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal1.toLocaleString()}
//             </span>
//           </p>
//         </div>

// {/* Other Expenses */}
// <div className="bg-white p-4 rounded-lg shadow">
//   <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Other Expenses</h2>
//   <table className="w-full border border-gray-300 text-sm table-fixed">
//     <thead className="bg-gray-100">
//       <tr>
//         <th className="border p-2 w-12">Sl.No</th>
//         <th className="border p-2 w-32">Date</th>
//         <th className="border p-2 w-24">Amount</th>
//         <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//           Description
//         </th>
//         <th className="border p-2 w-24">Total</th>
//         <th className="border p-2 w-10">Select</th>
//       </tr>
//     </thead>
//     <tbody>
//       {(() => {
//         // ✅ Group expenses by date
//         const grouped = otherExpenses.reduce((acc, item) => {
//           if (!acc[item.date]) acc[item.date] = [];
//           acc[item.date].push(item);
//           return acc;
//         }, {});

//         let serial = 1;

//         return Object.entries(grouped).map(([date, entries]) =>
//           entries.map((entry, idx) => (
//             <tr
//               key={entry._id}
//               className={`${
//                 selectedOtherExpenseId === entry._id
//                   ? "bg-blue-100"
//                   : "hover:bg-gray-50"
//               }`}
//             >
//               {/* Serial Number */}
//               <td className="border p-2 text-center">{serial++}</td>

//               {/* ✅ Date with rowSpan */}
//               {idx === 0 && (
//                 <td
//                   rowSpan={entries.length}
//                   className="border p-2 text-center font-semibold align-middle"
//                 >
//                   {date}
//                 </td>
//               )}

//               {/* Amount */}
//               <td className="border p-2 text-right">{entry.amount}</td>

//               {/* Description */}
//               <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                 {entry.description}
//               </td>

//               {/* Total */}
//               <td className="border p-2 text-right">{entry.amount}</td>

//               {/* Select */}
//               <td className="border p-2 text-center">
//                 <input
//                   type="radio"
//                   name="selectOtherExpense"
//                   checked={selectedOtherExpenseId === entry._id}
//                   onChange={() => handleOtherRowSelect(entry._id)}
//                   className="w-4 h-4 cursor-pointer accent-blue-500"
//                 />
//               </td>
//             </tr>
//           ))
//         );
//       })()}
//     </tbody>
//   </table>

//   {/* Subtotal */}
//   <p className="mt-3 font-semibold text-right text-lg">
//     Subtotal 2:{" "}
//     <span className="font-bold text-blue-600">
//       ₹ {subtotal2.toLocaleString()}
//     </span>
//   </p>
// </div>


//         {/* Delete Expense */}
//         <div className="flex justify-end">
//           <button
//             onClick={handleDeleteExpense}
//             className="bg-red-500 hover:bg-red-600 text-white px-5 py-2 rounded-lg shadow font-medium"
//           >
//             🗑 Delete Expense
//           </button>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;






// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [hq, setHQ] = useState("");
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   const [selectedRowId, setSelectedRowId] = useState(null);
//   const [selectedOtherExpenseId, setSelectedOtherExpenseId] = useState(null);

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const resUser = await axios.get(`${API}/api/admin/user/${username}`);
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // Row selection
//   const handleRowSelect = (id) => setSelectedRowId(id);
//   const handleOtherRowSelect = (id) => setSelectedOtherExpenseId(id);

//   // Save inline TA and update total
//   const doSaveTA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     // Recalculate the total for this expense
//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (Number(newValue) || 0) + // Use the new extraTA
//       (expenseToUpdate.extraDA || 0);

//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraTA: newValue,
//         total: newTotal, // Send the updated total to the DB
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraTA: newValue, total: newTotal } // Update local state
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   // Save inline DA and update total
//   const doSaveDA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     // Recalculate the total for this expense
//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (expenseToUpdate.extraTA || 0) +
//       (Number(newValue) || 0); // Use the new extraDA

//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraDA: newValue,
//         total: newTotal, // Send the updated total to the DB
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraDA: newValue, total: newTotal } // Update local state
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         taDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating TA Desc:", error);
//     }
//   };

//   const doSaveDADesc = async (expenseId, newValue) => {
//     try {
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         daDesc: newValue,
//       });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating DA Desc:", error);
//     }
//   };

//   // Delete expenses
//   const handleDeleteExpense = async () => {
//     if (!selectedRowId && !selectedOtherExpenseId) return;
//     if (!window.confirm("Are you sure you want to delete this expense?")) return;

//     try {
//       if (selectedRowId) {
//         await axios.delete(
//           `${API}/api/admin/expense/${username}/${selectedRowId}`
//         );
//       } else if (selectedOtherExpenseId) {
//         if (selectedOtherExpenseId.startsWith("group:")) {
//           alert("Please expand and select an individual row to delete.");
//           return;
//         }
//         await axios.delete(
//           `${API}/api/admin/other-expense/${selectedOtherExpenseId}`
//         );
//       }

//       fetchData();
//       setSelectedRowId(null);
//       setSelectedOtherExpenseId(null);
//     } catch (err) {
//       console.error("Delete failed:", err);
//     }
//   };

//   // Totals calculation now uses the 'total' field from each expense
//   const subtotal1 = expenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-6 rounded-lg shadow flex flex-wrap items-center justify-between gap-6">
//           <div>
//             <p className="text-xl font-bold text-[#1f3b64] mb-2">
//               Username:{" "}
//               <span className="font-normal text-gray-700">{username}</span>
//             </p>
//             <p className="text-lg text-gray-700">
//               HQ:{" "}
//               <span className="font-semibold uppercase text-[#1f3b64]">
//                 {hq}
//               </span>
//             </p>
//             <p className="text-lg text-gray-700">
//               Month:{" "}
//               <span className="font-semibold text-[#1f3b64]">{currentMonth}</span>
//             </p>
//             <p className="text-lg text-gray-700 mt-1">
//               Grand Total:{" "}
//               <span className="font-bold text-green-600 text-xl">
//                 ₹ {grandTotal.toLocaleString()}
//               </span>
//             </p>
//           </div>
//           <div className="flex gap-4">
//             <button
//               onClick={() => navigate(`/edit-info/${username}`)}
//               className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//             >
//               ✏ Edit Info
//             </button>
//             <button
//               className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//               onClick={async () => {
//                 const confirmDelete = window.confirm(
//                   `Are you sure you want to delete user "${username}"?`
//                 );
//                 if (!confirmDelete) return;

//                 try {
//                   const token = localStorage.getItem("token");
//                   const headers = { Authorization: `Bearer ${token}` };

//                   await axios.delete(`${API}/api/admin/user/${username}`, {
//                     headers,
//                   });

//                   alert("User deleted successfully.");
//                   navigate("/admin/dashboard");
//                 } catch (error) {
//                   console.error("Failed to delete user", error);
//                   alert("Error deleting user.");
//                 }
//               }}
//             >
//               🗑 Delete User
//             </button>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             selectedRowId={selectedRowId}
//             onRowSelect={handleRowSelect}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal1.toLocaleString()}
//             </span>
//           </p>
//         </div>

//         {/* Other Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Other Expenses</h2>
//           <table className="w-full border border-gray-300 text-sm table-fixed">
//             <thead className="bg-gray-100">
//               <tr>
//                 <th className="border p-2 w-12">Sl.No</th>
//                 <th className="border p-2 w-32">Date</th>
//                 <th className="border p-2 w-24">Amount</th>
//                 <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                   Description
//                 </th>
//                 <th className="border p-2 w-24">Total</th>
//                 <th className="border p-2 w-10">Select</th>
//               </tr>
//             </thead>
//             <tbody>
//               {(() => {
//                 const grouped = otherExpenses.reduce((acc, item) => {
//                   if (!acc[item.date]) acc[item.date] = [];
//                   acc[item.date].push(item);
//                   return acc;
//                 }, {});

//                 let serial = 1;

//                 return Object.entries(grouped).map(([date, entries]) =>
//                   entries.map((entry, idx) => (
//                     <tr
//                       key={entry._id}
//                       className={`${
//                         selectedOtherExpenseId === entry._id
//                           ? "bg-blue-100"
//                           : "hover:bg-gray-50"
//                       }`}
//                     >
//                       <td className="border p-2 text-center">{serial++}</td>
//                       {idx === 0 && (
//                         <td
//                           rowSpan={entries.length}
//                           className="border p-2 text-center font-semibold align-middle"
//                         >
//                           {date}
//                         </td>
//                       )}
//                       <td className="border p-2 text-right">{entry.amount}</td>
//                       <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                         {entry.description}
//                       </td>
//                       <td className="border p-2 text-right">{entry.amount}</td>
//                       <td className="border p-2 text-center">
//                         <input
//                           type="radio"
//                           name="selectOtherExpense"
//                           checked={selectedOtherExpenseId === entry._id}
//                           onChange={() => handleOtherRowSelect(entry._id)}
//                           className="w-4 h-4 cursor-pointer accent-blue-500"
//                         />
//                       </td>
//                     </tr>
//                   ))
//                 );
//               })()}
//             </tbody>
//           </table>
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 2:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal2.toLocaleString()}
//             </span>
//           </p>
//         </div>

//         {/* Delete Expense */}
//         <div className="flex justify-end">
//           <button
//             onClick={handleDeleteExpense}
//             className="bg-red-500 hover:bg-red-600 text-white px-5 py-2 rounded-lg shadow font-medium"
//           >
//             🗑 Delete Expense
//           </button>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;














// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [hq, setHQ] = useState("");
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   // ❌ REMOVED selectedRowId and selectedOtherExpenseId states

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const token = localStorage.getItem("token");
//       const headers = { Authorization: `Bearer ${token}` };

//       const resUser = await axios.get(`${API}/api/admin/user/${username}`, { headers });
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`, { headers }
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // ❌ REMOVED handleRowSelect and handleOtherRowSelect

//   // Save inline TA and update total
//   const doSaveTA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (Number(newValue) || 0) +
//       (expenseToUpdate.extraDA || 0);

//     try {
//        const token = localStorage.getItem("token");
//        await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraTA: newValue,
//         total: newTotal,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraTA: newValue, total: newTotal }
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   // Save inline DA and update total
//   const doSaveDA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (expenseToUpdate.extraTA || 0) +
//       (Number(newValue) || 0);

//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraDA: newValue,
//         total: newTotal,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraDA: newValue, total: newTotal }
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         taDesc: newValue,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating TA Desc:", error);
//     }
//   };

//   const doSaveDADesc = async (expenseId, newValue) => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         daDesc: newValue,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating DA Desc:", error);
//     }
//   };

//   // ❌ REMOVED handleDeleteExpense function

//   // Totals calculation
//   const subtotal1 = expenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-6 rounded-lg shadow flex flex-wrap items-center justify-between gap-6">
//           <div>
//             <p className="text-xl font-bold text-[#1f3b64] mb-2">
//               Username:{" "}
//               <span className="font-normal text-gray-700">{username}</span>
//             </p>
//             <p className="text-lg text-gray-700">
//               HQ:{" "}
//               <span className="font-semibold uppercase text-[#1f3b64]">
//                 {hq}
//               </span>
//             </p>
//             <p className="text-lg text-gray-700">
//               Month:{" "}
//               <span className="font-semibold text-[#1f3b64]">{currentMonth}</span>
//             </p>
//             <p className="text-lg text-gray-700 mt-1">
//               Grand Total:{" "}
//               <span className="font-bold text-green-600 text-xl">
//                 ₹ {grandTotal.toLocaleString()}
//               </span>
//             </p>
//           </div>
//           <div className="flex gap-4">
//             <button
//               onClick={() => navigate(`/edit-info/${username}`)}
//               className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//             >
//               ✏ Edit Info
//             </button>
//             <button
//               className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//               onClick={async () => {
//                 const confirmDelete = window.confirm(
//                   `Are you sure you want to delete user "${username}"?`
//                 );
//                 if (!confirmDelete) return;

//                 try {
//                   const token = localStorage.getItem("token");
//                   const headers = { Authorization: `Bearer ${token}` };
//                   await axios.delete(`${API}/api/admin/user/${username}`, {
//                     headers,
//                   });
//                   alert("User deleted successfully.");
//                   navigate("/admin/dashboard");
//                 } catch (error) {
//                   console.error("Failed to delete user", error);
//                   alert("Error deleting user.");
//                 }
//               }}
//             >
//               🗑 Delete User
//             </button>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal1.toLocaleString()}
//             </span>
//           </p>
//         </div>

//         {/* Other Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Other Expenses</h2>
//           <table className="w-full border border-gray-300 text-sm table-fixed">
//             <thead className="bg-gray-100">
//               <tr>
//                 <th className="border p-2 w-12">Sl.No</th>
//                 <th className="border p-2 w-32">Date</th>
//                 <th className="border p-2 w-24">Amount</th>
//                 <th className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                   Description
//                 </th>
//                 <th className="border p-2 w-24">Total</th>
//                 {/* ❌ REMOVED Select column */}
//               </tr>
//             </thead>
//             <tbody>
//               {(() => {
//                 const grouped = otherExpenses.reduce((acc, item) => {
//                   if (!acc[item.date]) acc[item.date] = [];
//                   acc[item.date].push(item);
//                   return acc;
//                 }, {});

//                 let serial = 1;

//                 return Object.entries(grouped).map(([date, entries]) =>
//                   entries.map((entry, idx) => (
//                     <tr key={entry._id} className="hover:bg-gray-50">
//                       <td className="border p-2 text-center">{serial++}</td>
//                       {idx === 0 && (
//                         <td
//                           rowSpan={entries.length}
//                           className="border p-2 text-center font-semibold align-middle"
//                         >
//                           {date}
//                         </td>
//                       )}
//                       <td className="border p-2 text-right">{entry.amount}</td>
//                       <td className="border p-2 w-[200px] max-w-[200px] whitespace-normal break-words">
//                         {entry.description}
//                       </td>
//                       <td className="border p-2 text-right">{entry.total}</td>
//                       {/* ❌ REMOVED Select cell */}
//                     </tr>
//                   ))
//                 );
//               })()}
//             </tbody>
//           </table>
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 2:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal2.toLocaleString()}
//             </span>
//           </p>
//         </div>
        
//         {/* ❌ REMOVED Delete Expense button */}
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;













// // pages/AdminExpenseStatement.jsx

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";
// import LogTable from "../components/LogTable";
// import OtherExpensesTable from "../components/AdminOtherExpensesTable"; // ✅ Import the new component
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const AdminExpenseStatement = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [hq, setHQ] = useState("");
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);

//   const currentMonth = dayjs().format("MMMM YYYY");

//   // Fetch data
//   const fetchData = useCallback(async () => {
//     try {
//       const token = localStorage.getItem("token");
//       const headers = { Authorization: `Bearer ${token}` };

//       const resUser = await axios.get(`${API}/api/admin/user/${username}`, { headers });
//       setHQ(resUser.data.hq || "");
//       setExpenses(resUser.data.expenses || []);

//       const resOther = await axios.get(
//         `${API}/api/admin/other-expenses/${username}`, { headers }
//       );
//       setOtherExpenses(resOther.data || []);
//     } catch (err) {
//       console.error("Error fetching data:", err);
//     }
//   }, [username]);

//   useEffect(() => {
//     fetchData();
//   }, [fetchData]);

//   // Save inline TA and update total
//   const doSaveTA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (Number(newValue) || 0) +
//       (expenseToUpdate.extraDA || 0);

//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraTA: newValue,
//         total: newTotal,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraTA: newValue, total: newTotal }
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraTA:", error);
//     }
//   };

//   // Save inline DA and update total
//   const doSaveDA = async (expenseId, newValue) => {
//     const expenseToUpdate = expenses.find((exp) => exp._id === expenseId);
//     if (!expenseToUpdate) return;

//     const newTotal =
//       (expenseToUpdate.fare || 0) +
//       (expenseToUpdate.da || 0) +
//       (expenseToUpdate.extraTA || 0) +
//       (Number(newValue) || 0);

//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         extraDA: newValue,
//         total: newTotal,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId
//             ? { ...exp, extraDA: newValue, total: newTotal }
//             : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating extraDA:", error);
//     }
//   };

//   const doSaveTADesc = async (expenseId, newValue) => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         taDesc: newValue,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, taDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating TA Desc:", error);
//     }
//   };

//   const doSaveDADesc = async (expenseId, newValue) => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/expense/${username}/${expenseId}`, {
//         daDesc: newValue,
//       }, { headers: { Authorization: `Bearer ${token}` } });
//       setExpenses((prev) =>
//         prev.map((exp) =>
//           exp._id === expenseId ? { ...exp, daDesc: newValue } : exp
//         )
//       );
//     } catch (error) {
//       console.error("Error updating DA Desc:", error);
//     }
//   };

//   // Totals calculation
//   const subtotal1 = expenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//   const grandTotal = subtotal1 + subtotal2;

//   return (
//     <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//       <div className="space-y-6">
//         {/* Header Info */}
//         <div className="bg-white p-6 rounded-lg shadow flex flex-wrap items-center justify-between gap-6">
//           <div>
//             <p className="text-xl font-bold text-[#1f3b64] mb-2">
//               Username:{" "}
//               <span className="font-normal text-gray-700">{username}</span>
//             </p>
//             <p className="text-lg text-gray-700">
//               HQ:{" "}
//               <span className="font-semibold uppercase text-[#1f3b64]">
//                 {hq}
//               </span>
//             </p>
//             <p className="text-lg text-gray-700">
//               Month:{" "}
//               <span className="font-semibold text-[#1f3b64]">{currentMonth}</span>
//             </p>
//             <p className="text-lg text-gray-700 mt-1">
//               Grand Total:{" "}
//               <span className="font-bold text-green-600 text-xl">
//                 ₹ {grandTotal.toLocaleString("en-IN")}
//               </span>
//             </p>
//           </div>
//           <div className="flex gap-4">
//             <button
//               onClick={() => navigate(`/edit-info/${username}`)}
//               className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//             >
//               ✏️ Edit Info
//             </button>
//             <button
//               className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//               onClick={async () => {
//                 const confirmDelete = window.confirm(
//                   `Are you sure you want to delete user "${username}"?`
//                 );
//                 if (!confirmDelete) return;

//                 try {
//                   const token = localStorage.getItem("token");
//                   const headers = { Authorization: `Bearer ${token}` };
//                   await axios.delete(`${API}/api/admin/user/${username}`, {
//                     headers,
//                   });
//                   alert("User deleted successfully.");
//                   navigate("/admin/dashboard");
//                 } catch (error) {
//                   console.error("Failed to delete user", error);
//                   alert("Error deleting user.");
//                 }
//               }}
//             >
//               🗑️ Delete User
//             </button>
//           </div>
//         </div>

//         {/* Normal Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Normal Expenses</h2>
//           <LogTable
//             expenses={expenses}
//             onSaveTA={doSaveTA}
//             onSaveDA={doSaveDA}
//             onEditTADesc={doSaveTADesc}
//             onEditDADesc={doSaveDADesc}
//             onEditLocationDesc={(id) =>
//               console.log("Edit Location Desc for", id)
//             }
//           />
//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 1:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal1.toLocaleString("en-IN")}
//             </span>
//           </p>
//         </div>

//         {/* Other Expenses */}
//         <div className="bg-white p-4 rounded-lg shadow">
//           <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Other Expenses</h2>
          
//           {/* ✅ Using the new component */}
//           <OtherExpensesTable otherExpenses={otherExpenses} />

//           <p className="mt-3 font-semibold text-right text-lg">
//             Subtotal 2:{" "}
//             <span className="font-bold text-blue-600">
//               ₹ {subtotal2.toLocaleString("en-IN")}
//             </span>
//           </p>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default AdminExpenseStatement;









// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import dayjs from "dayjs";

// const API = process.env.REACT_APP_BACKEND_URL;

// // --- Helper Components (Defined in the same file) ---

// const Layout = ({ title, backTo, children }) => {
//   const navigate = useNavigate();
//   return (
//     <div className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8">
//       <div className="max-w-7xl mx-auto">
//         <header className="flex items-center justify-between mb-6">
//           <h1 className="text-2xl sm:text-3xl font-bold text-[#1f3b64]">{title}</h1>
//           {backTo && (
//             <button
//               onClick={() => navigate(backTo)}
//               className="text-sm text-blue-600 hover:underline"
//             >
//               &larr; Back
//             </button>
//           )}
//         </header>
//         <main>{children}</main>
//       </div>
//     </div>
//   );
// };

// const EditableCell = ({ initialValue, onSave }) => {
//     const [isEditing, setIsEditing] = useState(false);
//     const [value, setValue] = useState(initialValue);

//     const handleSave = () => {
//         onSave(value);
//         setIsEditing(false);
//     };

//     if (isEditing) {
//         return (
//             <div className="flex items-center gap-2">
//                 <input
//                     type="text"
//                     value={value}
//                     onChange={(e) => setValue(e.target.value)}
//                     className="border p-1 rounded-md w-full"
//                     autoFocus
//                 />
//                 <button onClick={handleSave} className="bg-green-500 text-white px-2 py-1 text-xs rounded hover:bg-green-600">Save</button>
//                 <button onClick={() => setIsEditing(false)} className="bg-gray-500 text-white px-2 py-1 text-xs rounded hover:bg-gray-600">X</button>
//             </div>
//         );
//     }
//     return <div onClick={() => setIsEditing(true)} className="cursor-pointer min-h-[20px]">{initialValue || <span className="text-gray-400">...</span>}</div>;
// };

// const LogTable = ({ expenses, onSaveTA, onSaveDA, onEditTADesc, onEditDADesc }) => (
//     <div className="overflow-x-auto">
//         <table className="min-w-full divide-y divide-gray-200">
//             <thead className="bg-gray-50">
//                 <tr>
//                     {['Date', 'Time', 'Location', 'Transport', 'Zone', 'KM', 'Fare', 'DA', 'Total', 'Extra TA', 'TA Desc', 'Extra DA', 'DA Desc'].map(header => (
//                         <th key={header} className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{header}</th>
//                     ))}
//                 </tr>
//             </thead>
//             <tbody className="bg-white divide-y divide-gray-200">
//                 {expenses.map(exp => (
//                     <tr key={exp._id} className={exp.isSpecial ? "bg-yellow-50" : ""}>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.date}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.time}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.location}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.transport}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.zone}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.km}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">₹{exp.fare}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">₹{exp.da}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm font-bold">₹{exp.total}</td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.extraTA} onSave={(val) => onSaveTA(exp._id, val)} /></td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.taDesc} onSave={(val) => onEditTADesc(exp._id, val)} /></td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.extraDA} onSave={(val) => onSaveDA(exp._id, val)} /></td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.daDesc} onSave={(val) => onEditDADesc(exp._id, val)} /></td>
//                     </tr>
//                 ))}
//             </tbody>
//         </table>
//     </div>
// );

// const OtherExpensesTable = ({ otherExpenses, onSaveExtraAmount, onSaveExtraDescription }) => (
//     <div className="overflow-x-auto">
//         <table className="min-w-full divide-y divide-gray-200">
//             <thead className="bg-gray-50">
//                 <tr>
//                     {['Date', 'Description', 'Amount', 'Extra Amount', 'Extra Desc', 'Total'].map(header => (
//                          <th key={header} className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{header}</th>
//                     ))}
//                 </tr>
//             </thead>
//             <tbody className="bg-white divide-y divide-gray-200">
//                 {otherExpenses.map(exp => (
//                     <tr key={exp._id}>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">{exp.date}</td>
//                         <td className="px-4 py-2 text-sm">{exp.description}</td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm">₹{exp.amount}</td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.extraamount} onSave={(val) => onSaveExtraAmount(exp._id, val)} /></td>
//                         <td className="px-4 py-2 text-sm"><EditableCell initialValue={exp.extradescription} onSave={(val) => onSaveExtraDescription(exp._id, val)} /></td>
//                         <td className="px-4 py-2 whitespace-nowrap text-sm font-bold">₹{exp.total}</td>
//                     </tr>
//                 ))}
//             </tbody>
//         </table>
//     </div>
// );


// // --- Main Page Component ---

// const AdminExpenseStatement = () => {
//     const { username } = useParams();
//     const navigate = useNavigate();

//     const [hq, setHQ] = useState("");
//     const [expenses, setExpenses] = useState([]);
//     const [otherExpenses, setOtherExpenses] = useState([]);
//     const [confirmingDelete, setConfirmingDelete] = useState(false);
//     const [message, setMessage] = useState({ text: "", type: "" });
    
//     const currentMonth = dayjs().format("MMMM YYYY");

//     const fetchData = useCallback(async () => {
//         try {
//             const token = localStorage.getItem("token");
//             const headers = { Authorization: `Bearer ${token}` };
            
//             // ✅ CHANGED: Updated API endpoints
//             const resUser = await axios.get(`${API}/api/admin/users/${username}`, { headers });
//             setHQ(resUser.data.hq || "");
//             setExpenses(resUser.data.expenses || []);
            
//             const resOther = await axios.get(`${API}/api/admin/expenses/other/${username}`, { headers });
//             setOtherExpenses(resOther.data || []);
//         } catch (err) {
//             console.error("Error fetching data:", err);
//             setMessage({ text: "Failed to fetch data.", type: "error" });
//         }
//     }, [username]);

//     useEffect(() => {
//         fetchData();
//     }, [fetchData]);

//     const createSaveHandler = (field, isNumeric = false) => async (expenseId, newValue) => {
//         const expense = expenses.find(e => e._id === expenseId);
//         if (!expense) return;
        
//         const numericValue = isNumeric ? Number(newValue) || 0 : 0;
//         let payload = { [field]: isNumeric ? numericValue : newValue };

//         // Recalculate total if an amount field is changing
//         if (field === 'extraTA' || field === 'extraDA') {
//             const extraTA = field === 'extraTA' ? numericValue : (expense.extraTA || 0);
//             const extraDA = field === 'extraDA' ? numericValue : (expense.extraDA || 0);
//             payload.total = (expense.fare || 0) + (expense.da || 0) + extraTA + extraDA;
//         }

//         try {
//             const token = localStorage.getItem("token");
//             // ✅ CHANGED: Updated API endpoint
//             await axios.put(`${API}/api/admin/expenses/normal/${username}/${expenseId}`, payload, { headers: { Authorization: `Bearer ${token}` } });
//             setExpenses(prev => prev.map(e => e._id === expenseId ? { ...e, ...payload } : e));
//         } catch (error) {
//             console.error(`Error updating ${field}:`, error);
//             setMessage({ text: "Update failed.", type: "error" });
//         }
//     };
    
//     const doSaveTA = createSaveHandler('extraTA', true);
//     const doSaveDA = createSaveHandler('extraDA', true);
//     const doSaveTADesc = createSaveHandler('taDesc');
//     const doSaveDADesc = createSaveHandler('daDesc');

//     const createOtherExpenseSaveHandler = (field) => async (expenseId, newValue) => {
//         try {
//             const token = localStorage.getItem("token");
//              // ✅ CHANGED: Updated API endpoint
//             const { data } = await axios.put(`${API}/api/admin/expenses/other/${expenseId}`, { [field]: newValue }, { headers: { Authorization: `Bearer ${token}` } });
//             setOtherExpenses(prev => prev.map(exp => exp._id === expenseId ? data.expense : exp));
//         } catch (err) {
//             console.error(`Error updating other expense ${field}:`, err);
//             setMessage({ text: "Update failed.", type: "error" });
//         }
//     };

//     const doSaveOtherExpenseExtraAmount = createOtherExpenseSaveHandler('extraamount');
//     const doSaveOtherExpenseExtraDescription = createOtherExpenseSaveHandler('extradescription');

//     const handleDeleteUser = async () => {
//         try {
//             const token = localStorage.getItem("token");
//             // ✅ CHANGED: Updated API endpoint
//             await axios.delete(`${API}/api/admin/users/${username}`, { headers: { Authorization: `Bearer ${token}` } });
//             setMessage({ text: "User deleted successfully. Redirecting...", type: "success" });
//             setTimeout(() => navigate("/admin/dashboard"), 1500);
//         } catch (error) {
//             console.error("Failed to delete user", error);
//             setMessage({ text: "Error deleting user.", type: "error" });
//         } finally {
//             setConfirmingDelete(false);
//         }
//     };
    
//     const subtotal1 = expenses.reduce((sum, e) => sum + (e.total || 0), 0);
//     const subtotal2 = otherExpenses.reduce((sum, e) => sum + (e.total || 0), 0);
//     const grandTotal = subtotal1 + subtotal2;

//     return (
//         <Layout title={`Expense Statement - ${username}`} backTo="/admin/dashboard">
//             <div className="space-y-6">
//                  {message.text && (
//                     <div className={`p-3 mb-4 rounded-md text-sm ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
//                         {message.text}
//                     </div>
//                 )}
//                 {confirmingDelete && (
//                      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
//                          <strong className="font-bold">Confirm Deletion: </strong>
//                          <span className="block sm:inline">Are you sure you want to delete user "{username}"? This action cannot be undone.</span>
//                          <div className="mt-3">
//                              <button onClick={handleDeleteUser} className="bg-red-600 text-white px-4 py-2 rounded-md mr-2 hover:bg-red-700">Yes, Delete User</button>
//                              <button onClick={() => setConfirmingDelete(false)} className="bg-gray-200 text-black px-4 py-2 rounded-md hover:bg-gray-300">Cancel</button>
//                          </div>
//                      </div>
//                 )}

//                 <div className="bg-white p-6 rounded-lg shadow flex flex-wrap items-center justify-between gap-6">
//                     <div>
//                         <p className="text-xl font-bold text-[#1f3b64] mb-2">Username: <span className="font-normal text-gray-700">{username}</span></p>
//                         <p className="text-lg text-gray-700">HQ: <span className="font-semibold uppercase text-[#1f3b64]">{hq}</span></p>
//                         <p className="text-lg text-gray-700">Month: <span className="font-semibold text-[#1f3b64]">{currentMonth}</span></p>
//                         <p className="text-lg text-gray-700 mt-1">Grand Total: <span className="font-bold text-green-600 text-xl">₹ {grandTotal.toLocaleString("en-IN")}</span></p>
//                     </div>
//                     <div className="flex gap-4">
//                         <button
//                            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow font-medium"
//                            onClick={() => navigate(`/edit-info/${username}`)}>
//                             ⚙️ Edit Rates
//                         </button>
//                         <button
//                           className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow font-medium"
//                           onClick={() => setConfirmingDelete(true)}>
//                             🗑️ Delete User
//                         </button>
//                     </div>
//                 </div>

//                 <div className="bg-white p-4 rounded-lg shadow">
//                     <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Normal Expenses</h2>
//                     <LogTable expenses={expenses} onSaveTA={doSaveTA} onSaveDA={doSaveDA} onEditTADesc={doSaveTADesc} onEditDADesc={doSaveDADesc} />
//                     <p className="mt-3 font-semibold text-right text-lg">Subtotal 1: <span className="font-bold text-blue-600">₹ {subtotal1.toLocaleString("en-IN")}</span></p>
//                 </div>

//                 <div className="bg-white p-4 rounded-lg shadow">
//                     <h2 className="font-bold text-xl mb-3 text-[#1f3b64]">Other Expenses</h2>
//                     <OtherExpensesTable otherExpenses={otherExpenses} onSaveExtraAmount={doSaveOtherExpenseExtraAmount} onSaveExtraDescription={doSaveOtherExpenseExtraDescription} />
//                     <p className="mt-3 font-semibold text-right text-lg">Subtotal 2: <span className="font-bold text-blue-600">₹ {subtotal2.toLocaleString("en-IN")}</span></p>
//                 </div>
//             </div>
//         </Layout>
//     );
// };

// export default AdminExpenseStatement;




























// import { useEffect, useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// const API = process.env.REACT_APP_BACKEND_URL;


// const EditInfoPage = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
  

//   const [formData, setFormData] = useState({
//     hq: "",
//     ex: [],
//     os: [],
//     kms: {},
//     fares: {},
//     da: {},
//   });

//   const [newEX, setNewEX] = useState("");
//   const [newOS, setNewOS] = useState("");
//   const [cities, setCities] = useState([]); // hq + ex + os

//   // Fetch user data
//   useEffect(() => {
//     const fetchInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/user/${username}`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         const user = res.data;

//         const cityList = [user.hq, ...user.ex, ...user.os];

//         setFormData({
//           hq: user.hq,
//           ex: user.ex,
//           os: user.os,
//           kms: user.kms || {},
//           fares: user.fares || {},
//           da: user.da || {},
//         });

//         setCities(cityList);
//       } catch (err) {
//         console.error("Error fetching info:", err);
//       }
//     };

//     fetchInfo();
//   }, [username]);

//   const handleChange = (e) => {
//     setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
//   };

//   const addEX = () => {
//     if (newEX && !formData.ex.includes(newEX)) {
//       setFormData((prev) => ({
//         ...prev,
//         ex: [...prev.ex, newEX],
//       }));
//       setCities((prev) => [...prev, newEX]);
//       setNewEX("");
//     }
//   };

//   const addOS = () => {
//     if (newOS && !formData.os.includes(newOS)) {
//       setFormData((prev) => ({
//         ...prev,
//         os: [...prev.os, newOS],
//       }));
//       setCities((prev) => [...prev, newOS]);
//       setNewOS("");
//     }
//   };

//   const updateKms = (city, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       kms: { ...prev.kms, [city]: parseInt(value) },
//     }));
//   };

//   const updateFare = (city, mode, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       fares: {
//         ...prev.fares,
//         [city]: {
//           ...prev.fares[city],
//           [mode]: parseInt(value),
//         },
//       },
//     }));
//   };

//   const updateDA = (city, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       da: { ...prev.da, [city]: parseInt(value) },
//     }));
//   };

//   const handleSubmit = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/admin/edit-user/${username}`,
//         formData,
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("Info updated successfully");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error("Update failed", err);
//     }
//   };

//   return (
//     <div>
//       <h2>Edit Info for {username}</h2>

//       <input
//         type="text"
//         name="hq"
//         value={formData.hq}
//         onChange={handleChange}
//         placeholder="HQ"
//       />

//       <div>
//   <input
//     type="text"
//     value={newOS}
//     onChange={(e) => setNewOS(e.target.value)}
//     placeholder="Add OS"
//   />
//   <button onClick={addOS}>Add OS</button>
//   <div>
//     <strong>OS Cities:</strong>
//     {formData.os.map((city, index) => (
//       <div key={index} className="flex items-center gap-2">
//         <span>{city}</span>
//         <button
//           onClick={() => {
//             const updatedOS = formData.os.filter((c) => c !== city);
//             const updatedCities = cities.filter((c) => c !== city);
//             const { [city]: _, ...newKms } = formData.kms;
//             const { [city]: __, ...newFares } = formData.fares;
//             const { [city]: ___, ...newDA } = formData.da;

//             setFormData((prev) => ({
//               ...prev,
//               os: updatedOS,
//               kms: newKms,
//               fares: newFares,
//               da: newDA,
//             }));
//             setCities(updatedCities);
//           }}
//           className="text-red-600"
//         >
//           🗑️
//         </button>
//       </div>
//     ))}
//   </div>
// </div>
// <div>
//   <input
//     type="text"
//     value={newEX}
//     onChange={(e) => setNewEX(e.target.value)}
//     placeholder="Add EX"
//   />
//   <button onClick={addEX}>Add EX</button>
//   <div>
//     <strong>EX Cities:</strong>
//     {formData.ex.map((city, index) => (
//       <div key={index} className="flex items-center gap-2">
//         <span>{city}</span>
//         <button
//           onClick={() => {
//             const updatedEX = formData.ex.filter((c) => c !== city);
//             const updatedCities = cities.filter((c) => c !== city);
//             const { [city]: _, ...newKms } = formData.kms;
//             const { [city]: __, ...newFares } = formData.fares;
//             const { [city]: ___, ...newDA } = formData.da;

//             setFormData((prev) => ({
//               ...prev,
//               ex: updatedEX,
//               kms: newKms,
//               fares: newFares,
//               da: newDA,
//             }));
//             setCities(updatedCities);
//           }}
//           className="text-red-600"
//         >
//           🗑️
//         </button>
//       </div>
//     ))}
//   </div>
// </div>



//       <hr />
//       <h4>Set KMs</h4>
//       {cities.map((city) => (
//         <div key={city}>
//           <label>{city}:</label>
//           <input
//             type="number"
//             value={formData.kms[city] || 0}
//             onChange={(e) => updateKms(city, e.target.value)}
//             disabled={city === formData.hq}
//           />
//         </div>
//       ))}

//       <hr />
//       <h4>Set Fares</h4>
//       {cities.map((city) =>
//         city === formData.hq ? null : (
//           <div key={city}>
//             <h5>{city}</h5>
//             {["bike", "bus", "train"].map((mode) => (
//               <div key={mode}>
//                 {mode}:{" "}
//                 <input
//                   type="number"
//                   value={
//                     formData.fares[city]?.[mode] !== undefined
//                       ? formData.fares[city][mode]
//                       : 0
//                   }
//                   onChange={(e) => updateFare(city, mode, e.target.value)}
//                 />
//               </div>
//             ))}
//           </div>
//         )
//       )}

//       <hr />
//       <h4>DA per City</h4>
//       {cities.map((city) => (
//         <div key={city}>
//           <label>{city}:</label>
//           <input
//             type="number"
//             value={formData.da[city] || 0}
//             onChange={(e) => updateDA(city, e.target.value)}
//           />
//         </div>
//       ))}

//       <button onClick={handleSubmit}>Save Changes</button>
//       <button
//     className="px-4 py-2 bg-gray-300 text-black rounded"
//     onClick={() => navigate(`/admin/statement/${username}`)}
//   >
//     ← Back
//   </button>
//     </div>
//   );
// };

// export default EditInfoPage;









// // src/pages/EditInfoPage.jsx
// import { useEffect, useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditInfoPage = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();

//   const [formData, setFormData] = useState({
//     hq: "",
//     ex: [],
//     os: [],
//     kms: {},
//     fares: {},
//     da: {},
//   });

//   const [newEX, setNewEX] = useState("");
//   const [newOS, setNewOS] = useState("");
//   const [cities, setCities] = useState([]); // hq + ex + os

//   // Fetch user data
//   useEffect(() => {
//     const fetchInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/user/${username}`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         const user = res.data;

//         const cityList = [user.hq, ...user.ex, ...user.os];

//         setFormData({
//           hq: user.hq,
//           ex: user.ex,
//           os: user.os,
//           kms: user.kms || {},
//           fares: user.fares || {},
//           da: user.da || {},
//         });

//         setCities(cityList);
//       } catch (err) {
//         console.error("Error fetching info:", err);
//       }
//     };

//     fetchInfo();
//   }, [username]);

//   const handleChange = (e) => {
//     setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
//   };

//   const addEX = () => {
//     if (newEX && !formData.ex.includes(newEX)) {
//       setFormData((prev) => ({
//         ...prev,
//         ex: [...prev.ex, newEX],
//       }));
//       setCities((prev) => [...prev, newEX]);
//       setNewEX("");
//     }
//   };

//   const addOS = () => {
//     if (newOS && !formData.os.includes(newOS)) {
//       setFormData((prev) => ({
//         ...prev,
//         os: [...prev.os, newOS],
//       }));
//       setCities((prev) => [...prev, newOS]);
//       setNewOS("");
//     }
//   };

//   const updateKms = (city, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       kms: { ...prev.kms, [city]: parseInt(value) },
//     }));
//   };

//   const updateFare = (city, mode, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       fares: {
//         ...prev.fares,
//         [city]: {
//           ...prev.fares[city],
//           [mode]: parseInt(value),
//         },
//       },
//     }));
//   };

//   const updateDA = (city, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       da: { ...prev.da, [city]: parseInt(value) },
//     }));
//   };

//   const handleSubmit = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/admin/edit-user/${username}`,
//         formData,
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("Info updated successfully");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error("Update failed", err);
//     }
//   };

//   const handleResetPassword = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/admin/reset-password/${username}`,
//         {},
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("Password reset successfully (check backend default)");
//     } catch (err) {
//       console.error("Password reset failed", err);
//     }
//   };

//   const deleteCity = (city, type) => {
//     const updatedList = formData[type].filter((c) => c !== city);
//     const updatedCities = cities.filter((c) => c !== city);

//     const { [city]: _, ...newKms } = formData.kms;
//     const { [city]: __, ...newFares } = formData.fares;
//     const { [city]: ___, ...newDA } = formData.da;

//     setFormData((prev) => ({
//       ...prev,
//       [type]: updatedList,
//       kms: newKms,
//       fares: newFares,
//       da: newDA,
//     }));
//     setCities(updatedCities);
//   };

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info for {username}</h2>

//       {/* HQ */}
//       <div className="mb-4">
//         <label className="font-semibold">HQ:</label>
//         <input
//           type="text"
//           name="hq"
//           value={formData.hq}
//           onChange={handleChange}
//           className="border px-2 py-1 ml-2"
//         />
//       </div>

//       {/* EX Cities */}
//       <div className="mb-4">
//         <h3 className="font-semibold">EX Cities</h3>
//         <div className="flex gap-2 mb-2">
//           <input
//             type="text"
//             value={newEX}
//             onChange={(e) => setNewEX(e.target.value)}
//             placeholder="Add EX"
//             className="border px-2 py-1"
//           />
//           <button
//             onClick={addEX}
//             className="bg-blue-500 text-white px-3 py-1 rounded"
//           >
//             Add
//           </button>
//         </div>
//         <table className="w-full border">
//           <tbody>
//             {formData.ex.map((city, i) => (
//               <tr key={i} className="border">
//                 <td className="px-2 py-1">{city}</td>
//                 <td className="px-2 py-1 text-right">
//                   <button
//                     onClick={() => deleteCity(city, "ex")}
//                     className="text-red-600"
//                   >
//                     🗑️
//                   </button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {/* OS Cities */}
//       <div className="mb-4">
//         <h3 className="font-semibold">OS Cities</h3>
//         <div className="flex gap-2 mb-2">
//           <input
//             type="text"
//             value={newOS}
//             onChange={(e) => setNewOS(e.target.value)}
//             placeholder="Add OS"
//             className="border px-2 py-1"
//           />
//           <button
//             onClick={addOS}
//             className="bg-blue-500 text-white px-3 py-1 rounded"
//           >
//             Add
//           </button>
//         </div>
//         <table className="w-full border">
//           <tbody>
//             {formData.os.map((city, i) => (
//               <tr key={i} className="border">
//                 <td className="px-2 py-1">{city}</td>
//                 <td className="px-2 py-1 text-right">
//                   <button
//                     onClick={() => deleteCity(city, "os")}
//                     className="text-red-600"
//                   >
//                     🗑️
//                   </button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {/* KMs Table */}
//       <h3 className="font-semibold mt-6">KMs</h3>
//       <table className="w-full border mb-4">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border px-2 py-1">City</th>
//             <th className="border px-2 py-1">KM</th>
//           </tr>
//         </thead>
//         <tbody>
//           {cities.map((city) => (
//             <tr key={city}>
//               <td className="border px-2 py-1">{city}</td>
//               <td className="border px-2 py-1">
//                 <input
//                   type="number"
//                   value={formData.kms[city] || 0}
//                   onChange={(e) => updateKms(city, e.target.value)}
//                   disabled={city === formData.hq}
//                   className="border px-2 py-1 w-full"
//                 />
//               </td>
//             </tr>
//           ))}
//         </tbody>
//       </table>

//       {/* Fares Table */}
//       <h3 className="font-semibold mt-6">Fares</h3>
//       <table className="w-full border mb-4">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border px-2 py-1">City</th>
//             <th className="border px-2 py-1">Bike</th>
//             <th className="border px-2 py-1">Bus</th>
//             <th className="border px-2 py-1">Train</th>
//           </tr>
//         </thead>
//         <tbody>
//           {cities
//             .filter((city) => city !== formData.hq)
//             .map((city) => (
//               <tr key={city}>
//                 <td className="border px-2 py-1">{city}</td>
//                 {["bike", "bus", "train"].map((mode) => (
//                   <td key={mode} className="border px-2 py-1">
//                     <input
//                       type="number"
//                       value={formData.fares[city]?.[mode] || 0}
//                       onChange={(e) =>
//                         updateFare(city, mode, e.target.value)
//                       }
//                       className="border px-2 py-1 w-full"
//                     />
//                   </td>
//                 ))}
//               </tr>
//             ))}
//         </tbody>
//       </table>

//       {/* DA Table */}
//       <h3 className="font-semibold mt-6">DA per City</h3>
//       <table className="w-full border mb-4">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border px-2 py-1">City</th>
//             <th className="border px-2 py-1">DA</th>
//           </tr>
//         </thead>
//         <tbody>
//           {cities.map((city) => (
//             <tr key={city}>
//               <td className="border px-2 py-1">{city}</td>
//               <td className="border px-2 py-1">
//                 <input
//                   type="number"
//                   value={formData.da[city] || 0}
//                   onChange={(e) => updateDA(city, e.target.value)}
//                   className="border px-2 py-1 w-full"
//                 />
//               </td>
//             </tr>
//           ))}
//         </tbody>
//       </table>

//       {/* Buttons */}
//       <div className="flex gap-3 mt-6">
//         <button
//           onClick={handleSubmit}
//           className="px-4 py-2 bg-green-600 text-white rounded"
//         >
//           Save Changes
//         </button>
//         <button
//           onClick={() => navigate(`/admin/statement/${username}`)}
//           className="px-4 py-2 bg-gray-300 rounded"
//         >
//           ← Back
//         </button>
//         <button
//           onClick={handleResetPassword}
//           className="px-4 py-2 bg-red-500 text-white rounded"
//         >
//           Reset Password
//         </button>
//       </div>
//     </div>
//   );
// };

// export default EditInfoPage;











// import React, { useState } from "react";

// const EditUserInfo = ({ user, onSave }) => {
//   const [formData, setFormData] = useState({
//     username: user.username,
//     password: "",
//     ex: [...user.ex],
//     os: [...user.os],
//     fares: [...user.fares], // keeping as array for UI
//   });

//   const handleFareChange = (index, field, value) => {
//     const newFares = [...formData.fares];
//     newFares[index][field] = value;
//     setFormData({ ...formData, fares: newFares });
//   };

//   const handleDeleteFare = (index) => {
//     const newFares = formData.fares.filter((_, i) => i !== index);
//     setFormData({ ...formData, fares: newFares });
//   };

//   const handleAddFare = () => {
//     setFormData({
//       ...formData,
//       fares: [
//         ...formData.fares,
//         { city: "", zone: "", transport: "", km: "", pricePerKm: "", fare: "", da: "" },
//       ],
//     });
//   };

//   return (
//     <div className="p-4">
//       <h2 className="text-xl font-bold mb-4">Edit User Info</h2>

//       {/* Username + Password */}
//       <div className="mb-4">
//         <label className="block font-semibold">Username</label>
//         <input
//           className="border p-2 w-full"
//           value={formData.username}
//           onChange={(e) => setFormData({ ...formData, username: e.target.value })}
//         />

//         <label className="block mt-2 font-semibold">Password</label>
//         <input
//           type="password"
//           className="border p-2 w-full"
//           value={formData.password}
//           onChange={(e) => setFormData({ ...formData, password: e.target.value })}
//         />

//         <button className="bg-red-500 text-white px-3 py-1 mt-2 rounded">
//           Reset Password
//         </button>
//       </div>

//       {/* EX + OS Cities */}
//       <div className="mb-4">
//         <h3 className="font-semibold">EX Cities</h3>
//         {formData.ex.map((city, i) => (
//           <div key={i} className="flex items-center gap-2">
//             <span>{city}</span>
//             <button
//               className="text-red-500"
//               onClick={() =>
//                 setFormData({ ...formData, ex: formData.ex.filter((_, j) => j !== i) })
//               }
//             >
//               ❌
//             </button>
//           </div>
//         ))}

//         <h3 className="font-semibold mt-2">OS Cities</h3>
//         {formData.os.map((city, i) => (
//           <div key={i} className="flex items-center gap-2">
//             <span>{city}</span>
//             <button
//               className="text-red-500"
//               onClick={() =>
//                 setFormData({ ...formData, os: formData.os.filter((_, j) => j !== i) })
//               }
//             >
//               ❌
//             </button>
//           </div>
//         ))}
//       </div>

//       {/* Editable Table */}
//       <table className="w-full border">
//         <thead className="bg-gray-200">
//           <tr>
//             <th>City</th>
//             <th>Zone</th>
//             <th>Transport</th>
//             <th>KM's</th>
//             <th>Price/KM</th>
//             <th>Fare</th>
//             <th>DA</th>
//             <th>Actions</th>
//           </tr>
//         </thead>
//         <tbody>
//           {formData.fares.map((fare, index) => (
//             <tr key={index} className="border">
//               {["city", "zone", "transport", "km", "pricePerKm", "fare", "da"].map((field) => (
//                 <td key={field}>
//                   <input
//                     className="border p-1 w-full"
//                     value={fare[field]}
//                     onChange={(e) => handleFareChange(index, field, e.target.value)}
//                   />
//                 </td>
//               ))}
//               <td>
//                 <button
//                   className="text-red-500"
//                   onClick={() => handleDeleteFare(index)}
//                 >
//                   ❌
//                 </button>
//               </td>
//             </tr>
//           ))}
//         </tbody>
//       </table>

//       <button className="bg-blue-500 text-white px-3 py-1 mt-2 rounded" onClick={handleAddFare}>
//         + Add Row
//       </button>

//       <div className="mt-4">
//         <button
//           className="bg-green-500 text-white px-4 py-2 rounded"
//           onClick={() => onSave(formData)}
//         >
//           Save Changes
//         </button>
//       </div>
//     </div>
//   );
// };

// export default EditUserInfo;









// import React, { useEffect, useState } from "react";
// import axios from "axios";
// const API = process.env.REACT_APP_BACKEND_URL;


// const EditUserInfo = ({ userId }) => {
//   const [user, setUser] = useState(null);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     const fetchUser = async () => {
//       try {
//         const res = await axios.get(`${API}/api/admin/users/${userId}`);
//         setUser(res.data);
//       } catch (err) {
//         console.error("Error fetching user:", err);
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchUser();
//   }, [userId]);

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit User</h2>

//       {/* Username + Password */}
//       <div className="mb-4">
//         <p>
//           <strong>Username:</strong> {user.username}
//         </p>
//         <p>
//           <strong>Password:</strong> ********
//         </p>
//         <button className="bg-blue-500 text-white px-3 py-1 rounded">
//           Reset Password
//         </button>
//       </div>

//       {/* Ex + OS Cities with delete buttons */}
//       <div className="mb-4">
//         <h3 className="font-semibold">EX Cities</h3>
//         <ul>
//           {user.ex?.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button className="text-red-500">Delete</button>
//             </li>
//           ))}
//         </ul>

//         <h3 className="font-semibold mt-3">OS Cities</h3>
//         <ul>
//           {user.os?.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button className="text-red-500">Delete</button>
//             </li>
//           ))}
//         </ul>
//       </div>

//       {/* Editable table */}
//       <table className="w-full border border-gray-300">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border p-2">City</th>
//             <th className="border p-2">Zone</th>
//             <th className="border p-2">Transport</th>
//             <th className="border p-2">Km's</th>
//             <th className="border p-2">Price/Km</th>
//             <th className="border p-2">Fare</th>
//             <th className="border p-2">DA</th>
//             <th className="border p-2">Actions</th>
//           </tr>
//         </thead>
//         <tbody>
//           {user.fares &&
//             Object.entries(user.fares).map(([city, transports], i) => (
//               <tr key={i}>
//                 <td className="border p-2">{city}</td>
//                 <td className="border p-2">{transports.zone || "-"}</td>
//                 <td className="border p-2">
//                   {Object.keys(transports).join(", ")}
//                 </td>
//                 <td className="border p-2">{transports.km || "-"}</td>
//                 <td className="border p-2">{transports.pricePerKm || "-"}</td>
//                 <td className="border p-2">{transports.fare || "-"}</td>
//                 <td className="border p-2">{transports.da || "-"}</td>
//                 <td className="border p-2">
//                   <button className="text-blue-500 mr-2">Edit</button>
//                   <button className="text-red-500">Delete</button>
//                 </td>
//               </tr>
//             ))}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default EditUserInfo;







// import React, { useEffect, useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams(); // ✅ from route
//   const navigate = useNavigate();

//   const [user, setUser] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [editingCity, setEditingCity] = useState(null);
//   const [editRow, setEditRow] = useState({});
//   const [newPassword, setNewPassword] = useState("");


//   useEffect(() => {
//     const fetchUser = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/admin/user/${username}`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUser(res.data);
//       } catch (err) {
//         console.error("Error fetching user:", err);
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchUser();
//   }, [username]);

//   const handleResetPassword = async () => {
//   try {
//     const token = localStorage.getItem("token");
//     await axios.put(
//       `${API}/api/admin/reset-password/${username}`,
//       { newPassword }, // ✅ send typed password
//       { headers: { Authorization: `Bearer ${token}` } }
//     );
//     alert("Password reset successfully!");
//   } catch (err) {
//     console.error("Password reset failed:", err);
//   }
// };
//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user };
//       updated[type] = updated[type].filter((c) => c !== city);

//       setUser(updated);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleEdit = (city, row) => {
//     setEditingCity(city);
//     setEditRow(row);
//   };

//   const handleSave = async (city) => {
//     try {
//       const updated = { ...user };
//       updated.fares[city] = { ...editRow };

//       setUser(updated);
//       setEditingCity(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };
//       delete updated.fares[city];

//       setUser(updated);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>

//       {/* Username + Password */}
// <div className="mb-4">
//   <p>
//     <strong>Username:</strong> {user.username}
//   </p>
//   <p>
//     <strong>Password:</strong> ********
//   </p>

//   {/* New Password Input */}
//   <input
//     type="password"
//     placeholder="Enter new password"
//     value={newPassword}
//     onChange={(e) => setNewPassword(e.target.value)}
//     className="border px-2 py-1 rounded mr-2"
//   />

//   <button
//     className="bg-blue-500 text-white px-3 py-1 rounded"
//     onClick={handleResetPassword}
//     disabled={!newPassword} // disable button if empty
//   >
//     Reset Password
//   </button>
// </div>

//       {/* Ex + OS Cities with delete buttons */}
//       <div className="mb-4">
//         <h3 className="font-semibold">EX Cities</h3>
//         <ul>
//           {user.ex?.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button
//                 className="text-red-500"
//                 onClick={() => handleDeleteCity(city, "ex")}
//               >
//                 Delete
//               </button>
//             </li>
//           ))}
//         </ul>

//         <h3 className="font-semibold mt-3">OS Cities</h3>
//         <ul>
//           {user.os?.map((city, i) => (
//             <li key={i} className="flex justify-between items-center">
//               {city}
//               <button
//                 className="text-red-500"
//                 onClick={() => handleDeleteCity(city, "os")}
//               >
//                 Delete
//               </button>
//             </li>
//           ))}
//         </ul>
//       </div>

//       {/* Editable table */}
//       <table className="w-full border border-gray-300">
//         <thead>
//           <tr className="bg-gray-100">
//             <th className="border p-2">City</th>
//             <th className="border p-2">Zone</th>
//             <th className="border p-2">Transport</th>
//             <th className="border p-2">Km's</th>
//             <th className="border p-2">Price/Km</th>
//             <th className="border p-2">Fare</th>
//             <th className="border p-2">DA</th>
//             <th className="border p-2">Actions</th>
//           </tr>
//         </thead>
//         <tbody>
//           {user.fares &&
//             Object.entries(user.fares).map(([city, row], i) => (
//               <tr key={i}>
//                 <td className="border p-2">{city}</td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       value={editRow.zone || ""}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, zone: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.zone || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       value={editRow.transport || ""}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, transport: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.transport || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       type="number"
//                       value={editRow.km || 0}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, km: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.km || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       type="number"
//                       value={editRow.pricePerKm || 0}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, pricePerKm: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.pricePerKm || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       type="number"
//                       value={editRow.fare || 0}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, fare: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.fare || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <input
//                       type="number"
//                       value={editRow.da || 0}
//                       onChange={(e) =>
//                         setEditRow({ ...editRow, da: e.target.value })
//                       }
//                     />
//                   ) : (
//                     row.da || "-"
//                   )}
//                 </td>
//                 <td className="border p-2">
//                   {editingCity === city ? (
//                     <>
//                       <button
//                         className="text-green-600 mr-2"
//                         onClick={() => handleSave(city)}
//                       >
//                         Save
//                       </button>
//                       <button
//                         className="text-gray-600"
//                         onClick={() => setEditingCity(null)}
//                       >
//                         Cancel
//                       </button>
//                     </>
//                   ) : (
//                     <>
//                       <button
//                         className="text-blue-500 mr-2"
//                         onClick={() => handleEdit(city, row)}
//                       >
//                         Edit
//                       </button>
//                       <button
//                         className="text-red-500"
//                         onClick={() => handleDeleteRow(city)}
//                       >
//                         Delete
//                       </button>
//                     </>
//                   )}
//                 </td>
//               </tr>
//             ))}
//         </tbody>
//       </table>

//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;





// // pages/EditUserInfo.js
// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingCity, setEditingCity] = useState(null);
//   const [editRow, setEditRow] = useState({});

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user, [type]: user[type].filter((c) => c !== city) };
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleSave = async (city) => {
//     try {
//       const updated = { ...user, fares: { ...user.fares, [city]: editRow } };
//       setUser(updated);
//       setEditingCity(null);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };
//       delete updated.fares[city];
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>

//       <p><strong>Username:</strong> {user.username}</p>
//       <PasswordReset username={username} />

//       <UserCities user={user} onDelete={handleDeleteCity} />

//       <FaresTable
//         fares={user.fares}
//         editingCity={editingCity}
//         editRow={editRow}
//         onEdit={(city, row) => { setEditingCity(city); setEditRow(row); }}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingCity(null)}
//         onDelete={handleDeleteRow}
//       />

//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;













// // pages/EditUserInfo.js
// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingCity, setEditingCity] = useState(null);
//   const [editRow, setEditRow] = useState({});

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user, [type]: user[type].filter((c) => c !== city) };
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleEdit = (city) => {
//     setEditingCity(city);

//     // 🔑 map DB values → editable row
//     setEditRow({
//       zone: "", // optional
//       transport: "", // optional
//       km: user.kms?.[city] || 0,
//       pricePerKm: "", // not directly in DB
//       fare: user.fares?.[city]?.bike || 0, // taking bike as main fare
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city) => {
//     try {
//       const updated = { ...user };

//       // 🔑 update DB structure with new values
//       if (editRow.km !== undefined) updated.kms[city] = Number(editRow.km);
//       if (editRow.da !== undefined) updated.da[city] = Number(editRow.da);

//       updated.fares[city] = {
//         ...updated.fares[city],
//         bike: Number(editRow.fare) || 0,
//       };

//       setUser(updated);
//       setEditingCity(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };

//       // remove city from all maps
//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // 🔑 transform DB → table format for display
//   const tableData = {};
//   Object.keys(user.fares || {}).forEach((city) => {
//     tableData[city] = {
//       zone: "",
//       transport: "",
//       km: user.kms?.[city] || 0,
//       pricePerKm: "",
//       fare: user.fares?.[city]?.bike || 0,
//       da: user.da?.[city] || 0,
//     };
//   });

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>

//       <p><strong>Username:</strong> {user.username}</p>
//       <PasswordReset username={username} />

//       <UserCities user={user} onDelete={handleDeleteCity} />

//       <FaresTable
//         fares={tableData}
//         editingCity={editingCity}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingCity(null)}
//         onDelete={handleDeleteRow}
//       />

//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;






// // pages/EditUserInfo.js
// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingCity, setEditingCity] = useState(null);
//   const [editRow, setEditRow] = useState({});

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user, [type]: user[type].filter((c) => c !== city) };
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleEdit = (city) => {
//     setEditingCity(city);

//     // prefill editable row with existing values
//     setEditRow({
//       zone: "", // not in DB, keep empty
//       transport: "", // not in DB, keep empty
//       km: user.kms?.[city] || 0,
//       pricePerKm: "", // derived, not in DB
//       fare: user.fares?.[city]?.bike || 0,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city) => {
//     try {
//       const updated = { ...user };

//       // update DB values (only km, fare, da, because schema doesn’t have zone/transport/pricePerKm)
//       if (editRow.km !== undefined) updated.kms[city] = Number(editRow.km);
//       if (editRow.da !== undefined) updated.da[city] = Number(editRow.da);

//       updated.fares[city] = {
//         ...updated.fares[city],
//         bike: Number(editRow.fare) || 0,
//       };

//       setUser(updated);
//       setEditingCity(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };

//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // transform DB → table-friendly format
//   const tableData = {};
//   Object.keys(user.fares || {}).forEach((city) => {
//     tableData[city] = {
//       zone: "", // just for UI
//       transport: "", // just for UI
//       km: user.kms?.[city] || 0,
//       pricePerKm: "", // not in DB
//       fare: user.fares?.[city]?.bike || 0,
//       da: user.da?.[city] || 0,
//     };
//   });

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>

//       <p><strong>Username:</strong> {user.username}</p>
//       <PasswordReset username={username} />

//       <UserCities user={user} onDelete={handleDeleteCity} />

//       <FaresTable
//         fares={tableData}
//         editingCity={editingCity}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingCity(null)}
//         onDelete={handleDeleteRow}
//       />

//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;














// // pages/EditUserInfo.js
// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingCity, setEditingCity] = useState(null);
//   const [editRow, setEditRow] = useState({});

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user, [type]: user[type].filter((c) => c !== city) };
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleEdit = (city) => {
//     setEditingCity(city);

//     // Prefill editable row with existing values (zone/transport are read-only)
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       pricePerKm: "",
//       fare: user.fares?.[city]?.bike || 0,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city) => {
//     try {
//       const updated = { ...user };

//       // Update DB values (only km, fare, da)
//       if (editRow.km !== undefined) updated.kms[city] = Number(editRow.km);
//       if (editRow.da !== undefined) updated.da[city] = Number(editRow.da);

//       updated.fares[city] = {
//         ...updated.fares[city],
//         bike: Number(editRow.fare) || 0,
//       };

//       setUser(updated);
//       setEditingCity(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };

//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Transform DB → table-friendly format with derived zone and transport
//   const tableData = {};
//   Object.keys(user.fares || {}).forEach((city) => {
//     const cityFares = user.fares[city] || {};

//     // Determine zone dynamically
//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     // Determine transport modes with non-zero fare
//     const transportModes = Object.keys(cityFares).filter(
//       (mode) => cityFares[mode] > 0
//     );

//     tableData[city] = {
//       zone,
//       transport: transportModes.length ? transportModes.join(", ") : "-",
//       km: user.kms?.[city] || 0,
//       pricePerKm: "",
//       fare: cityFares.bike || 0, // editing bike as default
//       da: user.da?.[city] || 0,
//     };
//   });

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>

//       <p>
//         <strong>Username:</strong> {user.username}
//       </p>
//       <PasswordReset username={username} />

//       <UserCities user={user} onDelete={handleDeleteCity} />

//       <FaresTable
//         fares={tableData}
//         editingCity={editingCity}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingCity(null)}
//         onDelete={handleDeleteRow}
//       />

//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;















// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingRow, setEditingRow] = useState(null);
//   const [editRow, setEditRow] = useState({});

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user, [type]: user[type].filter((c) => c !== city) };
//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   const handleEdit = (city, transport) => {
//     setEditingRow(`${city}-${transport.mode}`);
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       fare: transport.fare,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city, mode) => {
//     try {
//       const updated = { ...user };
//       updated.kms[city] = Number(editRow.km);
//       updated.da[city] = Number(editRow.da);
//       updated.fares[city][mode] = Number(editRow.fare) || 0;

//       setUser(updated);
//       setEditingRow(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleDeleteRow = async (city) => {
//     try {
//       const updated = { ...user };
//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);
//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Transform DB → table-friendly format
//   const tableData = {};
//   Object.keys(user.fares || {}).forEach((city) => {
//     const cityFares = user.fares[city] || {};

//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode, idx, arr) => ({
//         mode,
//         fare: cityFares[mode],
//         isLast: idx === arr.length - 1, // so we show delete button only on last row
//       }));

//     tableData[city] = {
//       zone,
//       km: user.kms?.[city] || 0,
//       da: user.da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>
//       <p>
//         <strong>Username:</strong> {user.username}
//       </p>
//       <PasswordReset username={username} />
//       <UserCities user={user} onDelete={handleDeleteCity} />
//       <FaresTable
//         fares={tableData}
//         editingRow={editingRow}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingRow(null)}
//         onDelete={handleDeleteRow}
//       />
//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;














// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const navigate = useNavigate();
//   const { user, setUser, loading } = useUser(username);

//   const [editingRow, setEditingRow] = useState(null);
//   const [editRow, setEditRow] = useState({});
//   const [newRow, setNewRow] = useState({
//     city: "",
//     zone: "",
//     transport: "",
//     km: "",
//     fare: "",
//     da: "",
//   });

//   const handleEdit = (city, transport) => {
//     setEditingRow(`${city}-${transport.mode}`);
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       fare: transport.fare,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city, mode) => {
//     try {
//       const updated = { ...user };
//       updated.kms[city] = Number(editRow.km);
//       updated.da[city] = Number(editRow.da);
//       updated.fares[city][mode] = Number(editRow.fare) || 0;

//       setUser(updated);
//       setEditingRow(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleAddRow = async () => {
//     if (!newRow.city || !newRow.zone || !newRow.transport) {
//       alert("Please fill all required fields!");
//       return;
//     }

//     try {
//       const updated = { ...user };

//       // Add city to correct zone if not exists
//       if (newRow.zone === "EX" && !updated.ex.includes(newRow.city))
//         updated.ex.push(newRow.city);
//       if (newRow.zone === "OS" && !updated.os.includes(newRow.city))
//         updated.os.push(newRow.city);

//       // Initialize if city doesn't exist
//       if (!updated.fares[newRow.city]) {
//         updated.fares[newRow.city] = { bike: 0, bus: 0, train: 0 };
//       }

//       updated.fares[newRow.city][newRow.transport] = Number(newRow.fare);
//       updated.kms[newRow.city] = Number(newRow.km);
//       updated.da[newRow.city] = Number(newRow.da);

//       setUser(updated);
//       setNewRow({ city: "", zone: "", transport: "", km: "", fare: "", da: "" });

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error adding row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Build table data
//   const allCities = [user.hq, ...user.ex, ...user.os];
//   const tableData = {};

//   allCities.forEach((city) => {
//     const cityFares = user.fares?.[city] || { bike: 0, bus: 0, train: 0 };
//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));

//     tableData[city] = {
//       zone,
//       km: user.kms?.[city] || 0,
//       da: user.da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Edit Info - {username}</h2>
//       <p>
//         <strong>Username:</strong> {user.username}
//       </p>
//       <PasswordReset username={username} />
//       <UserCities user={user} />
//       <FaresTable
//         fares={tableData}
//         editingRow={editingRow}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingRow(null)}
//         onAddRow={handleAddRow}
//         newRow={newRow}
//         onChangeNewRow={setNewRow}
//       />
//       <button
//         className="mt-6 bg-gray-300 px-4 py-2 rounded"
//         onClick={() => navigate("/admin/dashboard")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default EditUserInfo;








// import React, { useState } from "react";
// import { useParams } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";
// import Layout from "../components/Layout"; // ✅ import Layout

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const { user, setUser, loading } = useUser(username);

//   const [editingRow, setEditingRow] = useState(null);
//   const [editRow, setEditRow] = useState({});
//   const [newRow, setNewRow] = useState({
//     city: "",
//     zone: "",
//     transport: "",
//     km: "",
//     fare: "",
//     da: "",
//   });

//   const handleEdit = (city, transport) => {
//     setEditingRow(`${city}-${transport.mode}`);
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       fare: transport.fare,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city, mode) => {
//     try {
//       const updated = { ...user };
//       updated.kms[city] = Number(editRow.km);
//       updated.da[city] = Number(editRow.da);
//       updated.fares[city][mode] = Number(editRow.fare) || 0;

//       setUser(updated);
//       setEditingRow(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleAddRow = async () => {
//     if (!newRow.city || !newRow.zone || !newRow.transport) {
//       alert("Please fill all required fields!");
//       return;
//     }

//     try {
//       const updated = { ...user };

//       // Add city to correct zone if not exists
//       if (newRow.zone === "EX" && !updated.ex.includes(newRow.city))
//         updated.ex.push(newRow.city);
//       if (newRow.zone === "OS" && !updated.os.includes(newRow.city))
//         updated.os.push(newRow.city);

//       // Initialize if city doesn't exist
//       if (!updated.fares[newRow.city]) {
//         updated.fares[newRow.city] = { bike: 0, bus: 0, train: 0 };
//       }

//       updated.fares[newRow.city][newRow.transport] = Number(newRow.fare);
//       updated.kms[newRow.city] = Number(newRow.km);
//       updated.da[newRow.city] = Number(newRow.da);

//       setUser(updated);
//       setNewRow({ city: "", zone: "", transport: "", km: "", fare: "", da: "" });

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error adding row:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Build table data
//   const allCities = [user.hq, ...user.ex, ...user.os];
//   const tableData = {};

//   allCities.forEach((city) => {
//     const cityFares = user.fares?.[city] || { bike: 0, bus: 0, train: 0 };
//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));

//     tableData[city] = {
//       zone,
//       km: user.kms?.[city] || 0,
//       da: user.da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <Layout title={`Edit Info - ${username}`}>
//       <p>
//         <strong>Username:</strong> {user.username}
//       </p>
//       <PasswordReset username={username} />
//       <UserCities user={user} />
//       <FaresTable
//         fares={tableData}
//         editingRow={editingRow}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingRow(null)}
//         onAddRow={handleAddRow}
//         newRow={newRow}
//         onChangeNewRow={setNewRow}
//       />
//     </Layout>
//   );
// };

// export default EditUserInfo;







// import React, { useState } from "react";
// import { useParams } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const { user, setUser, loading } = useUser(username);

//   const [editingRow, setEditingRow] = useState(null);
//   const [editRow, setEditRow] = useState({});
//   const [newRow, setNewRow] = useState({
//     city: "",
//     zone: "",
//     transport: "",
//     km: "",
//     fare: "",
//     da: "",
//   });

//   const handleEdit = (city, transport) => {
//     setEditingRow(`${city}-${transport.mode}`);
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       fare: transport.fare,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city, mode) => {
//     try {
//       const updated = { ...user };
//       updated.kms[city] = Number(editRow.km);
//       updated.da[city] = Number(editRow.da);
//       updated.fares[city][mode] = Number(editRow.fare) || 0;

//       setUser(updated);
//       setEditingRow(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleAddRow = async () => {
//     if (!newRow.city || !newRow.zone || !newRow.transport) {
//       alert("Please fill all required fields!");
//       return;
//     }

//     try {
//       const updated = { ...user };

//       // Add city to correct zone if not exists
//       if (newRow.zone === "EX" && !updated.ex.includes(newRow.city))
//         updated.ex.push(newRow.city);
//       if (newRow.zone === "OS" && !updated.os.includes(newRow.city))
//         updated.os.push(newRow.city);

//       // Initialize fares if city doesn't exist
//       if (!updated.fares[newRow.city]) {
//         updated.fares[newRow.city] = { bike: 0, bus: 0, train: 0 };
//       }

//       updated.fares[newRow.city][newRow.transport] = Number(newRow.fare);
//       updated.kms[newRow.city] = Number(newRow.km);
//       updated.da[newRow.city] = Number(newRow.da);

//       setUser(updated);
//       setNewRow({ city: "", zone: "", transport: "", km: "", fare: "", da: "" });

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error adding row:", err);
//     }
//   };

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user };

//       if (type === "hq") updated.hq = null;
//       if (type === "ex") updated.ex = updated.ex.filter((c) => c !== city);
//       if (type === "os") updated.os = updated.os.filter((c) => c !== city);

//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Build table data
//   const allCities = [user.hq, ...user.ex, ...user.os].filter(Boolean); // ✅ filter out nulls
//   const tableData = {};

//   allCities.forEach((city) => {
//     const cityFares = user.fares?.[city] || { bike: 0, bus: 0, train: 0 };
//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));

//     tableData[city] = {
//       zone,
//       km: user.kms?.[city] || 0,
//       da: user.da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <Layout title={`SRC - ${user.username}`}>
//       {/* User info card */}
//       <div className="bg-white p-4 rounded shadow mb-6">
//   <p className="mb-2 text-lg">
//     <strong>Username:</strong> {user.username}
//   </p>
//   <PasswordReset username={user.username} />
// </div>

//       {/* User cities management */}
//       <UserCities user={user} onDelete={handleDeleteCity} />

//       {/* Fares table */}
//       <FaresTable
//         fares={tableData}
//         editingRow={editingRow}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingRow(null)}
//         onAddRow={handleAddRow}
//         newRow={newRow}
//         onChangeNewRow={setNewRow}
//       />
//     </Layout>
//   );
// };

// export default EditUserInfo;




// import React, { useState } from "react";
// import { useParams } from "react-router-dom";
// import axios from "axios";
// import { useUser } from "../hooks/useUser";
// import PasswordReset from "../components/PasswordReset";
// import UserCities from "../components/UserCities";
// import FaresTable from "../components/FaresTable";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// const EditUserInfo = () => {
//   const { username } = useParams();
//   const { user, setUser, loading } = useUser(username);

//   const [editingRow, setEditingRow] = useState(null);
//   const [editRow, setEditRow] = useState({});
//   const [newRow, setNewRow] = useState({
//     city: "",
//     zone: "",
//     transport: "",
//     km: "",
//     fare: "",
//     da: "",
//   });

//   const handleEdit = (city, transport) => {
//     setEditingRow(`${city}-${transport.mode}`);
//     setEditRow({
//       km: user.kms?.[city] || 0,
//       fare: transport.fare,
//       da: user.da?.[city] || 0,
//     });
//   };

//   const handleSave = async (city, mode) => {
//     try {
//       const updated = { ...user };
//       updated.kms[city] = Number(editRow.km);
//       updated.da[city] = Number(editRow.da);
//       updated.fares[city][mode] = Number(editRow.fare) || 0;

//       setUser(updated);
//       setEditingRow(null);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error saving row:", err);
//     }
//   };

//   const handleAddRow = async () => {
//     if (!newRow.city || !newRow.zone || !newRow.transport) {
//       alert("Please fill all required fields!");
//       return;
//     }

//     try {
//       const updated = { ...user };

//       if (newRow.zone === "EX" && !updated.ex.includes(newRow.city))
//         updated.ex.push(newRow.city);
//       if (newRow.zone === "OS" && !updated.os.includes(newRow.city))
//         updated.os.push(newRow.city);

//       if (!updated.fares[newRow.city]) {
//         updated.fares[newRow.city] = { bike: 0, bus: 0, train: 0 };
//       }

//       updated.fares[newRow.city][newRow.transport] = Number(newRow.fare);
//       updated.kms[newRow.city] = Number(newRow.km);
//       updated.da[newRow.city] = Number(newRow.da);

//       setUser(updated);
//       setNewRow({ city: "", zone: "", transport: "", km: "", fare: "", da: "" });

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error adding row:", err);
//     }
//   };

//   const handleDeleteCity = async (city, type) => {
//     try {
//       const updated = { ...user };

//       if (type === "hq") updated.hq = null;
//       if (type === "ex") updated.ex = updated.ex.filter((c) => c !== city);
//       if (type === "os") updated.os = updated.os.filter((c) => c !== city);

//       delete updated.fares[city];
//       delete updated.kms[city];
//       delete updated.da[city];

//       setUser(updated);

//       const token = localStorage.getItem("token");
//       await axios.put(`${API}/api/admin/edit-user/${user.username}`, updated, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//     } catch (err) {
//       console.error("Error deleting city:", err);
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!user) return <p>User not found.</p>;

//   // Build table data
//   const allCities = [user.hq, ...user.ex, ...user.os].filter(Boolean);
//   const tableData = {};

//   allCities.forEach((city) => {
//     const cityFares = user.fares?.[city] || { bike: 0, bus: 0, train: 0 };
//     let zone = "";
//     if (city === user.hq) zone = "HQ";
//     else if (user.ex.includes(city)) zone = "EX";
//     else if (user.os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));

//     tableData[city] = {
//       zone,
//       km: user.kms?.[city] || 0,
//       da: user.da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <Layout
//       title={`SRC - ${user.username}`}
//       backTo={`/admin/statement/${user.username}`} // ✅ dynamic back button
//     >
//       {/* User info card */}
//       <div className="bg-white p-4 rounded shadow mb-6">
//         <p className="mb-2 text-lg">
//           <strong>Username:</strong> {user.username}
//         </p>
//         <PasswordReset username={user.username} />
//       </div>

//       {/* User cities management */}
//       <UserCities user={user} onDelete={handleDeleteCity} />

//       {/* Fares table */}
//       <FaresTable
//         fares={tableData}
//         editingRow={editingRow}
//         editRow={editRow}
//         onEdit={handleEdit}
//         onChangeRow={setEditRow}
//         onSave={handleSave}
//         onCancel={() => setEditingRow(null)}
//         onAddRow={handleAddRow}
//         newRow={newRow}
//         onChangeNewRow={setNewRow}
//       />
//     </Layout>
//   );
// };

// export default EditUserInfo;








// // pages/ExpenseStatement.jsx
// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import UserLogTable from "../components/UserLogTable";
// const API = process.env.REACT_APP_BACKEND_URL;


// const ExpenseStatement = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
  

//   const [normalTotal, setNormalTotal] = useState(0);
//   const [otherTotal, setOtherTotal] = useState(0);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const headers = { Authorization: `Bearer ${token}` };

//         // User Info
//         const userRes = await axios.get(`${API}/api/user/info`, { headers });
//         setUserInfo(userRes.data);

//         // Normal Expenses
//         const expenseRes = await axios.get(`${API}/api/user/expenses`, { headers });
//         const data = expenseRes.data || [];

//         const formatted = data.map((e) => ({
//           id: e.id,
//           date: e.date,
//           time: e.time,
//           location: e.location,
//           zone: e.zone,
//           km: e.km || 0,
//           transport: e.transport,
//           fare: e.fare,
//           da: e.da,
//           extraTA:e.extraTA,
//           extraDA:e.extraDA,
//           total: e.total,
//           locationDesc: e.locationDesc, // ⬅️ from backend
//           taDesc: e.taDesc,             // ⬅️ from backend
//           daDesc: e.daDesc,             // ⬅️ from backend
//         }));

//         setExpenses(formatted);
//         const normalSum = formatted.reduce((sum, e) => sum + (Number(e.total) || 0), 0);
//         setNormalTotal(normalSum);

//         // Other Expenses
//         const otherRes = await axios.get(`${API}/api/user/other-expenses`, { headers });
//         const otherData = otherRes.data || [];

//         setOtherExpenses(otherData);
//         const otherSum = otherData.reduce((sum, entry) => sum + (entry.amount || 0), 0);
//         setOtherTotal(otherSum);
//       } catch (err) {
//         console.error("Failed to fetch data:", err);
//       }
//     };

//     fetchData();
//   }, []);

//   // ---- FUNCTIONS ----
//   const showDateDesc = (date) => {
//   const dayEntries = expenses.filter(
//     (e) => e.date.slice(0, 10) === date.slice(0, 10)
//   );
//   if (dayEntries.length > 0 && dayEntries[0].locationDesc) {
//     alert(`Date: ${date}\n\n${dayEntries[0].locationDesc}`);
//   } else {
//     alert(`No description found for ${date}`);
//   }
// };

//   const showTADesc = (expenseId) => {
//     const entry = expenses.find((e) => e.id === expenseId);
//     if (entry && entry.taDesc) {
//       alert(`TA Description:\n\n${entry.taDesc}`);
//     } else {
//       alert("No TA description found.");
//     }
//   };

//   const showDADesc = (expenseId) => {
//     const entry = expenses.find((e) => e.id === expenseId);
//     if (entry && entry.daDesc) {
//       alert(`DA Description:\n\n${entry.daDesc}`);
//     } else {
//       alert("No DA description found.");
//     }
//   };

//   // ---- UI ----
//   const currentMonth = new Date().toLocaleString("default", {
//     month: "long",
//     year: "numeric",
//   });

//   return (
//     <div className="p-6 max-w-6xl mx-auto">
//       <div className="flex justify-between items-start mb-4">
//         <div>
//           <h1 className="text-2xl font-bold mb-1">Expense Statement</h1>
//           {userInfo && (
//             <div className="text-gray-700 text-sm">
//               <p><strong>Username:</strong> {userInfo.username}</p>
//               <p><strong>HQ:</strong> {userInfo.hq}</p>
//               <p><strong>Month:</strong> {currentMonth}</p>
//             </div>
//           )}
//         </div>
//         <div className="text-right">
//           <h2 className="text-xl font-bold text-green-700">
//             Grand Total: ₹{normalTotal + otherTotal}
//           </h2>
//         </div>
//       </div>

//       {/* Normal Expense Table */}
//       <div className="mb-12">
//         <h2 className="text-lg font-semibold mb-2">General Expenses</h2>
//         <UserLogTable
//           expenses={expenses}
//           showDateDesc={showDateDesc}
//           showTADesc={showTADesc}
//           showDADesc={showDADesc}
//         />
//         {expenses.length > 0 && (
//           <div className="text-right font-bold mt-2">
//             Subtotal: ₹{normalTotal}
//           </div>
//         )}
//       </div>

//       {/* Other Expenses Table */}
//       <div>
//         <h2 className="text-lg font-semibold mb-2">Other Expenses</h2>
//         {otherExpenses.length === 0 ? (
//           <p className="text-gray-500">No other expenses recorded.</p>
//         ) : (
//           <div className="overflow-x-auto">
//             <table className="w-full border border-gray-300 text-sm">
//               <thead className="bg-gray-100">
//                 <tr>
//                   <th className="px-4 py-2 border">Date</th>
//                   <th className="px-4 py-2 border">Amounts (₹)</th>
//                   <th className="px-4 py-2 border">Descriptions</th>
//                   <th className="px-4 py-2 border">Total</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {Object.entries(
//                   otherExpenses.reduce((acc, entry) => {
//                     if (!acc[entry.date]) acc[entry.date] = [];
//                     acc[entry.date].push(entry);
//                     return acc;
//                   }, {})
//                 ).map(([date, entries], idx) => {
//                   const total = entries.reduce((sum, e) => sum + (e.amount || 0), 0);
//                   return (
//                     <tr key={idx} className="border-t align-top">
//                       <td className="px-4 py-2 border">{date}</td>
//                       <td className="px-4 py-2 border">
//                         {entries.map((e, i) => (
//                           <div key={i}>₹{e.amount}</div>
//                         ))}
//                       </td>
//                       <td className="px-4 py-2 border">
//                         {entries.map((e, i) => (
//                           <div key={i}>{e.description}</div>
//                         ))}
//                       </td>
//                       <td className="px-4 py-2 border font-semibold">₹{total}</td>
//                     </tr>
//                   );
//                 })}
//               </tbody>
//               <tfoot>
//                 <tr>
//                   <td colSpan={3} className="text-right font-bold px-4 py-2 border">
//                     Subtotal
//                   </td>
//                   <td className="font-bold px-4 py-2 border">₹{otherTotal}</td>
//                 </tr>
//               </tfoot>
//             </table>
//           </div>
//         )}
//       </div>

//       <button
//         className="mt-6 px-4 py-2 bg-gray-300 text-black rounded"
//         onClick={() => navigate(`/mode-selector`)}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default ExpenseStatement;








// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout";
// import UserLogTable from "../components/UserLogTable";

// const API = process.env.REACT_APP_BACKEND_URL;

// const ExpenseStatement = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [expenses, setExpenses] = useState([]);
//   const [otherExpenses, setOtherExpenses] = useState([]);
//   const [normalTotal, setNormalTotal] = useState(0);
//   const [otherTotal, setOtherTotal] = useState(0);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const headers = { Authorization: `Bearer ${token}` };

//         // User Info
//         const userRes = await axios.get(`${API}/api/user/info`, { headers });
//         setUserInfo(userRes.data);

//         // Normal Expenses
//         const expenseRes = await axios.get(`${API}/api/user/expenses`, { headers });
//         const data = expenseRes.data || [];
//         const formatted = data.map((e) => ({
//           id: e.id,
//           date: e.date,
//           time: e.time,
//           location: e.location,
//           zone: e.zone,
//           km: e.km || 0,
//           transport: e.transport,
//           fare: e.fare,
//           da: e.da,
//           extraTA: e.extraTA,
//           extraDA: e.extraDA,
//           total: e.total,
//           locationDesc: e.locationDesc,
//           taDesc: e.taDesc,
//           daDesc: e.daDesc,
//           isNw: e.isNW,
//         }));
//         setExpenses(formatted);
//         setNormalTotal(formatted.reduce((sum, e) => sum + (Number(e.total) || 0), 0));

//         // Other Expenses
//         const otherRes = await axios.get(`${API}/api/user/other-expenses`, { headers });
//         const otherData = otherRes.data || [];
//         setOtherExpenses(otherData);
//         setOtherTotal(otherData.reduce((sum, entry) => sum + (entry.amount || 0), 0));
//       } catch (err) {
//         console.error("Failed to fetch data:", err);
//       }
//     };
//     fetchData();
//   }, []);

//   // ---- Functions ----
//   const showDateDesc = (date) => {
//     const dayEntries = expenses.filter((e) => e.date.slice(0, 10) === date.slice(0, 10));
//     if (dayEntries.length > 0 && dayEntries[0].locationDesc) {
//       alert(`Date: ${date}\n\n${dayEntries[0].locationDesc}`);
//     } else {
//       alert(`No description found for ${date}`);
//     }
//   };

//   const showTADesc = (expenseId) => {
//     const entry = expenses.find((e) => e.id === expenseId);
//     if (entry && entry.taDesc) alert(`TA Description:\n\n${entry.taDesc}`);
//     else alert("No TA description found.");
//   };

//   const showDADesc = (expenseId) => {
//     const entry = expenses.find((e) => e.id === expenseId);
//     if (entry && entry.daDesc) alert(`DA Description:\n\n${entry.daDesc}`);
//     else alert("No DA description found.");
//   };

//   const currentMonth = new Date().toLocaleString("default", {
//     month: "long",
//     year: "numeric",
//   });

//   return (
//     <Layout title="Expense Statement" backTo="/mode-selector">
//       <div className="space-y-8 max-w-6xl mx-auto">
//         {/* Header Card */}
//         <div className="bg-white shadow-lg rounded-2xl p-6 flex flex-col md:flex-row justify-between items-start md:items-center">
//           <div>
//             <h1 className="text-2xl font-bold mb-2">Expense Statement</h1>
//             {userInfo && (
//               <div className="text-gray-700 text-sm space-y-1">
//                 <p><strong>Username:</strong> {userInfo.username}</p>
//                 <p><strong>HQ:</strong> {userInfo.hq}</p>
//                 <p><strong>Month:</strong> {currentMonth}</p>
//               </div>
//             )}
//           </div>
//           <div className="mt-4 md:mt-0 text-right">
//             <h2 className="text-xl font-bold text-green-700">
//               Grand Total: ₹{normalTotal + otherTotal}
//             </h2>
//           </div>
//         </div>

//         {/* General Expenses Table */}
//         <div className="bg-white shadow-lg rounded-2xl p-6">
//           <h2 className="text-xl font-semibold mb-4">General Expenses</h2>
//           <UserLogTable
//             expenses={expenses}
//             showDateDesc={showDateDesc}
//             showTADesc={showTADesc}
//             showDADesc={showDADesc}
//           />
//           {expenses.length > 0 && (
//             <div className="text-right font-bold mt-3">
//               Subtotal: ₹{normalTotal}
//             </div>
//           )}
//         </div>

//         {/* Other Expenses Table */}
//         <div className="bg-white shadow-lg rounded-2xl p-6">
//           <h2 className="text-xl font-semibold mb-4">Other Expenses</h2>
//           {otherExpenses.length === 0 ? (
//             <p className="text-gray-500">No other expenses recorded.</p>
//           ) : (
//             <div className="overflow-x-auto">
//               <table className="w-full border border-gray-300 text-sm">
//                 <thead className="bg-gray-100">
//                   <tr>
//                     <th className="px-4 py-2 border">Date</th>
//                     <th className="px-4 py-2 border">Amounts (₹)</th>
//                     <th className="px-4 py-2 border">Descriptions</th>
//                     <th className="px-4 py-2 border">Total</th>
//                   </tr>
//                 </thead>
//                 <tbody>
//                   {Object.entries(
//                     otherExpenses.reduce((acc, entry) => {
//                       if (!acc[entry.date]) acc[entry.date] = [];
//                       acc[entry.date].push(entry);
//                       return acc;
//                     }, {})
//                   ).map(([date, entries], idx) => {
//                     const total = entries.reduce((sum, e) => sum + (e.amount || 0), 0);
//                     return (
//                       <tr key={idx} className="border-t align-top">
//                         <td className="px-4 py-2 border">{date}</td>
//                         <td className="px-4 py-2 border">
//                           {entries.map((e, i) => (
//                             <div key={i}>₹{e.amount}</div>
//                           ))}
//                         </td>
//                         <td className="px-4 py-2 border">
//                           {entries.map((e, i) => (
//                             <div key={i}>{e.description}</div>
//                           ))}
//                         </td>
//                         <td className="px-4 py-2 border font-semibold">₹{total}</td>
//                       </tr>
//                     );
//                   })}
//                 </tbody>
//                 <tfoot>
//                   <tr>
//                     <td colSpan={3} className="text-right font-bold px-4 py-2 border">
//                       Subtotal
//                     </td>
//                     <td className="font-bold px-4 py-2 border">₹{otherTotal}</td>
//                   </tr>
//                 </tfoot>
//               </table>
//             </div>
//           )}
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default ExpenseStatement;





// import React, { useEffect, useState } from "react";
// import { useNavigate } from "react-router-dom";
// import axios from "axios";
// import { getUserLocation, getCityFromCoords } from "../utils/getCityFromCoords";
// import { getZone, getTotal } from "../utils/helpers";
// const API = process.env.REACT_APP_BACKEND_URL;


// const FieldWorkPage = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [logs, setLogs] = useState([]);
//   const [transport, setTransport] = useState("");
//   const [multiPlaceData, setMultiPlaceData] = useState(null);
//   const navigate = useNavigate();
  

//   useEffect(() => {
//     const fetchUserData = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const headers = { Authorization: `Bearer ${token}` };
//         const res = await axios.get(`${API}/api/user/info`, { headers });
//         setUserInfo(res.data);
//       } catch (err) {
//         console.error("Error fetching user info:", err);
//       }
//     };
//     fetchUserData();
//   }, []);

//   const cleanCityName = (rawCity) => {
//     if (!rawCity || !userInfo) return "Unknown";
//     const normalized = rawCity.toLowerCase();
//     const allCities = [userInfo.hq, ...(userInfo.ex || []), ...(userInfo.os || [])];
//     return (
//       allCities.find((city) => normalized.includes(city.toLowerCase().trim())) ||
//       rawCity ||
//       "Unknown"
//     );
//   };

//   const handleRecord = async () => {
//   try {
//     const now = new Date();
//     const coords = await getUserLocation();
//     const { city: rawCity, fullAddress } = await getCityFromCoords(coords);

//     console.log("📍 Full Address:", fullAddress);
//     console.log("🏙️ City:", rawCity);

//     const city = cleanCityName(rawCity);
//     const zone = getZone(city, userInfo);

//     let fare = 0;
//     let da = userInfo.da?.[city] || 0;
//     let kms = userInfo.kms?.[city] ?? 0;
//     let selectedTransport = city !== userInfo.hq ? "" : "-";

//     const date = now.toLocaleDateString("en-GB");
//     const time = now.toLocaleTimeString();

//     const newLog = {
//       date,
//       time,
//       location: city,
//       zone,
//       km: kms,
//       transport: selectedTransport,
//       fare,
//       da,
//       total: getTotal(fare, da, 0),
//       isSaved: false,
//     };

//     setLogs([newLog]);
//     setTransport(selectedTransport);
//   } catch (err) {
//     console.error("Location fetch failed:", err);
//     alert("Failed to fetch location. Please enable GPS.");
//   }
// };


//   const handleMultiplePlacesRecord = async () => {
//     try {
//       const now = new Date();
//       const coords = await getUserLocation();
// const { city: rawCity, fullAddress } = await getCityFromCoords(coords);
// console.log("📍 Full Address:", fullAddress);
// console.log("🏙️ City:", rawCity);
//       const city = cleanCityName(rawCity);
//       const zone = getZone(city, userInfo);
//       const kms = userInfo.kms?.[city] ?? 0;

//       setMultiPlaceData({
//         date: now.toLocaleDateString("en-GB"),
//         time: now.toLocaleTimeString(),
//         location: city,
//         zone,
//         km: kms,
//         transport: "",
//         fare: "",
//         da: "",
//         description: "",
//       });
//     } catch (err) {
//       console.error("Multi-place location fetch failed:", err);
//       alert("Failed to fetch location. Please enable GPS.");
//     }
//   };

//   const handleApplyTransport = () => {
//     if (!userInfo || logs.length === 0) return;
//     const updated = [...logs];
//     const city = updated[0].location;
//     if (city === userInfo.hq) return;
//     const fare = userInfo.fares?.[city]?.[transport] || 0;
//     const kms = userInfo.kms?.[city] ?? 0;
//     updated[0].transport = transport;
//     updated[0].fare = fare;
//     updated[0].km = kms;
//     updated[0].total = getTotal(fare, updated[0].da, 0);
//     setLogs(updated);
//   };

//   const handleSaveExpenses = async () => {
//     if (logs.length === 0 || logs[0].isSaved) {
//       alert("Nothing to save.");
//       return;
//     }
//     const log = logs[0];
//     const payload = {
//       date: log.date,
//       time: log.time,
//       location: log.location,
//       zone: log.zone,
//       km: log.km,
//       transport: log.transport,
//       fare: log.fare,
//       da: log.da,
//       total: log.total,
//     };
//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/user/add-expense`, payload, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//       alert("Expense saved!");
//       setLogs([{ ...log, isSaved: true }]);
//     } catch (err) {
//       console.error("Error saving field work:", err);
//       if (err.response && err.response.data && err.response.data.msg) {
//         alert(err.response.data.msg);
//       } else {
//         alert("Failed to save. Please try again.");
//       }
//     }
//   };

//   const handleSaveMultiPlace = async () => {
//     if (!multiPlaceData) {
//       alert("No multi-place data to save.");
//       return;
//     }
//     if (multiPlaceData.fare === "" || multiPlaceData.da === "") {
//       alert("Please fill fare and DA.");
//       return;
//     }

//     const payload = {
//       date: multiPlaceData.date,
//       time: multiPlaceData.time,
//       location: multiPlaceData.location,
//       zone: multiPlaceData.zone,
//       km: multiPlaceData.km,
//       transport: multiPlaceData.transport || "",
//       fare: Number(multiPlaceData.fare),
//       da: Number(multiPlaceData.da),
//       total: Number(multiPlaceData.fare) + Number(multiPlaceData.da),
//       isSpecial: true,
//       locationDesc: multiPlaceData.description ?? null,
//     };

//     try {
//       const token = localStorage.getItem("token");
//       const headers = { Authorization: `Bearer ${token}` };
//       await axios.post(`${API}/api/user/add-expense`, payload, { headers });

//       alert("Multi-place expense saved! Marked as special.");
//       setMultiPlaceData(null);
//     } catch (err) {
//       console.error("Error saving multi-place:", err);
//       alert("Failed to save multi-place expense.");
//     }
//   };

//   if (!userInfo) return <p className="p-6">Loading user info...</p>;

//   const currentMonth = new Date().toLocaleString("default", { month: "long", year: "numeric" });
//   const currentCity = logs[0]?.location || "";
//   const isHQ = currentCity === userInfo.hq;

//   return (
//     <div className="p-6 relative">
//       <h1 className="text-2xl font-bold mb-2">User Dashboard</h1>
//       <p className="mb-4">
//         <strong>Username:</strong> {userInfo.username} <br />
//         <strong>HQ:</strong> {userInfo.hq} <br />
//         <strong>Month:</strong> {currentMonth}
//       </p>

//       <div className="flex flex-wrap gap-4 mb-6 items-center">
//         <button onClick={handleRecord} className="bg-purple-600 text-white px-4 py-2 rounded">
//           Press for Login Place
//         </button>

//         {!isHQ && (
//           <>
//             <select
//               value={transport}
//               onChange={(e) => setTransport(e.target.value)}
//               className="border px-3 py-2 rounded"
//             >
//               <option value="">Select</option>
//               <option value="bike">Bike</option>
//               <option value="bus">Bus</option>
//               <option value="train">Train</option>
//             </select>

//             <button
//               onClick={handleApplyTransport}
//               className="bg-yellow-500 text-white px-4 py-2 rounded"
//             >
//               Confirm Mode of Transport
//             </button>
//           </>
//         )}

//         {isHQ && <span className="text-gray-600 font-medium">HQ detected: No transport needed</span>}

//         <button
//           onClick={handleMultiplePlacesRecord}
//           className="bg-blue-500 text-white px-4 py-2 rounded"
//         >
//           Press for Multiple Places
//         </button>
//       </div>

//       {/* Local Table instead of LogTable.jsx */}
//       {logs.length > 0 && (
//         <table className="w-full border mt-4">
//           <thead>
//             <tr className="bg-gray-200">
//               <th className="border px-2 py-1">Date</th>
//               <th className="border px-2 py-1">Time</th>
//               <th className="border px-2 py-1">Location</th>
//               <th className="border px-2 py-1">Zone</th>
//               <th className="border px-2 py-1">KM</th>
//               <th className="border px-2 py-1">Transport</th>
//               <th className="border px-2 py-1">Fare</th>
//               <th className="border px-2 py-1">DA</th>
//               <th className="border px-2 py-1">Total</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.map((log, idx) => (
//               <tr key={idx}>
//                 <td className="border px-2 py-1">{log.date}</td>
//                 <td className="border px-2 py-1">{log.time}</td>
//                 <td className="border px-2 py-1">{log.location}</td>
//                 <td className="border px-2 py-1">{log.zone}</td>
//                 <td className="border px-2 py-1">{log.km}</td>
//                 <td className="border px-2 py-1">{log.transport}</td>
//                 <td className="border px-2 py-1">{log.fare}</td>
//                 <td className="border px-2 py-1">{log.da}</td>
//                 <td className="border px-2 py-1">{log.total}</td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       )}

//       {logs.length > 0 && !logs[0].isSaved && (
//         <div className="mt-4">
//           <button
//             onClick={handleSaveExpenses}
//             className="bg-green-600 text-white px-6 py-2 rounded"
//           >
//             Save Expenses
//           </button>
//         </div>
//       )}

//       {multiPlaceData && (
//         <div className="mt-6 p-4 border rounded bg-gray-50">
//           <h3 className="text-lg font-semibold mb-2">Multi-Place Entry</h3>
//           <p>
//             <strong>Date:</strong> {multiPlaceData.date} | <strong>Time:</strong>{" "}
//             {multiPlaceData.time}
//           </p>
//           <p>
//             <strong>Location:</strong> {multiPlaceData.location} |{" "}
//             <strong>Zone:</strong> {multiPlaceData.zone} | <strong>KMs:</strong>{" "}
//             {multiPlaceData.km}
//           </p>

//           <select
//             value={multiPlaceData.transport}
//             onChange={(e) =>
//               setMultiPlaceData({ ...multiPlaceData, transport: e.target.value })
//             }
//             className="border px-3 py-2 rounded mt-2 w-full"
//           >
//             <option value="">Select Mode of Transport</option>
//             <option value="bike">Bike</option>
//             <option value="bus">Bus</option>
//             <option value="train">Train</option>
//           </select>

//           <input
//             type="number"
//             placeholder="Fare"
//             value={multiPlaceData.fare}
//             onChange={(e) =>
//               setMultiPlaceData({ ...multiPlaceData, fare: e.target.value })
//             }
//             className="border px-3 py-2 rounded mt-2 w-full"
//           />
//           <input
//             type="number"
//             placeholder="DA"
//             value={multiPlaceData.da}
//             onChange={(e) =>
//               setMultiPlaceData({ ...multiPlaceData, da: e.target.value })
//             }
//             className="border px-3 py-2 rounded mt-2 w-full"
//           />
//           <textarea
//             placeholder="Description (saved as locationDesc)"
//             value={multiPlaceData.description}
//             onChange={(e) =>
//               setMultiPlaceData({ ...multiPlaceData, description: e.target.value })
//             }
//             className="border px-3 py-2 rounded mt-2 w-full"
//           ></textarea>

//           <button
//             onClick={handleSaveMultiPlace}
//             className="bg-green-600 text-white px-6 py-2 rounded mt-3"
//           >
//             Save Multi-Place Expense
//           </button>
//         </div>
//       )}

//       <button
//         onClick={() => navigate(`/mode-selector`)}
//         className="px-4 py-2 bg-gray-300 text-black rounded mt-4"
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default FieldWorkPage;













// // pages/FieldWorkPage.jsx
// import React from "react";
// import { useNavigate } from "react-router-dom";
// import { useUserInfo } from "../hooks/useUserInfo";
// import { useLogs } from "../hooks/useLogs";
// import LogsTable from "../components/FWnormal";
// import MultiPlaceForm from "../components/FWmultiplace";
// import ActionButtons from "../components/FWActionButtons";
// import BG from "../utils/BG_TC.png"; // Background Image

// const FieldWorkPage = () => {
//   const navigate = useNavigate();
//   const userInfo = useUserInfo();
//   const {
//     logs,
//     transport,
//     multiPlaceData,
//     handleRecord,
//     handleMultiplePlacesRecord,
//     handleApplyTransport,
//     handleSaveExpenses,
//     handleSaveMultiPlace,
//     setTransport,
//     setMultiPlaceData,
//   } = useLogs(userInfo);

//   if (!userInfo)
//     return (
//       <div className="flex items-center justify-center h-screen text-gray-700">
//         Loading user info...
//       </div>
//     );

//   const currentMonth = new Date().toLocaleString("default", {
//     month: "long",
//     year: "numeric",
//   });

//   return (
//     <div
//       className="min-h-screen w-full bg-cover bg-center p-6 relative"
//       style={{ backgroundImage: `url(${BG})` }}
//     >
//       {/* Top Bar */}
//       <div className="absolute top-6 right-6">
//         <button
//           onClick={() => navigate("/mode-selector")}
//           className="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg shadow hover:bg-gray-300 transition"
//         >
//           ← Back
//         </button>
//       </div>

//       {/* Main Container */}
//       <div className="bg-white bg-opacity-90 shadow-2xl rounded-2xl p-8 max-w-6xl mx-auto">
//         {/* Title */}
//         <h1 className="text-3xl font-extrabold text-center mb-6 text-[#2C3E65] tracking-wide">
//           FIELD WORK
//         </h1>

//         {/* User Info Card */}
//         <div className="grid md:grid-cols-3 gap-4 text-gray-700 mb-6">
//           <div className="bg-gray-100 p-4 rounded-xl shadow text-center">
//             <p className="text-sm font-medium text-gray-500">Username</p>
//             <p className="text-lg font-bold">{userInfo.username}</p>
//           </div>
//           <div className="bg-gray-100 p-4 rounded-xl shadow text-center">
//             <p className="text-sm font-medium text-gray-500">HQ</p>
//             <p className="text-lg font-bold">{userInfo.hq}</p>
//           </div>
//           <div className="bg-gray-100 p-4 rounded-xl shadow text-center">
//             <p className="text-sm font-medium text-gray-500">Month</p>
//             <p className="text-lg font-bold">{currentMonth}</p>
//           </div>
//         </div>

//         {/* Action Buttons */}
//         <div className="mb-8">
//           <ActionButtons
//             userInfo={userInfo}
//             transport={transport}
//             setTransport={setTransport}
//             handleRecord={handleRecord}
//             handleApplyTransport={handleApplyTransport}
//             handleMultiplePlacesRecord={handleMultiplePlacesRecord}
//             currentCity={logs[0]?.location || ""}
//           />
//         </div>

//         {/* Logs Table */}
//         <div className="mb-8">
//           <LogsTable logs={logs} onSave={handleSaveExpenses} />
//         </div>

//         {/* Multi-Place Form */}
//         {multiPlaceData && (
//           <div className="mt-8">
//             <MultiPlaceForm
//               data={multiPlaceData}
//               setData={setMultiPlaceData}
//               onSave={handleSaveMultiPlace}
//             />
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };

// export default FieldWorkPage;









// import React from "react";
// import { useNavigate } from "react-router-dom";
// import { useUserInfo } from "../hooks/useUserInfo";
// import { useLogs } from "../hooks/useLogs";
// import LogsTable from "../components/FWnormal";
// import MultiPlaceForm from "../components/FWmultiplace";
// import ActionButtons from "../components/FWActionButtons";
// import BG from "../utils/BG_TC.png"; // Background Image

// const FieldWorkPage = () => {
//   const navigate = useNavigate();
//   const userInfo = useUserInfo();
//   const {
//     logs,
//     transport,
//     multiPlaceData,
//     handleRecord,
//     handleMultiplePlacesRecord,
//     handleApplyTransport,
//     handleSaveExpenses,
//     handleSaveMultiPlace,
//     setTransport,
//     setMultiPlaceData,
//   } = useLogs(userInfo);

//   if (!userInfo)
//     return (
//       <div className="flex items-center justify-center h-screen text-gray-700">
//         Loading user info...
//       </div>
//     );

//   const currentMonth = new Date().toLocaleString("default", {
//     month: "long",
//     year: "numeric",
//   });

//   return (
//     <div
//       className="min-h-screen w-full bg-cover bg-center relative flex flex-col"
//       style={{ backgroundImage: `url(${BG})` }}
//     >
//       {/* Top Bar */}
//       <div className="w-full h-4 bg-[#2C3E65]"></div>

//       {/* Back Button */}
//       <div className="absolute top-6 right-6">
//         <button
//           onClick={() => navigate("/mode-selector")}
//           className="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg shadow hover:bg-gray-300 transition"
//         >
//           ← Back
//         </button>
//       </div>

//       {/* Main Content */}
//       <div className="flex-1 flex items-center justify-center p-6">
//         <div className="bg-white bg-opacity-95 shadow-2xl rounded-2xl p-6 w-full max-w-5xl">
//           {/* Title */}
//           <h1 className="text-2xl font-extrabold text-center mb-4 text-[#2C3E65] tracking-wide">
//             FIELD WORK
//           </h1>

//           {/* User Info Cards */}
//           <div className="grid md:grid-cols-3 gap-4 text-gray-700 mb-6">
//             <div className="bg-gray-100 p-3 rounded-lg shadow text-center">
//               <p className="text-sm font-medium text-gray-500">Username</p>
//               <p className="text-base font-bold">{userInfo.username}</p>
//             </div>
//             <div className="bg-gray-100 p-3 rounded-lg shadow text-center">
//               <p className="text-sm font-medium text-gray-500">HQ</p>
//               <p className="text-base font-bold">{userInfo.hq}</p>
//             </div>
//             <div className="bg-gray-100 p-3 rounded-lg shadow text-center">
//               <p className="text-sm font-medium text-gray-500">Month</p>
//               <p className="text-base font-bold">{currentMonth}</p>
//             </div>
//           </div>

//           {/* Action Buttons */}
//           <div className="mb-8">
//             <ActionButtons
//               userInfo={userInfo}
//               transport={transport}
//               setTransport={setTransport}
//               handleRecord={handleRecord}
//               handleApplyTransport={handleApplyTransport}
//               handleMultiplePlacesRecord={handleMultiplePlacesRecord}
//               currentCity={logs[0]?.location || ""}
//             />
//           </div>

//           {/* Logs Table */}
//           <div className="mb-8">
//             <LogsTable logs={logs} onSave={handleSaveExpenses} />
//           </div>

//           {/* Multi-Place Form */}
//           {multiPlaceData && (
//             <div className="mt-8">
//               <MultiPlaceForm
//                 data={multiPlaceData}
//                 setData={setMultiPlaceData}
//                 onSave={handleSaveMultiPlace}
//               />
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Bottom Bar */}
//       <div className="w-full h-4 bg-[#2C3E65]"></div>
//     </div>
//   );
// };

// export default FieldWorkPage;























// import React from "react";
// import { useNavigate } from "react-router-dom";
// import { useUserInfo } from "../hooks/useUserInfo";
// import { useLogs } from "../hooks/useLogs";
// import LogsTable from "../components/FWnormal";
// import MultiPlaceForm from "../components/FWmultiplace";
// import ActionButtons from "../components/FWActionButtons";
// import BG from "../utils/BG_TC.png"; // Background Image

// const FieldWorkPage = () => {
//   const navigate = useNavigate();
//   const userInfo = useUserInfo();
//   const {
//     logs,
//     transport,
//     multiPlaceData,
//     handleRecord,
//     handleMultiplePlacesRecord,
//     handleApplyTransport,
//     handleSaveExpenses,
//     handleSaveMultiPlace,
//     setTransport,
//     setMultiPlaceData,
//   } = useLogs(userInfo);

//   if (!userInfo)
//     return (
//       <div className="flex items-center justify-center h-screen text-gray-700">
//         Loading user info...
//       </div>
//     );

//   const currentMonth = new Date().toLocaleString("default", {
//     month: "long",
//     year: "numeric",
//   });

//   return (
//     <div
//       className="min-h-screen w-full bg-cover bg-center flex flex-col"
//       style={{ backgroundImage: `url(${BG})` }}
//     >
//       {/* Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         {/* Back Button */}
//         <button
//         onClick={() => navigate("/mode-selector")}
//         className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 focus:ring-2 focus:ring-offset-2 focus:ring-[#2C3E65] transition-all"
//         >
//           <span className="text-lg">←</span> Back
//           </button>
//           {/* Title */}
//           <h1 className="text-xl md:text-2xl font-bold tracking-wide text-center flex-1">
//             FIELD WORK
//             </h1>
//             {/* Placeholder for future elements (e.g., Profile Icon) */}
//             <div className="w-8"></div>
//             </div>
//             {/* Main Content */}
//             <div className="flex-1 p-6 space-y-8">
//         {/* User Info Section */}
//         <div className="grid md:grid-cols-3 gap-4 max-w-4xl mx-auto">
//           <div className="bg-gray-100 p-4 rounded-lg shadow text-center">
//             <p className="text-sm font-medium text-gray-500">Username</p>
//             <p className="text-lg font-bold">{userInfo.username}</p>
//           </div>
//           <div className="bg-gray-100 p-4 rounded-lg shadow text-center">
//             <p className="text-sm font-medium text-gray-500">HQ</p>
//             <p className="text-lg font-bold">{userInfo.hq}</p>
//           </div>
//           <div className="bg-gray-100 p-4 rounded-lg shadow text-center">
//             <p className="text-sm font-medium text-gray-500">Month</p>
//             <p className="text-lg font-bold">{currentMonth}</p>
//           </div>
//         </div>

//         {/* Action Buttons */}
//         <div className="flex flex-wrap gap-4 justify-center">
//           <ActionButtons
//             userInfo={userInfo}
//             transport={transport}
//             setTransport={setTransport}
//             handleRecord={handleRecord}
//             handleApplyTransport={handleApplyTransport}
//             handleMultiplePlacesRecord={handleMultiplePlacesRecord}
//             currentCity={logs[0]?.location || ""}
//           />
//         </div>

//         {/* Logs Table */}
//         <div className="max-w-6xl mx-auto">
//           <LogsTable logs={logs} onSave={handleSaveExpenses} />
//         </div>

//         {/* Multi-Place Form */}
//         {multiPlaceData && (
//           <div className="max-w-6xl mx-auto">
//             <MultiPlaceForm
//               data={multiPlaceData}
//               setData={setMultiPlaceData}
//               onSave={handleSaveMultiPlace}
//             />
//           </div>
//         )}
//       </div>

//       {/* Bottom Bar */}
//       <div className="w-full h-4 bg-[#2C3E65]"></div>
//     </div>
//   );
// };

// export default FieldWorkPage;













// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import logo from "../utils/TC_LOGO.png"; // adjust the path based on your file location
// import bgImage from "../utils/BG_TC.png"; // your background image
//   const API = process.env.REACT_APP_BACKEND_URL;




// function LoginPage() {
//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");
//   const navigate = useNavigate();


//   const handleLogin = async (e) => {
//     e.preventDefault();
//     try {
//       const res = await axios.post(`${API}/api/auth/login`, {
//         username,
//         password,
//       });

//       const { token } = res.data;
//       localStorage.setItem("token", token);

//       const payload = JSON.parse(atob(token.split(".")[1]));
//       const role = payload.role;

//       if (role === "admin") {
//         navigate("/admin/dashboard");
//       } else {
//         navigate("/mode-selector");
//       }
//     } catch (err) {
//       alert("Invalid login credentials");
//     }
//   };

//   return (
//     <div
//       style={{
//         backgroundImage: `url(${bgImage})`, // replace with imported background
//         backgroundSize: "cover",
//         backgroundPosition: "center",
//         minHeight: "100vh",
//         display: "flex",
//         justifyContent: "center",
//         alignItems: "center",
//         padding: "1rem",
//       }}
//     >
//       <div
//         style={{
//           backgroundColor: "rgba(255, 255, 255, 0.9)",
//           padding: "2rem",
//           borderRadius: "10px",
//           boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
//           width: "100%",
//           maxWidth: "350px",
//           textAlign: "center",
//         }}
//       >
//         <img
//           src={logo} // replace with your logo path
//           alt="Logo"
//           style={{ width: "120px", height: "auto", marginBottom: "1rem" }}
//         />

//         <form onSubmit={handleLogin}>
//           <input
//             placeholder="Enter Username"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//             style={inputStyle}
//           />
//           <input
//             type="password"
//             placeholder="Enter Password"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//             style={inputStyle}
//           />
//           <button type="submit" style={buttonStyle}>
//             Login
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// }

// const inputStyle = {
//   width: "100%",
//   padding: "10px",
//   margin: "10px 0",
//   borderRadius: "5px",
//   border: "1px solid #ccc",
//   fontSize: "14px",
//   boxSizing: "border-box",
// };

// const buttonStyle = {
//   width: "100%",
//   padding: "10px",
//   backgroundColor: "#2C3E65",
//   color: "white",
//   border: "none",
//   borderRadius: "5px",
//   cursor: "pointer",
//   fontSize: "16px",
// };

// export default LoginPage;








// // pages/ModeSelector.jsx
// import { useNavigate } from "react-router-dom";


// const ModeSelector = () => {
//   const navigate = useNavigate();
  

//   return (
//     <div style={{ padding: "2rem", textAlign: "center" }}>
//       <h2>Select Work Mode for Today</h2>
//       <button onClick={() => navigate("/field-work")}>🟩 Field Work</button>
//       <button onClick={() => navigate("/non-field-work")}>🟨 Non-Field Work</button>
//       <button onClick={() => navigate("/non-working-day")}>🟥 Non-Working Day</button>
//       <button onClick={() => navigate("/expense-statement")}> View Submitted Expenses</button>
//       <button onClick={() => navigate("/other-expenses")}>Add Other Expenses</button>
//       {/* Navigation Buttons */}
      
//         <button
//           onClick={() => navigate("/show-info")}
//           className="bg-blue-600 text-white px-4 py-2 rounded"
//         >
//           Show Info
//         </button>
//         <button
//     className="px-4 py-2 bg-gray-300 text-black rounded"
//     onClick={() => navigate(`/`)}
//   >
//     ← Back
//   </button>
//     </div>
//   );
// };

// export default ModeSelector;




// import { useNavigate } from "react-router-dom";
// import bgImage from "../utils/BG_TC.png"; // background image

// const ModeSelector = () => {
//   const navigate = useNavigate();

//   return (
//     <div
//       style={{
//         backgroundImage: `url(${bgImage})`,
//         backgroundSize: "cover",
//         backgroundPosition: "center",
//         minHeight: "100vh",
//         display: "flex",
//         flexDirection: "column",
//       }}
//     >
//       {/* Top Bar with Back Button */}
//       <div
//         style={{
//           backgroundColor: "#2C3E65",
//           height: "50px",
//           width: "100%",
//           display: "flex",
//           justifyContent: "flex-end",
//           alignItems: "center",
//           paddingRight: "1rem",
//         }}
//       >
//         <button
//           onClick={() => navigate("/")}
//           style={{
//             backgroundColor: "white",
//             color: "#2C3E65",
//             border: "none",
//             padding: "8px 16px",
//             borderRadius: "5px",
//             fontSize: "14px",
//             fontWeight: "bold",
//             cursor: "pointer",
//           }}
//         >
//           ← Back
//         </button>
//       </div>

//       {/* Main Content */}
//       <div
//         style={{
//           flex: 1,
//           display: "flex",
//           justifyContent: "center",
//           alignItems: "center",
//           padding: "2rem",
//         }}
//       >
//         <div
//           style={{
//             backgroundColor: "rgba(255,255,255,0.9)",
//             padding: "2rem",
//             borderRadius: "10px",
//             boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
//             display: "flex",
//             flexDirection: "column",
//             alignItems: "center",
//             width: "650px",
//           }}
//         >
//           {/* Title */}
//           <h2
//             style={{
//               textAlign: "center",
//               fontSize: "22px",
//               fontWeight: "bold",
//               marginBottom: "2rem",
//               color: "#2C3E65",
//             }}
//           >
//             ATTENDANCE PUNCHING & MONTHLY EXPENSES
//           </h2>

//           {/* Two-column layout */}
//           <div
//             style={{
//               display: "flex",
//               justifyContent: "space-between",
//               width: "100%",
//               gap: "3rem",
//             }}
//           >
//             {/* Left Side: Main Actions */}
//             <div
//               style={{
//                 display: "flex",
//                 flexDirection: "column",
//                 gap: "1rem",
//                 flex: 1,
//                 alignItems: "center",
//               }}
//             >
//               <button style={primaryButtonStyle} onClick={() => navigate("/field-work")}>
//                 🟩 Field Work
//               </button>
//               <button style={primaryButtonStyle} onClick={() => navigate("/non-field-work")}>
//                 🟨 Non-Field Work
//               </button>
//               <button style={primaryButtonStyle} onClick={() => navigate("/non-working-day")}>
//                 🟥 Non-Working Day
//               </button>
//               <button style={primaryButtonStyle} onClick={() => navigate("/other-expenses")}>
//                 Add Other Expenses
//               </button>
//             </div>

//             {/* Right Side: View & Show Info */}
//             <div
//               style={{
//                 display: "flex",
//                 flexDirection: "column",
//                 gap: "1rem",
//                 flex: 1,
//                 alignItems: "center",
//               }}
//             >
//               <button style={secondaryButtonStyle} onClick={() => navigate("/expense-statement")}>
//                 View Submitted Expenses
//               </button>
//               <button style={secondaryButtonStyle} onClick={() => navigate("/show-info")}>
//                 SRC
//               </button>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Bottom Bar */}
//       <div
//         style={{
//           backgroundColor: "#2C3E65",
//           height: "40px",
//           width: "100%",
//         }}
//       />
//     </div>
//   );
// };

// // Button Styles
// const primaryButtonStyle = {
//   backgroundColor: "#2C3E65",
//   color: "white",
//   border: "none",
//   padding: "12px 20px",
//   fontSize: "16px",
//   borderRadius: "6px",
//   cursor: "pointer",
//   fontWeight: "bold",
//   width: "200px",
// };

// const secondaryButtonStyle = {
//   backgroundColor: "#f0f0f0",
//   color: "#2C3E65",
//   border: "1px solid #2C3E65",
//   padding: "12px 20px",
//   fontSize: "16px",
//   borderRadius: "6px",
//   cursor: "pointer",
//   fontWeight: "bold",
//   width: "220px",
// };

// export default ModeSelector;





// import React from "react";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout"; // Import your Layout component

// const ModeSelector = () => {
//   const navigate = useNavigate();

//   return (
//     <Layout title="ATTENDANCE PUNCHING & MONTHLY EXPENSES" backTo="/">
//       {/* Main Container */}
//       <div className="flex justify-center items-center p-6">
//         <div className="bg-white/90 p-8 rounded-xl shadow-lg flex flex-col items-center w-[650px]">
//           {/* Two-column layout */}
//           <div className="flex justify-between w-full gap-12">
//             {/* Left Side: Main Actions */}
//             <div className="flex flex-col gap-4 flex-1 items-center">
//               <button
//                 className={primaryButtonClass}
//                 onClick={() => navigate("/field-work")}
//               >
//                 🟩 Field Work
//               </button>
//               <button
//                 className={primaryButtonClass}
//                 onClick={() => navigate("/non-field-work")}
//               >
//                 🟨 Non-Field Work
//               </button>
//               <button
//                 className={primaryButtonClass}
//                 onClick={() => navigate("/non-working-day")}
//               >
//                 🟥 Non-Working Day
//               </button>
//               <button
//                 className={primaryButtonClass}
//                 onClick={() => navigate("/other-expenses")}
//               >
//                 Add Other Expenses
//               </button>
//             </div>

//             {/* Right Side: View & Show Info */}
//             <div className="flex flex-col gap-4 flex-1 items-center">
//               <button
//                 className={secondaryButtonClass}
//                 onClick={() => navigate("/expense-statement")}
//               >
//                 View Submitted Expenses
//               </button>
//               <button
//                 className={secondaryButtonClass}
//                 onClick={() => navigate("/show-info")}
//               >
//                 SRC
//               </button>
//             </div>
//           </div>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// // ✅ Tailwind classes for buttons
// const primaryButtonClass =
//   "bg-[#2C3E65] text-white px-5 py-3 rounded-md text-lg font-semibold hover:bg-[#00a6c2] transition w-[200px]";

// const secondaryButtonClass =
//   "bg-gray-100 text-[#2C3E65] border border-[#2C3E65] px-5 py-3 rounded-md text-lg font-semibold hover:bg-[#e0e0e0] transition w-[220px]";

// export default ModeSelector;





// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import dayjs from "dayjs";
// const API = process.env.REACT_APP_BACKEND_URL;


// const NonFieldWorkPage = () => {
//   const [activity, setActivity] = useState("Meeting");
//   const [customActivity, setCustomActivity] = useState("");
//   const [zone, setZone] = useState("hq");
//   const [km, setKm] = useState("");
//   const [fare, setFare] = useState("");
//   const [da, setDa] = useState("");
//   const [transport, setTransport] = useState("-");
//   const navigate = useNavigate();
  

//   const handleSave = async () => {
//     const date = dayjs().format("DD/MM/YYYY");
//     const time = dayjs().format("h:mm:ss A");
//     const finalLocation = activity === "Others" ? customActivity : activity;

//     const parsedKm = parseFloat(km) || 0;
//     const parsedFare = parseFloat(fare) || 0;
//     const parsedDa = parseFloat(da) || 0;
//     const total = parsedFare + parsedDa;

//     const payload = {
//       date,
//       time,
//       location: finalLocation,
//       transport,
//       zone,
//       km: parsedKm,
//       fare: parsedFare,
//       da: parsedDa,
//       total,
//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/user/add-expense`, payload, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       alert("Saved!");
//       navigate("/mode-selector");
//     } catch (err) {
//       console.error("Error saving non-field work:", err);
//       if (err.response && err.response.data && err.response.data.msg) {
//         alert(err.response.data.msg);
//       } else {
//         alert("Failed to save. Please try again.");
//       }
//     }
//   };

//   return (
//     <div className="max-w-xl mx-auto p-6 mt-8 bg-white shadow rounded-xl space-y-6">
//       <h1 className="text-2xl font-bold mb-4 text-center">Non-Field Work</h1>

//       <div>
//         <label className="block font-medium mb-1">Select Activity</label>
//         <select
//           value={activity}
//           onChange={(e) => setActivity(e.target.value)}
//           className="w-full border p-2 rounded"
//         >
//           <option>Meeting</option>
//           <option>Transit</option>
//           <option>Training</option>
//           <option>Depot Work</option>
//           <option>Others</option>
//         </select>
//         {activity === "Others" && (
//           <input
//             type="text"
//             value={customActivity}
//             onChange={(e) => setCustomActivity(e.target.value)}
//             placeholder="Enter custom activity"
//             className="w-full mt-2 border p-2 rounded"
//           />
//         )}
//       </div>

//       <div>
//         <label className="block font-medium mb-1">Zone</label>
//         <select
//           value={zone}
//           onChange={(e) => setZone(e.target.value)}
//           className="w-full border p-2 rounded"
//         >
//           <option value="hq">hq</option>
//           <option value="ex">ex</option>
//           <option value="os">os</option>
//         </select>
//       </div>

//       <div>
//         <label className="block font-medium mb-1">KM</label>
//         <input
//           type="number"
//           value={km}
//           onChange={(e) => setKm(e.target.value)}
//           className="w-full border p-2 rounded"
//         />
//       </div>

//       <div>
//         <label className="block font-medium mb-1">Transport</label>
//         <select
//           value={transport}
//           onChange={(e) => setTransport(e.target.value)}
//           className="w-full border p-2 rounded"
//         >
//           <option value="-">-</option>
//           <option value="bus">bus</option>
//           <option value="bike">bike</option>
//           <option value="train">train</option>
          
//         </select>
//       </div>

//       <div>
//         <label className="block font-medium mb-1">Fare</label>
//         <input
//           type="number"
//           value={fare}
//           onChange={(e) => setFare(e.target.value)}
//           className="w-full border p-2 rounded"
//         />
//       </div>

//       <div>
//         <label className="block font-medium mb-1">DA</label>
//         <input
//           type="number"
//           value={da}
//           onChange={(e) => setDa(e.target.value)}
//           className="w-full border p-2 rounded"
//         />
//       </div>

//       <div className="text-right text-gray-700 font-medium">
//         Total: ₹{(parseFloat(fare) || 0) + (parseFloat(da) || 0)}
//       </div>

//       <button
//         onClick={handleSave}
//         className="bg-blue-600 hover:bg-blue-700 text-white w-full py-2 rounded-xl shadow"
//       >
//         Save
//       </button>
//       <button
//     className="px-4 py-2 bg-gray-300 text-black rounded"
//     onClick={() => navigate(`/mode-selector`)}
//   >
//     ← Back
//   </button>
//     </div>
//   );
// };

// export default NonFieldWorkPage;











// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import dayjs from "dayjs";
// const API = process.env.REACT_APP_BACKEND_URL;

// const NonFieldWorkPage = () => {
//   const [activity, setActivity] = useState("Meeting");
//   const [customActivity, setCustomActivity] = useState("");
//   const [zone, setZone] = useState("hq");
//   const [km, setKm] = useState("");
//   const [fare, setFare] = useState("");
//   const [da, setDa] = useState("");
//   const [transport, setTransport] = useState("-");
//   const navigate = useNavigate();

//   const handleSave = async () => {
//     const date = dayjs().format("DD/MM/YYYY");
//     const time = dayjs().format("h:mm:ss A");
//     const finalLocation = activity === "Others" ? customActivity : activity;

//     const parsedKm = parseFloat(km) || 0;
//     const parsedFare = parseFloat(fare) || 0;
//     const parsedDa = parseFloat(da) || 0;
//     const total = parsedFare + parsedDa;

//     const payload = {
//       date,
//       time,
//       location: finalLocation,
//       transport,
//       zone,
//       km: parsedKm,
//       fare: parsedFare,
//       da: parsedDa,
//       total,
//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/user/add-expense`, payload, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       alert("Saved!");
//       navigate("/mode-selector");
//     } catch (err) {
//       console.error("Error saving non-field work:", err);
//       if (err.response && err.response.data && err.response.data.msg) {
//         alert(err.response.data.msg);
//       } else {
//         alert("Failed to save. Please try again.");
//       }
//     }
//   };

//   return (
//     <div className="min-h-screen flex flex-col bg-gray-100">
//       {/* Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/mode-selector")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100"
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">Non-Field Work</h1>
//         <div className="w-20" /> {/* Placeholder for alignment */}
//       </div>

//       {/* Content */}
//       <div className="flex-1 max-w-xl mx-auto p-6 mt-6 bg-white shadow rounded-xl space-y-6">
//         <div>
//           <label className="block font-medium mb-1">Select Activity</label>
//           <select
//             value={activity}
//             onChange={(e) => setActivity(e.target.value)}
//             className="w-full border p-2 rounded"
//           >
//             <option>Meeting</option>
//             <option>Transit</option>
//             <option>Training</option>
//             <option>Depot Work</option>
//             <option>Others</option>
//           </select>
//           {activity === "Others" && (
//             <input
//               type="text"
//               value={customActivity}
//               onChange={(e) => setCustomActivity(e.target.value)}
//               placeholder="Enter custom activity"
//               className="w-full mt-2 border p-2 rounded"
//             />
//           )}
//         </div>

//         <div>
//           <label className="block font-medium mb-1">HQ/EX/OS</label>
//           <select
//             value={zone}
//             onChange={(e) => setZone(e.target.value)}
//             className="w-full border p-2 rounded"
//           >
//             <option value="hq">hq</option>
//             <option value="ex">ex</option>
//             <option value="os">os</option>
//           </select>
//         </div>

//         <div>
//           <label className="block font-medium mb-1">KM's</label>
//           <input
//             type="number"
//             value={km}
//             onChange={(e) => setKm(e.target.value)}
//             className="w-full border p-2 rounded"
//           />
//         </div>

//         <div>
//           <label className="block font-medium mb-1">MOT</label>
//           <select
//             value={transport}
//             onChange={(e) => setTransport(e.target.value)}
//             className="w-full border p-2 rounded"
//           >
//             <option value="-">-</option>
//             <option value="bus">bus</option>
//             <option value="bike">bike</option>
//             <option value="train">train</option>
//           </select>
//         </div>

//         <div>
//           <label className="block font-medium mb-1">TA</label>
//           <input
//             type="number"
//             value={fare}
//             onChange={(e) => setFare(e.target.value)}
//             className="w-full border p-2 rounded"
//           />
//         </div>

//         <div>
//           <label className="block font-medium mb-1">DA</label>
//           <input
//             type="number"
//             value={da}
//             onChange={(e) => setDa(e.target.value)}
//             className="w-full border p-2 rounded"
//           />
//         </div>

//         <div className="text-right text-gray-700 font-medium">
//           Total: ₹{(parseFloat(fare) || 0) + (parseFloat(da) || 0)}
//         </div>

//         <button
//           onClick={handleSave}
//           className="bg-[#2C3E65] hover:bg-[#1f2a46] text-white w-full py-2 rounded-xl shadow font-semibold"
//         >
//           Submit
//         </button>
//       </div>

//       {/* Bottom Bar */}
//       <div className="bg-[#2C3E65] h-16 mt-auto" />
//     </div>
//   );
// };

// export default NonFieldWorkPage;












// import { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";


// const NonWorkingDayPage = () => {
//   const [reason, setReason] = useState("");
//   const [customReason, setCustomReason] = useState("");
//   const [submitted, setSubmitted] = useState(false);
//     const navigate = useNavigate();
//     const API = process.env.REACT_APP_BACKEND_URL;

  


//   const handleSave = async () => {
//     if (!reason || (reason === "Others" && !customReason.trim())) {
//       alert("Please select or enter a reason");
//       return;
//     }

//     const selectedReason = reason === "Others" ? customReason : reason;
//     const date = new Date().toLocaleDateString("en-GB");
//     const time = new Date().toLocaleTimeString("en-GB");

//     const expenseEntry = {
//       date,
//       time,
//       location: selectedReason,
//       zone: "-",
//       km: 0,
//       transport: "-",
//       fare: 0,
//       da: 0,
//       otherExp: 0,
//       total: 0,
//       description: "-",
//       isNw:true,

//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/user/add-expense`, expenseEntry, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       setSubmitted(true);
//     } catch (err) {
//         console.error("Error saving non-field work:", err);
//       if (err.response && err.response.data && err.response.data.msg) {
//         alert(err.response.data.msg); // Show backend error message
//       } else {
//         alert("Failed to save. Please try again.");
//       }
//       //console.error("Error saving non-working day:", err);
//       //alert("Something went wrong!");
//     }
//   };

//   return (
//     <div style={{ padding: "2rem", textAlign: "center" }}>
//       <h2>🟥 Mark Non-Working Day</h2>

//       {submitted ? (
//         <p>✅ Your non-working day has been recorded.</p>
//       ) : (
//         <>
//           <label>
//             Select reason:{" "}
//             <select value={reason} onChange={(e) => setReason(e.target.value)}>
//               <option value="">-- Choose --</option>
//               <option value="Sunday">Sunday</option>
//               <option value="Week Off">Week Off</option>
//               <option value="Leave">Leave</option>
//               <option value="Others">Others</option>
//             </select>
//           </label>

//           {reason === "Others" && (
//             <div style={{ marginTop: "1rem" }}>
//               <input
//                 type="text"
//                 placeholder="Enter your reason"
//                 value={customReason}
//                 onChange={(e) => setCustomReason(e.target.value)}
//               />
//             </div>
//           )}

//           <div style={{ marginTop: "1.5rem" }}>
//             <button onClick={handleSave}>💾 Save</button>
//             <button
//     className="px-4 py-2 bg-gray-300 text-black rounded"
//     onClick={() => navigate(`/mode-selector`)}
//   >
//     ← Back
//   </button>
//           </div>

//         </>
//       )}
//     </div>
//   );
// };

// export default NonWorkingDayPage;





// import { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const NonWorkingDayPage = () => {
//   const [reason, setReason] = useState("");
//   const [customReason, setCustomReason] = useState("");
//   const [submitted, setSubmitted] = useState(false);
//   const navigate = useNavigate();
//   const API = process.env.REACT_APP_BACKEND_URL;

//   const handleSave = async () => {
//     if (!reason || (reason === "Others" && !customReason.trim())) {
//       alert("Please select or enter a reason");
//       return;
//     }

//     const selectedReason = reason === "Others" ? customReason : reason;
//     const date = new Date().toLocaleDateString("en-GB");
//     const time = new Date().toLocaleTimeString("en-GB");

//     const expenseEntry = {
//       date,
//       time,
//       location: selectedReason,
//       zone: "-",
//       km: 0,
//       transport: "-",
//       fare: 0,
//       da: 0,
//       otherExp: 0,
//       total: 0,
//       description: "-",
//       isNW: true,
//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/user/add-expense`, expenseEntry, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       setSubmitted(true);
//     } catch (err) {
//       console.error("Error saving non-field work:", err);
//       if (err.response && err.response.data && err.response.data.msg) {
//         alert(err.response.data.msg); // Show backend error message
//       } else {
//         alert("Failed to save. Please try again.");
//       }
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gray-100">
//       {/* Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/mode-selector")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100"
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">Non Working Day</h1>
//         <div className="w-16"></div> {/* Spacer to balance layout */}
//       </div>

//       {/* Content Card */}
//       <div className="flex justify-center items-center mt-10">
//         <div className="bg-white shadow-xl rounded-2xl p-6 w-full max-w-md">
//           {submitted ? (
//             <p className="text-green-600 font-semibold text-lg text-center">
//               ✅ Your non-working day has been recorded.
//             </p>
//           ) : (
//             <>
//               <h2 className="text-lg font-semibold mb-4 text-center">
//                 Mark Non-Working Day
//               </h2>

//               {/* Reason Dropdown */}
//               <div className="mb-4">
//                 <label className="block text-gray-700 font-medium mb-2">
//                   Select reason:
//                 </label>
//                 <select
//                   value={reason}
//                   onChange={(e) => setReason(e.target.value)}
//                   className="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//                 >
//                   <option value="">-- Choose --</option>
//                   <option value="Sunday">Sunday</option>
//                   <option value="Week Off">Week Off</option>
//                   <option value="Leave">Leave</option>
//                   <option value="Others">Others</option>
//                 </select>
//               </div>

//               {/* Custom Reason */}
//               {reason === "Others" && (
//                 <div className="mb-4">
//                   <input
//                     type="text"
//                     placeholder="Enter your reason"
//                     value={customReason}
//                     onChange={(e) => setCustomReason(e.target.value)}
//                     className="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//                   />
//                 </div>
//               )}

//               {/* Buttons */}
//               <div className="flex justify-center gap-4">
//                 <button
//                   onClick={handleSave}
//                   className="bg-[#2C3E65] text-white px-6 py-2 rounded-lg shadow-md hover:bg-[#1F2A49] transition"
//                 >
//                   Submit
//                 </button>
//               </div>
//             </>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default NonWorkingDayPage;










// import React, { useState } from "react";
// import axios from "axios";
// import dayjs from "dayjs";
// import { useNavigate } from "react-router-dom";
// const API = process.env.REACT_APP_BACKEND_URL;


// const OtherExpensesPage = () => {
//   const today = dayjs();
//   const firstAllowedDate = today.subtract(1, "month").startOf("month"); // first day of previous month
//   const lastAllowedDate = today; // today
  

//   const [date, setDate] = useState(today.format("YYYY-MM-DD"));
//   const [entries, setEntries] = useState([{ amount: "", description: "" }]);
//   const [message, setMessage] = useState("");
//   const navigate = useNavigate();

//   const handleChange = (index, field, value) => {
//     const updated = [...entries];
//     updated[index][field] = value;
//     setEntries(updated);
//   };

//   const addEntry = () => {
//     setEntries([...entries, { amount: "", description: "" }]);
//   };

//   const calculateTotal = () => {
//     return entries.reduce((sum, e) => sum + Number(e.amount || 0), 0);
//   };

//   const handleSave = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       const headers = { Authorization: `Bearer ${token}` };
//       const formattedDate = dayjs(date).format("DD/MM/YYYY");

//       const validEntries = entries.filter(
//         (e) => e.amount && !isNaN(e.amount) && e.description.trim() !== ""
//       );

//       if (validEntries.length === 0) {
//         setMessage("Please enter at least one valid expense.");
//         return;
//       }

//       await axios.post(
//         `${API}/api/user/other-expenses`,
//         { date: formattedDate, entries: validEntries },
//         { headers }
//       );

//       setMessage("Saved successfully!");
//       setEntries([{ amount: "", description: "" }]);
//     } catch (err) {
//       console.error(err);
//       setMessage(err.response?.data?.msg || "Error saving expenses");
//     }
//   };

//   return (
//     <div className="p-6 max-w-3xl mx-auto">
//       <h2 className="text-2xl font-bold mb-4">Add Other Expenses</h2>

//       <div className="mb-4">
//         <label className="block font-medium mb-1">Select Date:</label>
//         <input
//           type="date"
//           className="border rounded px-3 py-2 w-full"
//           value={date}
//           onChange={(e) => setDate(e.target.value)}
//           min={firstAllowedDate.format("YYYY-MM-DD")}
//           max={lastAllowedDate.format("YYYY-MM-DD")}
//         />
//       </div>

//       {entries.map((entry, idx) => (
//         <div key={idx} className="mb-3 border rounded p-3">
//           <div className="mb-2">
//             <label className="block mb-1">Amount:</label>
//             <input
//               type="number"
//               className="border rounded px-3 py-2 w-full"
//               value={entry.amount}
//               onChange={(e) => handleChange(idx, "amount", e.target.value)}
//               placeholder="Enter amount"
//             />
//           </div>
//           <div>
//             <label className="block mb-1">Description:</label>
//             <input
//               type="text"
//               className="border rounded px-3 py-2 w-full"
//               value={entry.description}
//               onChange={(e) => handleChange(idx, "description", e.target.value)}
//               placeholder="Enter description"
//             />
//           </div>
//         </div>
//       ))}

//       <button
//         onClick={addEntry}
//         className="bg-blue-500 text-white px-4 py-2 rounded mt-2"
//       >
//         + Add Other Expense
//       </button>

//       <div className="mt-4 font-semibold">
//         Total: ₹{calculateTotal()}
//       </div>

//       <button
//         onClick={handleSave}
//         className="bg-green-600 text-white px-6 py-2 mt-4 rounded"
//       >
//         Save Other Expenses
//       </button>
//       <button
//         className="px-4 py-2 bg-gray-300 text-black rounded ml-2"
//         onClick={() => navigate(`/mode-selector`)}
//       >
//         ← Back
//       </button>

//       {message && <div className="mt-4 text-red-600">{message}</div>}
//     </div>
//   );
// };

// export default OtherExpensesPage;










// import React, { useState } from "react";
// import axios from "axios";
// import dayjs from "dayjs";
// import { useNavigate } from "react-router-dom";
// import isSameOrBefore from "dayjs/plugin/isSameOrBefore";

// dayjs.extend(isSameOrBefore);

// const API = process.env.REACT_APP_BACKEND_URL;

// const OtherExpensesPage = () => {
//   const today = dayjs();
//   const firstAllowedDate = today.subtract(1, "month").startOf("month"); // first day of previous month
//   const lastAllowedDate = today; // today

//   const [date, setDate] = useState(today.format("YYYY-MM-DD"));
//   const [entries, setEntries] = useState([{ amount: "", description: "" }]);
//   const [message, setMessage] = useState("");
//   const navigate = useNavigate();

//   const handleChange = (index, field, value) => {
//     const updated = [...entries];
//     updated[index][field] = value;
//     setEntries(updated);
//   };
  

//   const addEntry = () => {
//     setEntries([...entries, { amount: "", description: "" }]);
//   };

//   const calculateTotal = () => {
//     return entries.reduce((sum, e) => sum + Number(e.amount || 0), 0);
//   };

//   const validateDate = (selectedDate) => {
//     const dateObj = dayjs(selectedDate);
//     return dateObj.isAfter(firstAllowedDate) && dateObj.isSameOrBefore(lastAllowedDate);
//   };

//   const handleSave = async () => {
//     if (!validateDate(date)) {
//       setMessage("❌ Cannot save expense for this date. Allowed range: previous month to today.");
//       return;
//     }

//     try {
//       const token = localStorage.getItem("token");
//       const headers = { Authorization: `Bearer ${token}` };
//       const formattedDate = dayjs(date).format("DD/MM/YYYY");

//       const validEntries = entries.filter(
//         (e) => e.amount && !isNaN(e.amount) && e.description.trim() !== ""
//       );

//       if (validEntries.length === 0) {
//         setMessage("Please enter at least one valid expense.");
//         return;
//       }

//       await axios.post(
//         `${API}/api/user/other-expenses`,
//         { date: formattedDate, entries: validEntries },
//         { headers }
//       );

//       setMessage("✅ Saved successfully!");
//       setEntries([{ amount: "", description: "" }]);
//     } catch (err) {
//       console.error(err);
//       setMessage(err.response?.data?.msg || "Error saving expenses");
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gray-100 flex flex-col">
//       {/* Top Bar */}
//       <div className="bg-[#2C3E65] text-white px-6 py-4 flex items-center justify-between shadow-lg">
//         <button
//           onClick={() => navigate("/mode-selector")}
//           className="flex items-center gap-2 bg-white text-[#2C3E65] font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-gray-100"
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">Other Expenses</h1>
//         <div className="w-16"></div>
//       </div>

//       {/* Main Content */}
//       <div className="flex-grow p-6 max-w-3xl mx-auto w-full">
//         <div className="bg-white shadow-xl rounded-2xl p-6">
//           <h2 className="text-lg font-semibold mb-4">Add Other Expenses</h2>

//           {/* Date Picker */}
//           <div className="mb-4">
//             <label className="block font-medium mb-1">Select Date:</label>
//             <input
//               type="date"
//               className="border rounded-lg px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//               value={date}
//               onChange={(e) => setDate(e.target.value)}
//               min={firstAllowedDate.format("YYYY-MM-DD")}
//               max={lastAllowedDate.format("YYYY-MM-DD")}
//             />
//           </div>

//           {/* Dynamic Entries */}
//           {entries.map((entry, idx) => (
//             <div key={idx} className="mb-3 border rounded-xl p-3 bg-gray-50">
//               <div className="mb-2">
//                 <label className="block mb-1 font-medium">Amount:</label>
//                 <input
//                   type="number"
//                   className="border rounded-lg px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//                   value={entry.amount}
//                   onChange={(e) => handleChange(idx, "amount", e.target.value)}
//                   placeholder="Enter amount"
//                 />
//               </div>
//               <div>
//                 <label className="block mb-1 font-medium">Description:</label>
//                 <input
//                   type="text"
//                   className="border rounded-lg px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//                   value={entry.description}
//                   onChange={(e) => handleChange(idx, "description", e.target.value)}
//                   placeholder="Enter description"
//                 />
//               </div>
//             </div>
//           ))}

//           {/* Add Entry Button */}
//           <button
//             onClick={addEntry}
//             className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition"
//           >
//             + Add Other Expense
//           </button>

//           {/* Total */}
//           <div className="mt-4 font-semibold text-lg">
//             Total: ₹{calculateTotal()}
//           </div>

//           {message && (
//             <div className={`mt-4 text-center font-medium ${message.includes("✅") ? "text-green-600" : "text-red-600"}`}>
//               {message}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Bottom Bar */}
//       <div className="bg-white shadow-inner px-6 py-4 flex justify-center">
//         <button
//           onClick={handleSave}
//           className="bg-green-600 text-white px-6 py-2 rounded-lg shadow hover:bg-green-700 transition"
//         >
//           Save Other Expenses
//         </button>
//       </div>
//     </div>
//   );
// };

// export default OtherExpensesPage;





// import React, { useState, useEffect } from "react";
// import axios from "axios";
// import {  useNavigate } from "react-router-dom";



// const transportModes = ["bike", "bus", "train"];
// const API = process.env.REACT_APP_BACKEND_URL;


// function SetInfoPage() {
//     const navigate = useNavigate();


//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const [hq, setHq] = useState("");
//   const [hqInput, setHqInput] = useState("");

//   const [ex, setEx] = useState([]);
//   const [os, setOs] = useState([]);
//   const [newCity, setNewCity] = useState("");

//   const [kms, setKms] = useState({});
//   const [fares, setFares] = useState({});
//   const [da, setDa] = useState({});

//   useEffect(() => {
//     if (hq) {
//       setKms((prev) => ({ ...prev, [hq]: 0 }));
//       setFares((prev) => ({
//         ...prev,
//         [hq]: { bike: 0, bus: 0, train: 0. },
//       }));
//     }
//   }, [hq]);

//   const handleSetHQ = () => {
//     const trimmed = hqInput.trim().toLowerCase();
//     if (!trimmed) return;
//     setHq(trimmed);
//     setHqInput("");
//     alert(`HQ set to "${trimmed}"`);
//   };

//   const addCity = (zone) => {
//     const city = newCity.trim().toLowerCase();
//     if (!city || city === hq) return;

//     if (zone === "ex" && !ex.includes(city)) setEx([...ex, city]);
//     else if (zone === "os" && !os.includes(city)) setOs([...os, city]);

//     setKms((prev) => ({ ...prev, [city]: 0 }));
//     setFares((prev) => ({
//       ...prev,
//       [city]: { bike: 0, bus: 0, train: 0 },
//     }));
//     setDa((prev) => ({ ...prev, [city]: 0 }));
//     setNewCity("");
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(
//         `${API}/api/admin/add-user`,
//         {
//           username,
//           password,
//           hq,
//           ex,
//           os,
//           kms,
//           fares,
//           da,
//         },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("User added!");
//     } catch (err) {
//       console.error(err);
//       alert("Error adding user");
//     }
//   };

//   const allCities = [hq, ...ex, ...os].filter(Boolean);

//   return (
//     <div style={{ padding: "2rem" }}>
//       <h2>Add User</h2>
//       <form onSubmit={handleSubmit}>
//         <input
//           placeholder="Username"
//           value={username}
//           onChange={(e) => setUsername(e.target.value)}
//         /><br /><br />

//         <input
//           placeholder="Password"
//           value={password}
//           onChange={(e) => setPassword(e.target.value)}
//         /><br /><br />

//         <label>Enter Headquarter City:</label><br />
//         <input
//           placeholder="Enter HQ city"
//           value={hqInput}
//           onChange={(e) => setHqInput(e.target.value)}
//           disabled={!!hq}
//         />
//         <button type="button" onClick={handleSetHQ} disabled={!!hq}>
//           Set HQ
//         </button>
//         {hq && <p style={{ color: "green" }}>HQ: {hq}</p>}
//         <br /><br />

//         <h4>EX Cities</h4>
//         {ex.map((city, idx) => (
//           <div key={idx}>{city}</div>
//         ))}
//         <input
//           placeholder="Add EX/OS city"
//           value={newCity}
//           onChange={(e) => setNewCity(e.target.value)}
//         />
//         <button type="button" onClick={() => addCity("ex")}>
//           Add EX
//         </button>

//         <h4>OS Cities</h4>
//         {os.map((city, idx) => (
//           <div key={idx}>{city}</div>
//         ))}
//         <button type="button" onClick={() => addCity("os")}>
//           Add OS
//         </button>

//         <h4>KMs per City</h4>
//         {allCities.map((city) => (
//           <div key={city}>
//             {city}:
//             <input
//               type="number"
//               value={kms[city] || 0}
//               disabled={city === hq}
//               onChange={(e) =>
//                 setKms((prev) => ({ ...prev, [city]: Number(e.target.value) }))
//               }
//             />
//             {city === hq && <span> (HQ - always 0)</span>}
//           </div>
//         ))}

//         <h4>Fares per City & Transport</h4>
//         {allCities.map((city) =>
//           city === hq ? (
//             <div key={city}>
//               <strong>{city}</strong> - Fare: 0 for all transports (HQ)
//             </div>
//           ) : (
//             <div key={city}>
//               <strong>{city}</strong>
//               {transportModes.map((mode) => (
//                 <div key={mode}>
//                   {mode}:
//                   <input
//                     type="number"
//                     value={fares[city]?.[mode] || 0}
//                     onChange={(e) =>
//                       setFares((prev) => ({
//                         ...prev,
//                         [city]: {
//                           ...prev[city],
//                           [mode]: Number(e.target.value),
//                         },
//                       }))
//                     }
//                   />
//                 </div>
//               ))}
//             </div>
//           )
//         )}

//         <h4>DA per City</h4>
//         {allCities.map((city) => (
//           <div key={city}>
//             {city}:
//             <input
//               type="number"
//               value={da[city] || 0}
//               onChange={(e) =>
//                 setDa((prev) => ({ ...prev, [city]: Number(e.target.value) }))
//               }
//             />
//           </div>
//         ))}

//         <br />
//         <button type="submit">Submit</button>
//         <button
//     className="px-4 py-2 bg-gray-300 text-black rounded"
//     onClick={() => navigate(`/admin/dashboard`)}
//   >
//     ← Back
//   </button>
//       </form>
//     </div>
//   );
// }

// export default SetInfoPage;












// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// const transportModes = ["-", "bike", "bus", "train"];
// const zones = ["hq", "ex", "os"];

// function SetInfoPage() {
//   const navigate = useNavigate();

//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const [rows, setRows] = useState([
//     { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//   ]);

//   const handleRowChange = (index, field, value) => {
//     const updated = [...rows];
//     updated[index][field] = value;

//     // auto-calc fare
//     if (field === "kms" || field === "pricePerKm") {
//       const kms = Number(updated[index].kms) || 0;
//       const price = Number(updated[index].pricePerKm) || 0;
//       updated[index].fare = kms * price;
//     }

//     setRows(updated);
//   };

//   const addRow = () => {
//     setRows([
//       ...rows,
//       { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//     ]);
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     let hq = "";
//     let ex = [];
//     let os = [];
//     let kms = {};
//     let fares = {};
//     let da = {};

//     rows.forEach((row) => {
//       if (!row.city) return;

//       const city = row.city.toLowerCase();

//       // Assign HQ/EX/OS
//       if (row.zone === "hq") hq = city;
//       if (row.zone === "ex") ex.push(city);
//       if (row.zone === "os") os.push(city);

//       // KMs
//       kms[city] = Number(row.kms) || 0;

//       // Fares
//       if (!fares[city]) fares[city] = { bike: 0, bus: 0, train: 0 };
//       if (row.transport !== "-") {
//         fares[city][row.transport] = Number(row.fare) || 0;
//       }

//       // DA
//       da[city] = Number(row.da) || 0;
//     });

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(
//         `${API}/api/admin/add-user`,
//         {
//           username,
//           password,
//           hq,
//           ex,
//           os,
//           kms,
//           fares,
//           da,
//         },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("User added!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error(err);
//       alert("Error adding user");
//     }
//   };

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Add User</h2>
//       <form onSubmit={handleSubmit}>
//         <div className="mb-4">
//           <input
//             placeholder="Username"
//             className="border p-2 mr-2"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//           />
//           <input
//             placeholder="Password"
//             type="password"
//             className="border p-2"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//           />
//         </div>

//         <table className="border-collapse border w-full mb-4">
//           <thead>
//             <tr className="bg-gray-200">
//               <th className="border p-2">City</th>
//               <th className="border p-2">Zone</th>
//               <th className="border p-2">Transport</th>
//               <th className="border p-2">To & Fro KMs</th>
//               <th className="border p-2">Price/KM</th>
//               <th className="border p-2">Fare</th>
//               <th className="border p-2">DA</th>
//             </tr>
//           </thead>
//           <tbody>
//             {rows.map((row, idx) => (
//               <tr key={idx}>
//                 <td className="border p-2">
//                   <input
//                     type="text"
//                     value={row.city}
//                     onChange={(e) => handleRowChange(idx, "city", e.target.value)}
//                     className="border p-1 w-full"
//                   />
//                 </td>
//                 <td className="border p-2">
//                   <select
//                     value={row.zone}
//                     onChange={(e) => handleRowChange(idx, "zone", e.target.value)}
//                     className="border p-1"
//                   >
//                     {zones.map((z) => (
//                       <option key={z} value={z}>
//                         {z.toUpperCase()}
//                       </option>
//                     ))}
//                   </select>
//                 </td>
//                 <td className="border p-2">
//                   <select
//                     value={row.transport}
//                     onChange={(e) =>
//                       handleRowChange(idx, "transport", e.target.value)
//                     }
//                     className="border p-1"
//                   >
//                     {transportModes.map((m) => (
//                       <option key={m} value={m}>
//                         {m}
//                       </option>
//                     ))}
//                   </select>
//                 </td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.kms}
//                     onChange={(e) => handleRowChange(idx, "kms", e.target.value)}
//                     className="border p-1 w-20"
//                   />
//                 </td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.pricePerKm}
//                     onChange={(e) =>
//                       handleRowChange(idx, "pricePerKm", e.target.value)
//                     }
//                     className="border p-1 w-20"
//                   />
//                 </td>
//                 <td className="border p-2">{row.fare}</td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.da}
//                     onChange={(e) => handleRowChange(idx, "da", e.target.value)}
//                     className="border p-1 w-20"
//                   />
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>

//         <button
//           type="button"
//           onClick={addRow}
//           className="px-3 py-1 bg-blue-500 text-white rounded mr-2"
//         >
//           + Add Row
//         </button>

//         <button type="submit" className="px-3 py-1 bg-green-500 text-white rounded">
//           Submit
//         </button>

//         <button
//           type="button"
//           onClick={() => navigate("/admin/dashboard")}
//           className="ml-2 px-3 py-1 bg-gray-300 rounded"
//         >
//           ← Back
//         </button>
//       </form>
//     </div>
//   );
// }

// export default SetInfoPage;










// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// const transportModes = ["-", "bike", "bus", "train"];
// const zones = ["hq", "ex", "os"];

// function SetInfoPage() {
//   const navigate = useNavigate();

//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const [rows, setRows] = useState([
//     { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//   ]);

//   const handleRowChange = (index, field, value) => {
//     const updated = [...rows];
//     updated[index][field] = value;

//     // auto-calc fare
//     if (field === "kms" || field === "pricePerKm") {
//       const kms = Number(updated[index].kms) || 0;
//       const price = Number(updated[index].pricePerKm) || 0;
//       updated[index].fare = kms * price;
//     }

//     setRows(updated);
//   };

//   const addRow = () => {
//     setRows([
//       ...rows,
//       { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//     ]);
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     let hq = "";
//     let ex = [];
//     let os = [];
//     let kms = {};
//     let fares = {};
//     let da = {};

//     rows.forEach((row) => {
//       if (!row.city) return;

//       const city = row.city.trim().toLowerCase();

//       // Assign HQ/EX/OS
//       if (row.zone === "hq") hq = city;
//       if (row.zone === "ex") ex.push(city);
//       if (row.zone === "os") os.push(city);

//       // KMs
//       kms[city] = Number(row.kms) || 0;

//       // Fares
//       if (!fares[city]) fares[city] = { bike: 0, bus: 0, train: 0 };
//       if (row.transport !== "-") {
//         fares[city][row.transport] = Number(row.fare) || 0;
//       }

//       // DA
//       da[city] = Number(row.da) || 0;
//     });

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(
//         `${API}/api/admin/add-user`,
//         {
//           username,
//           password, // ✅ plain text, backend must hash
//           hq,
//           ex,
//           os,
//           kms,
//           fares,
//           da,
//         },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("User added!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error(err);
//       alert("Error adding user");
//     }
//   };

//   return (
//     <div className="p-6">
//       <h2 className="text-xl font-bold mb-4">Add User</h2>
//       <form onSubmit={handleSubmit}>
//         <div className="mb-4">
//           <input
//             placeholder="Username"
//             className="border p-2 mr-2"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//           />
//           <input
//             placeholder="Password"
//             type="password"
//             className="border p-2"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//           />
//         </div>

//         <table className="border-collapse border w-full mb-4">
//           <thead>
//             <tr className="bg-gray-200">
//               <th className="border p-2">City</th>
//               <th className="border p-2">Zone</th>
//               <th className="border p-2">Transport</th>
//               <th className="border p-2">To & Fro KMs</th>
//               <th className="border p-2">Price/KM</th>
//               <th className="border p-2">Fare</th>
//               <th className="border p-2">DA</th>
//             </tr>
//           </thead>
//           <tbody>
//             {rows.map((row, idx) => (
//               <tr key={idx}>
//                 <td className="border p-2">
//                   <input
//                     type="text"
//                     value={row.city}
//                     onChange={(e) => handleRowChange(idx, "city", e.target.value)}
//                     className="border p-1 w-full"
//                   />
//                 </td>
//                 <td className="border p-2">
//                   <select
//                     value={row.zone}
//                     onChange={(e) => handleRowChange(idx, "zone", e.target.value)}
//                     className="border p-1"
//                   >
//                     {zones.map((z) => (
//                       <option key={z} value={z}>
//                         {z.toUpperCase()}
//                       </option>
//                     ))}
//                   </select>
//                 </td>
//                 <td className="border p-2">
//                   <select
//                     value={row.transport}
//                     onChange={(e) =>
//                       handleRowChange(idx, "transport", e.target.value)
//                     }
//                     className="border p-1"
//                   >
//                     {transportModes.map((m) => (
//                       <option key={m} value={m}>
//                         {m}
//                       </option>
//                     ))}
//                   </select>
//                 </td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.kms}
//                     onChange={(e) => handleRowChange(idx, "kms", e.target.value)}
//                     className="border p-1 w-20"
//                   />
//                 </td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.pricePerKm}
//                     onChange={(e) =>
//                       handleRowChange(idx, "pricePerKm", e.target.value)
//                     }
//                     className="border p-1 w-20"
//                   />
//                 </td>
//                 <td className="border p-2">{row.fare}</td>
//                 <td className="border p-2">
//                   <input
//                     type="number"
//                     value={row.da}
//                     onChange={(e) => handleRowChange(idx, "da", e.target.value)}
//                     className="border p-1 w-20"
//                   />
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>

//         <button
//           type="button"
//           onClick={addRow}
//           className="px-3 py-1 bg-blue-500 text-white rounded mr-2"
//         >
//           + Add Row
//         </button>

//         <button type="submit" className="px-3 py-1 bg-green-500 text-white rounded">
//           Submit
//         </button>

//         <button
//           type="button"
//           onClick={() => navigate("/admin/dashboard")}
//           className="ml-2 px-3 py-1 bg-gray-300 rounded"
//         >
//           ← Back
//         </button>
//       </form>
//     </div>
//   );
// }

// export default SetInfoPage;











// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout"; // ✅ Import Layout

// const API = process.env.REACT_APP_BACKEND_URL;

// const transportModes = ["-", "bike", "bus", "train"];
// const zones = ["hq", "ex", "os"];

// function SetInfoPage() {
//   const navigate = useNavigate();

//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const [rows, setRows] = useState([
//     { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//   ]);

//   const handleRowChange = (index, field, value) => {
//     const updated = [...rows];
//     updated[index][field] = value;

//     // Auto-calc fare
//     if (field === "kms" || field === "pricePerKm") {
//       const kms = Number(updated[index].kms) || 0;
//       const price = Number(updated[index].pricePerKm) || 0;
//       updated[index].fare = kms * price;
//     }

//     setRows(updated);
//   };

//   const addRow = () => {
//     setRows([
//       ...rows,
//       { city: "", zone: "hq", transport: "-", kms: 0, pricePerKm: 0, fare: 0, da: 0 },
//     ]);
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     let hq = "";
//     let ex = [];
//     let os = [];
//     let kms = {};
//     let fares = {};
//     let da = {};

//     rows.forEach((row) => {
//       if (!row.city) return;

//       const city = row.city.trim().toLowerCase();

//       // Assign HQ/EX/OS
//       if (row.zone === "hq") hq = city;
//       if (row.zone === "ex") ex.push(city);
//       if (row.zone === "os") os.push(city);

//       // KMs
//       kms[city] = Number(row.kms) || 0;

//       // Fares
//       if (!fares[city]) fares[city] = { bike: 0, bus: 0, train: 0 };
//       if (row.transport !== "-") {
//         fares[city][row.transport] = Number(row.fare) || 0;
//       }

//       // DA
//       da[city] = Number(row.da) || 0;
//     });

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(
//         `${API}/api/admin/add-user`,
//         {
//           username,
//           password, // Backend must hash
//           hq,
//           ex,
//           os,
//           kms,
//           fares,
//           da,
//         },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("User added!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error(err);
//       alert("Error adding user");
//     }
//   };

//   return (
//     <Layout title="Add User" backTo="/admin/dashboard">
//       <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-md">
//         {/* Username & Password */}
//         <div className="mb-4 flex gap-4">
//           <input
//             placeholder="Username"
//             className="border p-2 flex-1 rounded"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//           />
//           <input
//             placeholder="Password"
//             type="password"
//             className="border p-2 flex-1 rounded"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//           />
//         </div>

//         {/* Table */}
//         <div className="overflow-x-auto">
//           <table className="border-collapse border w-full mb-4 text-sm">
//             <thead>
//               <tr className="bg-gray-200 text-gray-700">
//                 <th className="border p-2">PLACE OF WORK</th>
//                 <th className="border p-2">HQ/EX/OS</th>
//                 <th className="border p-2">MOT</th>
//                 <th className="border p-2">KM's</th>
//                 <th className="border p-2">P/KM RS</th>
//                 <th className="border p-2">TA</th>
//                 <th className="border p-2">DA</th>
//               </tr>
//             </thead>
//             <tbody>
//               {rows.map((row, idx) => (
//                 <tr key={idx}>
//                   <td className="border p-2">
//                     <input
//                       type="text"
//                       value={row.city}
//                       onChange={(e) => handleRowChange(idx, "city", e.target.value)}
//                       className="border p-1 w-full rounded"
//                     />
//                   </td>
//                   <td className="border p-2">
//                     <select
//                       value={row.zone}
//                       onChange={(e) => handleRowChange(idx, "zone", e.target.value)}
//                       className="border p-1 rounded"
//                     >
//                       {zones.map((z) => (
//                         <option key={z} value={z}>
//                           {z.toUpperCase()}
//                         </option>
//                       ))}
//                     </select>
//                   </td>
//                   <td className="border p-2">
//                     <select
//                       value={row.transport}
//                       onChange={(e) => handleRowChange(idx, "transport", e.target.value)}
//                       className="border p-1 rounded"
//                     >
//                       {transportModes.map((m) => (
//                         <option key={m} value={m}>
//                           {m}
//                         </option>
//                       ))}
//                     </select>
//                   </td>
//                   <td className="border p-2">
//                     <input
//                       type="number"
//                       value={row.kms}
//                       onChange={(e) => handleRowChange(idx, "kms", e.target.value)}
//                       className="border p-1 w-20 rounded"
//                     />
//                   </td>
//                   <td className="border p-2">
//                     <input
//                       type="number"
//                       value={row.pricePerKm}
//                       onChange={(e) => handleRowChange(idx, "pricePerKm", e.target.value)}
//                       className="border p-1 w-20 rounded"
//                     />
//                   </td>
//                   <td className="border p-2">{row.fare}</td>
//                   <td className="border p-2">
//                     <input
//                       type="number"
//                       value={row.da}
//                       onChange={(e) => handleRowChange(idx, "da", e.target.value)}
//                       className="border p-1 w-20 rounded"
//                     />
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>

//         {/* Buttons */}
//         <div className="flex gap-3">
//           <button
//             type="button"
//             onClick={addRow}
//             className="px-4 py-2 bg-blue-900 text-white rounded hover:bg-blue-600"
//           >
//             + Add Row
//           </button>

//           <button
//             type="submit"
//             className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-600"
//           >
//             Submit
//           </button>

//         </div>
//       </form>
//     </Layout>
//   );
// }

// export default SetInfoPage;





// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import Layout from "../components/Layout";

// const API = process.env.REACT_APP_BACKEND_URL;

// function SetInfoPage() {
//   const navigate = useNavigate();

//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     // Basic validation to ensure fields are not empty
//     if (!username.trim() || !password.trim()) {
//       alert("Please provide both a username and password.");
//       return;
//     }

//     // Define the user data payload with default empty values for other fields
//     const userData = {
//       username,
//       password, // Your backend should handle hashing this password
//       hq: "", // Set hq to an empty string
//       ex: [], // Set ex and os to empty arrays
//       os: [],
//       kms: {}, // Set kms, fares, and da to empty objects
//       fares: {},
//       da: {},
//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/admin/add-user`, userData, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//       alert("User added successfully!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error("Failed to add user:", err);
//       alert("Error: Could not add the user. They may already exist.");
//     }
//   };

//   return (
//     <Layout title="Add New User" backTo="/admin/dashboard">
//       <div className="max-w-md mx-auto">
//         <form
//           onSubmit={handleSubmit}
//           className="bg-white p-6 rounded-lg shadow-md"
//         >
//           <h2 className="text-2xl font-bold mb-6 text-gray-800">
//             Create User Credentials
//           </h2>

//           {/* Username & Password Inputs */}
//           <div className="space-y-4">
//             <input
//               placeholder="Username"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={username}
//               onChange={(e) => setUsername(e.target.value)}
//               required
//             />
//             <input
//               placeholder="Password"
//               type="password"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={password}
//               onChange={(e) => setPassword(e.target.value)}
//               required
//             />
//           </div>

//           {/* Submit Button */}
//           <div className="mt-6">
//             <button
//               type="submit"
//               className="w-full px-4 py-3 bg-blue-900 text-white font-semibold rounded-md hover:bg-blue-700 transition-colors duration-300"
//             >
//               Add User
//             </button>
//           </div>
//         </form>
//       </div>
//     </Layout>
//   );
// }

// export default SetInfoPage;






// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// // A simple Layout component to wrap page content
// const Layout = ({ title, backTo, children }) => {
//   const navigate = useNavigate();
//   return (
//     <div className="min-h-screen bg-gray-100 p-4">
//       <header className="mb-4">
//         {backTo && (
//           <button
//             onClick={() => navigate(backTo)}
//             className="text-blue-600 hover:underline"
//           >
//             &larr; Back
//           </button>
//         )}
//         <h1 className="text-3xl font-bold text-center text-gray-800">{title}</h1>
//       </header>
//       <main>{children}</main>
//     </div>
//   );
// };


// const API = process.env.REACT_APP_BACKEND_URL;

// function SetInfoPage() {
//   const navigate = useNavigate();

//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     // Basic validation to ensure fields are not empty
//     if (!username.trim() || !password.trim()) {
//       alert("Please provide both a username and password.");
//       return;
//     }

//     // Get the logged-in admin's username from localStorage.
//     // Note: Ensure you are saving the admin's username to localStorage upon login.
//     const adminUsername = localStorage.getItem("username");
//     if (!adminUsername) {
//       alert("Could not identify admin. Please log in again.");
//       return;
//     }

//     // Define the user data payload with default empty values for other fields
//     const userData = {
//       username,
//       password, // Your backend should handle hashing this password
//       createdBy: adminUsername, // Added the creator's username here.
//       hq: "", // Set hq to an empty string
//       ex: [], // Set ex and os to empty arrays
//       os: [],
//       kms: {}, // Set kms, fares, and da to empty objects
//       fares: {},
//       da: {},
//     };

//     try {
//       const token = localStorage.getItem("token");
//       await axios.post(`${API}/api/admin/add-user`, userData, {
//         headers: { Authorization: `Bearer ${token}` },
//       });
//       alert("User added successfully!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error("Failed to add user:", err);
//       alert("Error: Could not add the user. They may already exist.");
//     }
//   };

//   return (
//     <Layout title="Add New User" backTo="/admin/dashboard">
//       <div className="max-w-md mx-auto">
//         <form
//           onSubmit={handleSubmit}
//           className="bg-white p-6 rounded-lg shadow-md"
//         >
//           <h2 className="text-2xl font-bold mb-6 text-gray-800">
//             Create User Credentials
//           </h2>

//           {/* Username & Password Inputs */}
//           <div className="space-y-4">
//             <input
//               placeholder="Username"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={username}
//               onChange={(e) => setUsername(e.target.value)}
//               required
//             />
//             <input
//               placeholder="Password"
//               type="password"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={password}
//               onChange={(e) => setPassword(e.target.value)}
//               required
//             />
//           </div>

//           {/* Submit Button */}
//           <div className="mt-6">
//             <button
//               type="submit"
//               className="w-full px-4 py-3 bg-blue-900 text-white font-semibold rounded-md hover:bg-blue-700 transition-colors duration-300"
//             >
//               Add User
//             </button>
//           </div>
//         </form>
//       </div>
//     </Layout>
//   );
// }

// export default SetInfoPage;











// import React, { useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// // A simple Layout component to wrap page content
// const Layout = ({ title, backTo, children }) => {
//   const navigate = useNavigate();
//   return (
//     <div className="min-h-screen bg-gray-100 p-4">
//       <header className="mb-4">
//         {backTo && (
//           <button
//             onClick={() => navigate(backTo)}
//             className="text-blue-600 hover:underline"
//           >
//             &larr; Back
//           </button>
//         )}
//         <h1 className="text-3xl font-bold text-center text-gray-800">{title}</h1>
//       </header>
//       <main>{children}</main>
//     </div>
//   );
// };

// const API = process.env.REACT_APP_BACKEND_URL;

// function SetInfoPage() {
//   const navigate = useNavigate();
//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!username.trim() || !password.trim()) {
//       alert("Please provide both a username and password.");
//       return;
//     }

//     try {
//       const token = localStorage.getItem("token");
//       if (!token) {
//         alert("Authentication error. Please log in again.");
//         navigate("/"); // Redirect to login
//         return;
//       }

//       // --- NEW LOGIC: Decode username from the token ---
//       const payload = JSON.parse(atob(token.split(".")[1]));
//       const adminUsername = payload.username; // Assumes the token payload has a 'username' field

//       if (!adminUsername) {
//         alert("Could not identify admin from token. Please log in again.");
//         return;
//       }
//       // --- END OF NEW LOGIC ---

//       const userData = {
//         username,
//         password,
//         createdBy: adminUsername, // Use the username decoded from the token
//         hq: "",
//         ex: [],
//         os: [],
//         kms: {},
//         fares: {},
//         da: {},
//       };

//       await axios.post(`${API}/api/admin/add-user`, userData, {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       alert("User added successfully!");
//       navigate("/admin/dashboard");
//     } catch (err) {
//       console.error("Failed to add user:", err);
//       // Check if the error is from token decoding
//       if (err instanceof TypeError || err instanceof DOMException) {
//          alert("Invalid token format. Please log in again.");
//          navigate("/");
//       } else {
//          alert("Error: Could not add the user. They may already exist.");
//       }
//     }
//   };

//   return (
//     <Layout title="Add New User" backTo="/admin/dashboard">
//       <div className="max-w-md mx-auto">
//         <form
//           onSubmit={handleSubmit}
//           className="bg-white p-6 rounded-lg shadow-md"
//         >
//           <h2 className="text-2xl font-bold mb-6 text-gray-800">
//             Create User Credentials
//           </h2>
//           <div className="space-y-4">
//             <input
//               placeholder="Username"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={username}
//               onChange={(e) => setUsername(e.target.value)}
//               required
//             />
//             <input
//               placeholder="Password"
//               type="password"
//               className="border p-3 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//               value={password}
//               onChange={(e) => setPassword(e.target.value)}
//               required
//             />
//           </div>
//           <div className="mt-6">
//             <button
//               type="submit"
//               className="w-full px-4 py-3 bg-blue-900 text-white font-semibold rounded-md hover:bg-blue-700 transition-colors duration-300"
//             >
//               Add User
//             </button>
//           </div>
//         </form>
//       </div>
//     </Layout>
//   );
// }

// export default SetInfoPage;










// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// const ShowUserInfo = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUserInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/user/info`, {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         });
//         setUserInfo(res.data);
//       } catch (err) {
//         console.error("Error fetching user info", err);
//       }
//     };

//     fetchUserInfo();
//   }, []);

//   if (!userInfo) return <div className="p-4">Loading...</div>;

//   const { username, hq, ex, os, fares, da } = userInfo;

//   return (
//     <div className="p-6 max-w-3xl mx-auto">
//       <h2 className="text-2xl font-bold mb-4">User Info</h2>

//       {/* Basic Info */}
//       <div className="mb-4">
//         <p>
//           <strong>Username:</strong> {username}
//         </p>
//         <p>
//           <strong>HQ:</strong> {hq}
//         </p>
//         <p>
//           <strong>EX Cities:</strong> {ex.join(", ")}
//         </p>
//         <p>
//           <strong>OS Cities:</strong> {os.join(", ")}
//         </p>
//       </div>

//       {/* Fares */}
//       <div className="mb-6">
//         <h3 className="text-xl font-semibold mb-2">Fares</h3>
//         {Object.entries(fares).map(([city, transportObj]) => {
//           // filter out id and 0 values
//           const filtered = Object.entries(transportObj).filter(
//             ([mode, rate]) => mode !== "_id" && Number(rate) !== 0
//           );

//           if (filtered.length === 0) return null; // skip city if nothing valid to show

//           return (
//             <div key={city} className="mb-2">
//               <p className="font-medium">{city}:</p>
//               <ul className="ml-4 list-disc">
//                 {filtered.map(([mode, rate]) => (
//                   <li key={mode}>
//                     {mode}: ₹{rate}
//                   </li>
//                 ))}
//               </ul>
//             </div>
//           );
//         })}
//       </div>

//       {/* DA */}
//       <div>
//         <h3 className="text-xl font-semibold mb-2">DA</h3>
//         <ul className="ml-4 list-disc">
//           {Object.entries(da).map(([city, amount]) => (
//             <li key={city}>{city}: ₹{amount}</li>
//           ))}
//         </ul>
//       </div>

//       {/* Back Button */}
//       <button
//         className="px-4 py-2 mt-4 bg-gray-300 text-black rounded"
//         onClick={() => navigate(`/mode-selector`)}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default ShowUserInfo;












// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// const ShowUserInfo = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [newPassword, setNewPassword] = useState("");
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUserInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/user/info`, {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         });
//         setUserInfo(res.data);
//       } catch (err) {
//         console.error("Error fetching user info", err);
//       }
//     };

//     fetchUserInfo();
//   }, []);

//   const handlePasswordReset = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/user/reset-password`,
//         { newPassword },
//         {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );
//       alert("Password updated successfully!");
//       setNewPassword("");
//     } catch (err) {
//       console.error("Error resetting password", err);
//       alert("Failed to reset password");
//     }
//   };

//   if (!userInfo) return <div className="p-4">Loading...</div>;

//   const { username, hq, ex = [], os = [], fares, kms, da } = userInfo;

//   // Transform data to match fare table structure
//   const tableData = {};
//   Object.keys(fares || {}).forEach((city) => {
//     const cityFares = fares[city] || {};

//     let zone = "";
//     if (city === hq) zone = "HQ";
//     else if (ex.includes(city)) zone = "EX";
//     else if (os.includes(city)) zone = "OS";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({
//         mode,
//         fare: cityFares[mode],
//       }));

//     tableData[city] = {
//       zone,
//       km: kms?.[city] || 0,
//       da: da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <div className="p-6 max-w-4xl mx-auto">
//       <h2 className="text-2xl font-bold mb-4">User Info</h2>

//       {/* Basic Info */}
//       <div className="mb-4">
//         <p>
//           <strong>Username:</strong> {username}
//         </p>
//       </div>

//       {/* Password Reset */}
//       <div className="mb-6 border rounded p-4 bg-gray-50">
//         <h3 className="font-semibold mb-2">Reset Password</h3>
//         <div className="flex gap-2 items-center">
//           <input
//             type="password"
//             placeholder="Enter new password"
//             value={newPassword}
//             onChange={(e) => setNewPassword(e.target.value)}
//             className="border p-2 flex-1"
//           />
//           <button
//             className="bg-blue-500 text-white px-4 py-2 rounded"
//             onClick={handlePasswordReset}
//           >
//             Reset
//           </button>
//         </div>
//       </div>

//       {/* Cities Info */}
//       <div className="mb-6">
//         <h3 className="font-semibold">HQ City</h3>
//         <p className="mb-3">{hq || "No HQ set"}</p>

//         <h3 className="font-semibold">EX Cities</h3>
//         <p className="mb-3">{ex.length > 0 ? ex.join(", ") : "No EX cities"}</p>

//         <h3 className="font-semibold">OS Cities</h3>
//         <p>{os.length > 0 ? os.join(", ") : "No OS cities"}</p>
//       </div>

//       {/* Fares Table */}
//       <div className="overflow-x-auto">
//         <table className="w-full border border-gray-300">
//           <thead>
//             <tr className="bg-gray-100">
//               <th className="border p-2">City</th>
//               <th className="border p-2">Zone</th>
//               <th className="border p-2">Transport</th>
//               <th className="border p-2">Km's</th>
//               <th className="border p-2">Fare</th>
//               <th className="border p-2">DA</th>
//             </tr>
//           </thead>
//           <tbody>
//             {Object.entries(tableData).map(([city, data]) => {
//               if (data.transports.length === 0) {
//                 return (
//                   <tr key={city}>
//                     <td className="border p-2">{city}</td>
//                     <td className="border p-2">{data.zone}</td>
//                     <td className="border p-2">-</td>
//                     <td className="border p-2">{data.km}</td>
//                     <td className="border p-2">0</td>
//                     <td className="border p-2">{data.da}</td>
//                   </tr>
//                 );
//               }

//               return data.transports.map((t, index) => (
//                 <tr key={`${city}-${index}`}>
//                   <td className="border p-2">{city}</td>
//                   <td className="border p-2">{data.zone}</td>
//                   <td className="border p-2 capitalize">{t.mode}</td>
//                   <td className="border p-2">{data.km}</td>
//                   <td className="border p-2">{t.fare}</td>
//                   <td className="border p-2">{data.da}</td>
//                 </tr>
//               ));
//             })}
//           </tbody>
//         </table>
//       </div>

//       {/* Back Button */}
//       <button
//         className="px-4 py-2 mt-6 bg-gray-300 text-black rounded"
//         onClick={() => navigate("/mode-selector")}
//       >
//         ← Back
//       </button>
//     </div>
//   );
// };

// export default ShowUserInfo;









// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";

// const API = process.env.REACT_APP_BACKEND_URL;

// const ShowUserInfo = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [newPassword, setNewPassword] = useState("");
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchUserInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/user/info`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUserInfo(res.data);
//       } catch (err) {
//         console.error("Error fetching user info", err);
//       }
//     };
//     fetchUserInfo();
//   }, []);

//   const handlePasswordReset = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/user/reset-password`,
//         { newPassword },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("Password updated successfully!");
//       setNewPassword("");
//     } catch (err) {
//       console.error("Error resetting password", err);
//       alert("Failed to reset password");
//     }
//   };

//   if (!userInfo) return <div className="p-4">Loading...</div>;

//   const { username, hq, ex = [], os = [], fares, kms, da } = userInfo;

//   // Prepare data for table
//   const tableData = {};
//   Object.keys(fares || {}).forEach((city) => {
//     const cityFares = fares[city] || {};
//     let zone = city === hq ? "HQ" : ex.includes(city) ? "EX" : os.includes(city) ? "OS" : "";

//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));

//     tableData[city] = {
//       zone,
//       km: kms?.[city] || 0,
//       da: da?.[city] || 0,
//       transports,
//     };
//   });

//   return (
//     <div className="flex flex-col min-h-screen bg-gray-50">
//       {/* Top Bar */}
//       <header className="bg-blue-600 text-white p-4 flex justify-between items-center shadow-md">
//         <button
//           className="text-white font-medium hover:underline"
//           onClick={() => navigate("/mode-selector")}
//         >
//           ← Back
//         </button>
//         <h1 className="text-xl font-bold">User Information</h1>
//         <div></div> {/* Spacer for symmetry */}
//       </header>

//       {/* Main Content */}
//       <main className="flex-1 p-6 max-w-5xl mx-auto w-full">
//         {/* Basic Info */}
//         <div className="mb-6 bg-white rounded-lg shadow p-4">
//           <h2 className="text-lg font-semibold mb-2">Profile Details</h2>
//           <p>
//             <strong>Username:</strong> {username}
//           </p>
//         </div>

//         {/* Password Reset */}
//         <div className="mb-6 bg-white rounded-lg shadow p-4">
//           <h2 className="text-lg font-semibold mb-3">Reset Password</h2>
//           <div className="flex gap-2 items-center">
//             <input
//               type="password"
//               placeholder="Enter new password"
//               value={newPassword}
//               onChange={(e) => setNewPassword(e.target.value)}
//               className="border p-2 rounded flex-1 focus:outline-none focus:ring focus:ring-blue-300"
//             />
//             <button
//               className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
//               onClick={handlePasswordReset}
//             >
//               Reset
//             </button>
//           </div>
//         </div>

//         {/* Cities Info */}
//         <div className="mb-6 bg-white rounded-lg shadow p-4">
//           <h2 className="text-lg font-semibold mb-3">Cities Information</h2>
//           <div className="mb-3">
//             <p>
//               <strong>HQ City:</strong> {hq || "Not set"}
//             </p>
//           </div>
//           <div className="mb-3">
//             <p>
//               <strong>EX Cities:</strong> {ex.length > 0 ? ex.join(", ") : "None"}
//             </p>
//           </div>
//           <div>
//             <p>
//               <strong>OS Cities:</strong> {os.length > 0 ? os.join(", ") : "None"}
//             </p>
//           </div>
//         </div>

//         {/* Fares Table */}
//         <div className="bg-white rounded-lg shadow overflow-x-auto">
//           <table className="w-full border border-gray-200">
//             <thead>
//               <tr className="bg-blue-100 text-blue-800">
//                 <th className="border p-3 text-left">City</th>
//                 <th className="border p-3 text-left">Zone</th>
//                 <th className="border p-3 text-left">Transport</th>
//                 <th className="border p-3 text-left">Km's</th>
//                 <th className="border p-3 text-left">Fare</th>
//                 <th className="border p-3 text-left">DA</th>
//               </tr>
//             </thead>
//             <tbody>
//               {Object.entries(tableData).map(([city, data], i) => {
//                 if (data.transports.length === 0) {
//                   return (
//                     <tr key={city} className={i % 2 === 0 ? "bg-gray-50" : "bg-white"}>
//                       <td className="border p-3">{city}</td>
//                       <td className="border p-3">{data.zone}</td>
//                       <td className="border p-3">-</td>
//                       <td className="border p-3">{data.km}</td>
//                       <td className="border p-3">0</td>
//                       <td className="border p-3">{data.da}</td>
//                     </tr>
//                   );
//                 }
//                 return data.transports.map((t, index) => (
//                   <tr
//                     key={`${city}-${index}`}
//                     className={i % 2 === 0 ? "bg-gray-50" : "bg-white"}
//                   >
//                     <td className="border p-3">{city}</td>
//                     <td className="border p-3">{data.zone}</td>
//                     <td className="border p-3 capitalize">{t.mode}</td>
//                     <td className="border p-3">{data.km}</td>
//                     <td className="border p-3">{t.fare}</td>
//                     <td className="border p-3">{data.da}</td>
//                   </tr>
//                 ));
//               })}
//             </tbody>
//           </table>
//         </div>
//       </main>

//       {/* Bottom Bar */}
//       <footer className="bg-blue-600 text-white text-center p-3 text-sm">
//         © {new Date().getFullYear()} Your Company | All rights reserved
//       </footer>
//     </div>
//   );
// };

// export default ShowUserInfo;













// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import Layout from "../components/Layout"; // adjust path if needed

// const API = process.env.REACT_APP_BACKEND_URL;

// const ShowUserInfo = () => {
//   const [userInfo, setUserInfo] = useState(null);
//   const [newPassword, setNewPassword] = useState("");

//   useEffect(() => {
//     const fetchUserInfo = async () => {
//       try {
//         const token = localStorage.getItem("token");
//         const res = await axios.get(`${API}/api/user/info`, {
//           headers: { Authorization: `Bearer ${token}` },
//         });
//         setUserInfo(res.data);
//       } catch (err) {
//         console.error("Error fetching user info", err);
//       }
//     };
//     fetchUserInfo();
//   }, []);

//   const handlePasswordReset = async () => {
//     try {
//       const token = localStorage.getItem("token");
//       await axios.put(
//         `${API}/api/user/reset-password`,
//         { newPassword },
//         { headers: { Authorization: `Bearer ${token}` } }
//       );
//       alert("✅ Password updated successfully!");
//       setNewPassword("");
//     } catch (err) {
//       console.error("Error resetting password", err);
//       alert("❌ Failed to reset password");
//     }
//   };

//   if (!userInfo) return <div className="p-6 text-center">Loading...</div>;

//   const { username, hq, ex = [], os = [], fares, kms, da } = userInfo;

//   // Prepare data for table
//   const tableData = {};
//   Object.keys(fares || {}).forEach((city) => {
//     const cityFares = fares[city] || {};
//     const zone = city === hq ? "HQ" : ex.includes(city) ? "EX" : os.includes(city) ? "OS" : "";
//     const transports = Object.keys(cityFares)
//       .filter((mode) => cityFares[mode] > 0)
//       .map((mode) => ({ mode, fare: cityFares[mode] }));
//     tableData[city] = { zone, km: kms?.[city] || 0, da: da?.[city] || 0, transports };
//   });

//   return (
//     <Layout title="User Information" backTo="/mode-selector">
//       <div className="max-w-5xl mx-auto w-full space-y-6">
//         {/* Profile Section */}
//         <div className="bg-white shadow-lg rounded-2xl p-6">
//           <h2 className="text-xl font-bold mb-3">Profile Details</h2>
//           <p><strong>Username:</strong> {username}</p>
//         </div>

//         {/* Password Reset Section */}
//         <div className="bg-white shadow-lg rounded-2xl p-6">
//           <h2 className="text-xl font-bold mb-3">Reset Password</h2>
//           <div className="flex flex-col md:flex-row gap-3 items-center">
//             <input
//               type="password"
//               placeholder="Enter new password"
//               value={newPassword}
//               onChange={(e) => setNewPassword(e.target.value)}
//               className="border p-3 rounded-lg flex-1 focus:outline-none focus:ring-2 focus:ring-[#2C3E65]"
//             />
//             <button
//               onClick={handlePasswordReset}
//               className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg shadow transition"
//             >
//               Reset Password
//             </button>
//           </div>
//         </div>

//         {/* Cities Info */}
//         <div className="bg-white shadow-lg rounded-2xl p-6">
//           <h2 className="text-xl font-bold mb-3">Cities Information</h2>
//           <p><strong>HQ City:</strong> {hq || "Not set"}</p>
//           <p><strong>EX Cities:</strong> {ex.length > 0 ? ex.join(", ") : "None"}</p>
//           <p><strong>OS Cities:</strong> {os.length > 0 ? os.join(", ") : "None"}</p>
//         </div>

//         {/* Fares Table */}
//         <div className="bg-white shadow-lg rounded-2xl overflow-x-auto">
//           <table className="w-full border border-gray-200 min-w-[700px]">
//             <thead className="bg-[#2C3E65] text-white">
//               <tr>
//                 <th className="border p-3 text-left">City</th>
//                 <th className="border p-3 text-left">Zone</th>
//                 <th className="border p-3 text-left">Transport</th>
//                 <th className="border p-3 text-left">Km's</th>
//                 <th className="border p-3 text-left">Fare</th>
//                 <th className="border p-3 text-left">DA</th>
//               </tr>
//             </thead>
//             <tbody>
//               {Object.entries(tableData).map(([city, data], i) => {
//                 if (data.transports.length === 0) {
//                   return (
//                     <tr key={city} className={i % 2 === 0 ? "bg-gray-50" : "bg-white"}>
//                       <td className="border p-3">{city}</td>
//                       <td className="border p-3">{data.zone}</td>
//                       <td className="border p-3">-</td>
//                       <td className="border p-3">{data.km}</td>
//                       <td className="border p-3">0</td>
//                       <td className="border p-3">{data.da}</td>
//                     </tr>
//                   );
//                 }
//                 return data.transports.map((t, index) => (
//                   <tr key={`${city}-${index}`} className={i % 2 === 0 ? "bg-gray-50" : "bg-white"}>
//                     <td className="border p-3">{city}</td>
//                     <td className="border p-3">{data.zone}</td>
//                     <td className="border p-3 capitalize">{t.mode}</td>
//                     <td className="border p-3">{data.km}</td>
//                     <td className="border p-3">{t.fare}</td>
//                     <td className="border p-3">{data.da}</td>
//                   </tr>
//                 ));
//               })}
//             </tbody>
//           </table>
//         </div>
//       </div>
//     </Layout>
//   );
// };

// export default ShowUserInfo;










